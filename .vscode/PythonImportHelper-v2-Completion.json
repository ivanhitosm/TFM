[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "RandomCycler",
        "importPath": "encoder.data_objects.random_cycler",
        "description": "encoder.data_objects.random_cycler",
        "isExtraImport": true,
        "detail": "encoder.data_objects.random_cycler",
        "documentation": {}
    },
    {
        "label": "RandomCycler",
        "importPath": "encoder.data_objects.random_cycler",
        "description": "encoder.data_objects.random_cycler",
        "isExtraImport": true,
        "detail": "encoder.data_objects.random_cycler",
        "documentation": {}
    },
    {
        "label": "Utterance",
        "importPath": "encoder.data_objects.utterance",
        "description": "encoder.data_objects.utterance",
        "isExtraImport": true,
        "detail": "encoder.data_objects.utterance",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "encoder.data_objects.speaker",
        "description": "encoder.data_objects.speaker",
        "isExtraImport": true,
        "detail": "encoder.data_objects.speaker",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "encoder.data_objects.speaker",
        "description": "encoder.data_objects.speaker",
        "isExtraImport": true,
        "detail": "encoder.data_objects.speaker",
        "documentation": {}
    },
    {
        "label": "SpeakerBatch",
        "importPath": "encoder.data_objects.speaker_batch",
        "description": "encoder.data_objects.speaker_batch",
        "isExtraImport": true,
        "detail": "encoder.data_objects.speaker_batch",
        "documentation": {}
    },
    {
        "label": "partials_n_frames",
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "isExtraImport": true,
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "isExtraImport": true,
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "isExtraImport": true,
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "isExtraImport": true,
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "isExtraImport": true,
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "binary_dilation",
        "importPath": "scipy.ndimage.morphology",
        "description": "scipy.ndimage.morphology",
        "isExtraImport": true,
        "detail": "scipy.ndimage.morphology",
        "documentation": {}
    },
    {
        "label": "webrtcvad",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webrtcvad",
        "description": "webrtcvad",
        "detail": "webrtcvad",
        "documentation": {}
    },
    {
        "label": "librosa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa",
        "description": "librosa",
        "detail": "librosa",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "SpeakerEncoder",
        "importPath": "encoder.model",
        "description": "encoder.model",
        "isExtraImport": true,
        "detail": "encoder.model",
        "documentation": {}
    },
    {
        "label": "SpeakerEncoder",
        "importPath": "encoder.model",
        "description": "encoder.model",
        "isExtraImport": true,
        "detail": "encoder.model",
        "documentation": {}
    },
    {
        "label": "preprocess_wav",
        "importPath": "encoder.audio",
        "description": "encoder.audio",
        "isExtraImport": true,
        "detail": "encoder.audio",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "cm",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "encoder",
        "description": "encoder",
        "isExtraImport": true,
        "detail": "encoder",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "encoder",
        "description": "encoder",
        "isExtraImport": true,
        "detail": "encoder",
        "documentation": {}
    },
    {
        "label": "inference",
        "importPath": "encoder",
        "description": "encoder",
        "isExtraImport": true,
        "detail": "encoder",
        "documentation": {}
    },
    {
        "label": "inference",
        "importPath": "encoder",
        "description": "encoder",
        "isExtraImport": true,
        "detail": "encoder",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "optim",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "isExtraImport": true,
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "isExtraImport": true,
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "model_embedding_size",
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "isExtraImport": true,
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "interp1d",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "clip_grad_norm_",
        "importPath": "torch.nn.utils",
        "description": "torch.nn.utils",
        "isExtraImport": true,
        "detail": "torch.nn.utils",
        "documentation": {}
    },
    {
        "label": "brentq",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "ThreadPool",
        "importPath": "multiprocess.pool",
        "description": "multiprocess.pool",
        "isExtraImport": true,
        "detail": "multiprocess.pool",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocess.pool",
        "description": "multiprocess.pool",
        "isExtraImport": true,
        "detail": "multiprocess.pool",
        "documentation": {}
    },
    {
        "label": "librispeech_datasets",
        "importPath": "encoder.config",
        "description": "encoder.config",
        "isExtraImport": true,
        "detail": "encoder.config",
        "documentation": {}
    },
    {
        "label": "anglophone_nationalites",
        "importPath": "encoder.config",
        "description": "encoder.config",
        "isExtraImport": true,
        "detail": "encoder.config",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "Visualizations",
        "importPath": "encoder.visualizations",
        "description": "encoder.visualizations",
        "isExtraImport": true,
        "detail": "encoder.visualizations",
        "documentation": {}
    },
    {
        "label": "SpeakerVerificationDataLoader",
        "importPath": "encoder.data_objects",
        "description": "encoder.data_objects",
        "isExtraImport": true,
        "detail": "encoder.data_objects",
        "documentation": {}
    },
    {
        "label": "SpeakerVerificationDataset",
        "importPath": "encoder.data_objects",
        "description": "encoder.data_objects",
        "isExtraImport": true,
        "detail": "encoder.data_objects",
        "documentation": {}
    },
    {
        "label": "Profiler",
        "importPath": "utils.profiler",
        "description": "utils.profiler",
        "isExtraImport": true,
        "detail": "utils.profiler",
        "documentation": {}
    },
    {
        "label": "SpeakerVerificationDataset",
        "importPath": "encoder.data_objects.speaker_verification_dataset",
        "description": "encoder.data_objects.speaker_verification_dataset",
        "isExtraImport": true,
        "detail": "encoder.data_objects.speaker_verification_dataset",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "visdom",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "visdom",
        "description": "visdom",
        "detail": "visdom",
        "documentation": {}
    },
    {
        "label": "umap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "umap",
        "description": "umap",
        "detail": "umap",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "bipartite",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "approximation",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "filterwarnings",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.approximation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.approximation",
        "description": "networkx.algorithms.approximation",
        "detail": "networkx.algorithms.approximation",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.bipartite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.bipartite",
        "description": "networkx.algorithms.bipartite",
        "detail": "networkx.algorithms.bipartite",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "_compute_attention",
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "isExtraImport": true,
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "LocationSensitiveAttention",
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "isExtraImport": true,
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "RNNCell",
        "importPath": "tensorflow.contrib.rnn",
        "description": "tensorflow.contrib.rnn",
        "isExtraImport": true,
        "detail": "tensorflow.contrib.rnn",
        "documentation": {}
    },
    {
        "label": "ops",
        "importPath": "tensorflow.python.framework",
        "description": "tensorflow.python.framework",
        "isExtraImport": true,
        "detail": "tensorflow.python.framework",
        "documentation": {}
    },
    {
        "label": "tensor_shape",
        "importPath": "tensorflow.python.framework",
        "description": "tensorflow.python.framework",
        "isExtraImport": true,
        "detail": "tensorflow.python.framework",
        "documentation": {}
    },
    {
        "label": "ops",
        "importPath": "tensorflow.python.framework",
        "description": "tensorflow.python.framework",
        "isExtraImport": true,
        "detail": "tensorflow.python.framework",
        "documentation": {}
    },
    {
        "label": "tensor_shape",
        "importPath": "tensorflow.python.framework",
        "description": "tensorflow.python.framework",
        "isExtraImport": true,
        "detail": "tensorflow.python.framework",
        "documentation": {}
    },
    {
        "label": "array_ops",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "check_ops",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "rnn_cell_impl",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "tensor_array_ops",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "array_ops",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "math_ops",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "nn_ops",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "variable_scope",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "rnn_cell_impl",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "nest",
        "importPath": "tensorflow.python.util",
        "description": "tensorflow.python.util",
        "isExtraImport": true,
        "detail": "tensorflow.python.util",
        "documentation": {}
    },
    {
        "label": "nest",
        "importPath": "tensorflow.python.util",
        "description": "tensorflow.python.util",
        "isExtraImport": true,
        "detail": "tensorflow.python.util",
        "documentation": {}
    },
    {
        "label": "BahdanauAttention",
        "importPath": "tensorflow.contrib.seq2seq.python.ops.attention_wrapper",
        "description": "tensorflow.contrib.seq2seq.python.ops.attention_wrapper",
        "isExtraImport": true,
        "detail": "tensorflow.contrib.seq2seq.python.ops.attention_wrapper",
        "documentation": {}
    },
    {
        "label": "core",
        "importPath": "tensorflow.python.layers",
        "description": "tensorflow.python.layers",
        "isExtraImport": true,
        "detail": "tensorflow.python.layers",
        "documentation": {}
    },
    {
        "label": "base",
        "importPath": "tensorflow.python.layers",
        "description": "tensorflow.python.layers",
        "isExtraImport": true,
        "detail": "tensorflow.python.layers",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "TacoTestHelper",
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "isExtraImport": true,
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "TacoTrainingHelper",
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "isExtraImport": true,
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "TacoTrainingHelper",
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "isExtraImport": true,
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "TacoTestHelper",
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "isExtraImport": true,
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "tensorflow.contrib.seq2seq.python.ops",
        "description": "tensorflow.contrib.seq2seq.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.contrib.seq2seq.python.ops",
        "documentation": {}
    },
    {
        "label": "helper",
        "importPath": "tensorflow.contrib.seq2seq.python.ops",
        "description": "tensorflow.contrib.seq2seq.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.contrib.seq2seq.python.ops",
        "documentation": {}
    },
    {
        "label": "Helper",
        "importPath": "tensorflow.contrib.seq2seq",
        "description": "tensorflow.contrib.seq2seq",
        "isExtraImport": true,
        "detail": "tensorflow.contrib.seq2seq",
        "documentation": {}
    },
    {
        "label": "dynamic_decode",
        "importPath": "tensorflow.contrib.seq2seq",
        "description": "tensorflow.contrib.seq2seq",
        "isExtraImport": true,
        "detail": "tensorflow.contrib.seq2seq",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "synthesizer.utils.symbols",
        "description": "synthesizer.utils.symbols",
        "isExtraImport": true,
        "detail": "synthesizer.utils.symbols",
        "documentation": {}
    },
    {
        "label": "symbols",
        "importPath": "synthesizer.utils.symbols",
        "description": "synthesizer.utils.symbols",
        "isExtraImport": true,
        "detail": "synthesizer.utils.symbols",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "isExtraImport": true,
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "isExtraImport": true,
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "isExtraImport": true,
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "isExtraImport": true,
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "isExtraImport": true,
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "TacotronEncoderCell",
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "isExtraImport": true,
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "TacotronDecoderCell",
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "isExtraImport": true,
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "CustomDecoder",
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "isExtraImport": true,
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "inflect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inflect",
        "description": "inflect",
        "detail": "inflect",
        "documentation": {}
    },
    {
        "label": "librosa.filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa.filters",
        "description": "librosa.filters",
        "detail": "librosa.filters",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "wavfile",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "text_to_sequence",
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "isExtraImport": true,
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "text_to_sequence",
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "isExtraImport": true,
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "sequence_to_text",
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "isExtraImport": true,
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "HParams",
        "importPath": "tensorflow.contrib.training",
        "description": "tensorflow.contrib.training",
        "isExtraImport": true,
        "detail": "tensorflow.contrib.training",
        "documentation": {}
    },
    {
        "label": "Tacotron2",
        "importPath": "synthesizer.tacotron2",
        "description": "synthesizer.tacotron2",
        "isExtraImport": true,
        "detail": "synthesizer.tacotron2",
        "documentation": {}
    },
    {
        "label": "Tacotron2",
        "importPath": "synthesizer.tacotron2",
        "description": "synthesizer.tacotron2",
        "isExtraImport": true,
        "detail": "synthesizer.tacotron2",
        "documentation": {}
    },
    {
        "label": "hparams",
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "isExtraImport": true,
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "hparams_debug_string",
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "isExtraImport": true,
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "hparams_debug_string",
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "isExtraImport": true,
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "hparams",
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "isExtraImport": true,
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "hparams",
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "isExtraImport": true,
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "hparams",
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "isExtraImport": true,
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "hparams",
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "isExtraImport": true,
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "synthesizer",
        "description": "synthesizer",
        "isExtraImport": true,
        "detail": "synthesizer",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "synthesizer",
        "description": "synthesizer",
        "isExtraImport": true,
        "detail": "synthesizer",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "synthesizer",
        "description": "synthesizer",
        "isExtraImport": true,
        "detail": "synthesizer",
        "documentation": {}
    },
    {
        "label": "infolog",
        "importPath": "synthesizer",
        "description": "synthesizer",
        "isExtraImport": true,
        "detail": "synthesizer",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "synthesizer",
        "description": "synthesizer",
        "isExtraImport": true,
        "detail": "synthesizer",
        "documentation": {}
    },
    {
        "label": "infolog",
        "importPath": "synthesizer",
        "description": "synthesizer",
        "isExtraImport": true,
        "detail": "synthesizer",
        "documentation": {}
    },
    {
        "label": "numba.cuda",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numba.cuda",
        "description": "numba.cuda",
        "detail": "numba.cuda",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing.pool",
        "description": "multiprocessing.pool",
        "isExtraImport": true,
        "detail": "multiprocessing.pool",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "logmmse",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "synthesizer.models",
        "description": "synthesizer.models",
        "isExtraImport": true,
        "detail": "synthesizer.models",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "synthesizer.models",
        "description": "synthesizer.models",
        "isExtraImport": true,
        "detail": "synthesizer.models",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "synthesizer.utils",
        "description": "synthesizer.utils",
        "isExtraImport": true,
        "detail": "synthesizer.utils",
        "documentation": {}
    },
    {
        "label": "ValueWindow",
        "importPath": "synthesizer.utils",
        "description": "synthesizer.utils",
        "isExtraImport": true,
        "detail": "synthesizer.utils",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "synthesizer.utils",
        "description": "synthesizer.utils",
        "isExtraImport": true,
        "detail": "synthesizer.utils",
        "documentation": {}
    },
    {
        "label": "Feeder",
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "isExtraImport": true,
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "FigureCanvasQTAgg",
        "importPath": "matplotlib.backends.backend_qt5agg",
        "description": "matplotlib.backends.backend_qt5agg",
        "isExtraImport": true,
        "detail": "matplotlib.backends.backend_qt5agg",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "matplotlib.figure",
        "description": "matplotlib.figure",
        "isExtraImport": true,
        "detail": "matplotlib.figure",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "plot_embedding_as_heatmap",
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "isExtraImport": true,
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "Utterance",
        "importPath": "toolbox.utterance",
        "description": "toolbox.utterance",
        "isExtraImport": true,
        "detail": "toolbox.utterance",
        "documentation": {}
    },
    {
        "label": "sounddevice",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sounddevice",
        "description": "sounddevice",
        "detail": "sounddevice",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "expn",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "torch.nn.functional",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn.functional",
        "description": "torch.nn.functional",
        "detail": "torch.nn.functional",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.display",
        "description": "utils.display",
        "isExtraImport": true,
        "detail": "utils.display",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.dsp",
        "description": "utils.dsp",
        "isExtraImport": true,
        "detail": "utils.dsp",
        "documentation": {}
    },
    {
        "label": "sample_from_discretized_mix_logistic",
        "importPath": "vocoder.distribution",
        "description": "vocoder.distribution",
        "isExtraImport": true,
        "detail": "vocoder.distribution",
        "documentation": {}
    },
    {
        "label": "discretized_mix_logistic_loss",
        "importPath": "vocoder.distribution",
        "description": "vocoder.distribution",
        "isExtraImport": true,
        "detail": "vocoder.distribution",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "isExtraImport": true,
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "stream",
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "isExtraImport": true,
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "simple_table",
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "isExtraImport": true,
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "isExtraImport": true,
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "isExtraImport": true,
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "vocoder.hparams",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "lfilter",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "WaveRNN",
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "isExtraImport": true,
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "WaveRNN",
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "isExtraImport": true,
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "WaveRNN",
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "isExtraImport": true,
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "hparams",
        "importPath": "vocoder",
        "description": "vocoder",
        "isExtraImport": true,
        "detail": "vocoder",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "vocoder",
        "description": "vocoder",
        "isExtraImport": true,
        "detail": "vocoder",
        "documentation": {}
    },
    {
        "label": "inference",
        "importPath": "vocoder",
        "description": "vocoder",
        "isExtraImport": true,
        "detail": "vocoder",
        "documentation": {}
    },
    {
        "label": "VocoderDataset",
        "importPath": "vocoder.vocoder_dataset",
        "description": "vocoder.vocoder_dataset",
        "isExtraImport": true,
        "detail": "vocoder.vocoder_dataset",
        "documentation": {}
    },
    {
        "label": "collate_vocoder",
        "importPath": "vocoder.vocoder_dataset",
        "description": "vocoder.vocoder_dataset",
        "isExtraImport": true,
        "detail": "vocoder.vocoder_dataset",
        "documentation": {}
    },
    {
        "label": "gen_testset",
        "importPath": "vocoder.gen_wavernn",
        "description": "vocoder.gen_wavernn",
        "isExtraImport": true,
        "detail": "vocoder.gen_wavernn",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "print_args",
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "isExtraImport": true,
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "Synthesizer",
        "importPath": "synthesizer.inference",
        "description": "synthesizer.inference",
        "isExtraImport": true,
        "detail": "synthesizer.inference",
        "documentation": {}
    },
    {
        "label": "soundfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "soundfile",
        "description": "soundfile",
        "detail": "soundfile",
        "documentation": {}
    },
    {
        "label": "Toolbox",
        "importPath": "toolbox",
        "description": "toolbox",
        "isExtraImport": true,
        "detail": "toolbox",
        "documentation": {}
    },
    {
        "label": "preprocess_librispeech",
        "importPath": "encoder.preprocess",
        "description": "encoder.preprocess",
        "isExtraImport": true,
        "detail": "encoder.preprocess",
        "documentation": {}
    },
    {
        "label": "preprocess_voxceleb1",
        "importPath": "encoder.preprocess",
        "description": "encoder.preprocess",
        "isExtraImport": true,
        "detail": "encoder.preprocess",
        "documentation": {}
    },
    {
        "label": "preprocess_voxceleb2",
        "importPath": "encoder.preprocess",
        "description": "encoder.preprocess",
        "isExtraImport": true,
        "detail": "encoder.preprocess",
        "documentation": {}
    },
    {
        "label": "train",
        "importPath": "encoder.train",
        "description": "encoder.train",
        "isExtraImport": true,
        "detail": "encoder.train",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "vosk",
        "description": "vosk",
        "isExtraImport": true,
        "detail": "vosk",
        "documentation": {}
    },
    {
        "label": "KaldiRecognizer",
        "importPath": "vosk",
        "description": "vosk",
        "isExtraImport": true,
        "detail": "vosk",
        "documentation": {}
    },
    {
        "label": "SetLogLevel",
        "importPath": "vosk",
        "description": "vosk",
        "isExtraImport": true,
        "detail": "vosk",
        "documentation": {}
    },
    {
        "label": "AudioSegment",
        "importPath": "pydub",
        "description": "pydub",
        "isExtraImport": true,
        "detail": "pydub",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "preprocess_librispeech",
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "isExtraImport": true,
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "create_embeddings",
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "isExtraImport": true,
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "tacotron_train",
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "isExtraImport": true,
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "run_synthesis",
        "importPath": "synthesizer.synthesize",
        "description": "synthesizer.synthesize",
        "isExtraImport": true,
        "detail": "synthesizer.synthesize",
        "documentation": {}
    },
    {
        "label": "train",
        "importPath": "vocoder.train",
        "description": "vocoder.train",
        "isExtraImport": true,
        "detail": "vocoder.train",
        "documentation": {}
    },
    {
        "label": "RandomCycler",
        "kind": 6,
        "importPath": "encoder.data_objects.random_cycler",
        "description": "encoder.data_objects.random_cycler",
        "peekOfCode": "class RandomCycler:\n    \"\"\"\n    Creates an internal copy of a sequence and allows access to its items in a constrained random \n    order. For a source sequence of n items and one or several consecutive queries of a total \n    of m items, the following guarantees hold (one implies the other):\n        - Each item will be returned between m // n and ((m - 1) // n) + 1 times.\n        - Between two appearances of the same item, there may be at most 2 * (n - 1) other items.\n    \"\"\"\n    def __init__(self, source):\n        if len(source) == 0:",
        "detail": "encoder.data_objects.random_cycler",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "kind": 6,
        "importPath": "encoder.data_objects.speaker",
        "description": "encoder.data_objects.speaker",
        "peekOfCode": "class Speaker:\n    def __init__(self, root: Path):\n        self.root = root\n        self.name = root.name\n        self.utterances = None\n        self.utterance_cycler = None\n    def _load_utterances(self):\n        with self.root.joinpath(\"_sources.txt\").open(\"r\") as sources_file:\n            sources = [l.split(\",\") for l in sources_file]\n        sources = {frames_fname: wave_fpath for frames_fname, wave_fpath in sources}",
        "detail": "encoder.data_objects.speaker",
        "documentation": {}
    },
    {
        "label": "SpeakerBatch",
        "kind": 6,
        "importPath": "encoder.data_objects.speaker_batch",
        "description": "encoder.data_objects.speaker_batch",
        "peekOfCode": "class SpeakerBatch:\n    def __init__(self, speakers: List[Speaker], utterances_per_speaker: int, n_frames: int):\n        self.speakers = speakers\n        self.partials = {s: s.random_partial(utterances_per_speaker, n_frames) for s in speakers}\n        # Array of shape (n_speakers * n_utterances, n_frames, mel_n), e.g. for 3 speakers with\n        # 4 utterances each of 160 frames of 40 mel coefficients: (12, 160, 40)\n        self.data = np.array([frames for s in speakers for _, frames, _ in self.partials[s]])",
        "detail": "encoder.data_objects.speaker_batch",
        "documentation": {}
    },
    {
        "label": "SpeakerVerificationDataset",
        "kind": 6,
        "importPath": "encoder.data_objects.speaker_verification_dataset",
        "description": "encoder.data_objects.speaker_verification_dataset",
        "peekOfCode": "class SpeakerVerificationDataset(Dataset):\n    def __init__(self, datasets_root: Path):\n        self.root = datasets_root\n        speaker_dirs = [f for f in self.root.glob(\"*\") if f.is_dir()]\n        if len(speaker_dirs) == 0:\n            raise Exception(\"No speakers found. Make sure you are pointing to the directory \"\n                            \"containing all preprocessed speaker directories.\")\n        self.speakers = [Speaker(speaker_dir) for speaker_dir in speaker_dirs]\n        self.speaker_cycler = RandomCycler(self.speakers)\n    def __len__(self):",
        "detail": "encoder.data_objects.speaker_verification_dataset",
        "documentation": {}
    },
    {
        "label": "SpeakerVerificationDataLoader",
        "kind": 6,
        "importPath": "encoder.data_objects.speaker_verification_dataset",
        "description": "encoder.data_objects.speaker_verification_dataset",
        "peekOfCode": "class SpeakerVerificationDataLoader(DataLoader):\n    def __init__(self, dataset, speakers_per_batch, utterances_per_speaker, sampler=None, \n                 batch_sampler=None, num_workers=0, pin_memory=False, timeout=0, \n                 worker_init_fn=None):\n        self.utterances_per_speaker = utterances_per_speaker\n        super().__init__(\n            dataset=dataset, \n            batch_size=speakers_per_batch, \n            shuffle=False, \n            sampler=sampler, ",
        "detail": "encoder.data_objects.speaker_verification_dataset",
        "documentation": {}
    },
    {
        "label": "Utterance",
        "kind": 6,
        "importPath": "encoder.data_objects.utterance",
        "description": "encoder.data_objects.utterance",
        "peekOfCode": "class Utterance:\n    def __init__(self, frames_fpath, wave_fpath):\n        self.frames_fpath = frames_fpath\n        self.wave_fpath = wave_fpath\n    def get_frames(self):\n        return np.load(self.frames_fpath)\n    def random_partial(self, n_frames):\n        \"\"\"\n        Crops the frames into a partial utterance of n_frames\n        :param n_frames: The number of frames of the partial utterance",
        "detail": "encoder.data_objects.utterance",
        "documentation": {}
    },
    {
        "label": "preprocess_wav",
        "kind": 2,
        "importPath": "encoder.audio",
        "description": "encoder.audio",
        "peekOfCode": "def preprocess_wav(fpath_or_wav: Union[str, Path, np.ndarray],\n                   source_sr: Optional[int] = None):\n    \"\"\"\n    Applies the preprocessing operations used in training the Speaker Encoder to a waveform \n    either on disk or in memory. The waveform will be resampled to match the data hyperparameters.\n    :param fpath_or_wav: either a filepath to an audio file (many extensions are supported, not \n    just .wav), either the waveform as a numpy array of floats.\n    :param source_sr: if passing an audio waveform, the sampling rate of the waveform before \n    preprocessing. After preprocessing, the waveform's sampling rate will match the data \n    hyperparameters. If passing a filepath, the sampling rate will be automatically detected and ",
        "detail": "encoder.audio",
        "documentation": {}
    },
    {
        "label": "wav_to_mel_spectrogram",
        "kind": 2,
        "importPath": "encoder.audio",
        "description": "encoder.audio",
        "peekOfCode": "def wav_to_mel_spectrogram(wav):\n    \"\"\"\n    Derives a mel spectrogram ready to be used by the encoder from a preprocessed audio waveform.\n    Note: this not a log-mel spectrogram.\n    \"\"\"\n    frames = librosa.feature.melspectrogram(\n        wav,\n        sampling_rate,\n        n_fft=int(sampling_rate * mel_window_length / 1000),\n        hop_length=int(sampling_rate * mel_window_step / 1000),",
        "detail": "encoder.audio",
        "documentation": {}
    },
    {
        "label": "trim_long_silences",
        "kind": 2,
        "importPath": "encoder.audio",
        "description": "encoder.audio",
        "peekOfCode": "def trim_long_silences(wav):\n    \"\"\"\n    Ensures that segments without voice in the waveform remain no longer than a \n    threshold determined by the VAD parameters in params.py.\n    :param wav: the raw waveform as a numpy array of floats \n    :return: the same waveform with silences trimmed away (length <= original wav length)\n    \"\"\"\n    # Compute the voice detection window size\n    samples_per_window = (vad_window_length * sampling_rate) // 1000\n    # Trim the end of the audio to have a multiple of the window size",
        "detail": "encoder.audio",
        "documentation": {}
    },
    {
        "label": "normalize_volume",
        "kind": 2,
        "importPath": "encoder.audio",
        "description": "encoder.audio",
        "peekOfCode": "def normalize_volume(wav, target_dBFS, increase_only=False, decrease_only=False):\n    if increase_only and decrease_only:\n        raise ValueError(\"Both increase only and decrease only are set\")\n    dBFS_change = target_dBFS - 10 * np.log10(np.mean(wav ** 2))\n    if (dBFS_change < 0 and increase_only) or (dBFS_change > 0 and decrease_only):\n        return wav\n    return wav * (10 ** (dBFS_change / 20))",
        "detail": "encoder.audio",
        "documentation": {}
    },
    {
        "label": "int16_max",
        "kind": 5,
        "importPath": "encoder.audio",
        "description": "encoder.audio",
        "peekOfCode": "int16_max = (2 ** 15) - 1\ndef preprocess_wav(fpath_or_wav: Union[str, Path, np.ndarray],\n                   source_sr: Optional[int] = None):\n    \"\"\"\n    Applies the preprocessing operations used in training the Speaker Encoder to a waveform \n    either on disk or in memory. The waveform will be resampled to match the data hyperparameters.\n    :param fpath_or_wav: either a filepath to an audio file (many extensions are supported, not \n    just .wav), either the waveform as a numpy array of floats.\n    :param source_sr: if passing an audio waveform, the sampling rate of the waveform before \n    preprocessing. After preprocessing, the waveform's sampling rate will match the data ",
        "detail": "encoder.audio",
        "documentation": {}
    },
    {
        "label": "librispeech_datasets",
        "kind": 5,
        "importPath": "encoder.config",
        "description": "encoder.config",
        "peekOfCode": "librispeech_datasets = {\n    \"train\": {\n        \"clean\": [\"LibriSpeech/train-clean-100\", \"LibriSpeech/train-clean-360\"],\n        \"other\": [\"LibriSpeech/train-other-500\"]\n    },\n    \"test\": {\n        \"clean\": [\"LibriSpeech/test-clean\"],\n        \"other\": [\"LibriSpeech/test-other\"]\n    },\n    \"dev\": {",
        "detail": "encoder.config",
        "documentation": {}
    },
    {
        "label": "libritts_datasets",
        "kind": 5,
        "importPath": "encoder.config",
        "description": "encoder.config",
        "peekOfCode": "libritts_datasets = {\n    \"train\": {\n        \"clean\": [\"LibriTTS/train-clean-100\", \"LibriTTS/train-clean-360\"],\n        \"other\": [\"LibriTTS/train-other-500\"]\n    },\n    \"test\": {\n        \"clean\": [\"LibriTTS/test-clean\"],\n        \"other\": [\"LibriTTS/test-other\"]\n    },\n    \"dev\": {",
        "detail": "encoder.config",
        "documentation": {}
    },
    {
        "label": "voxceleb_datasets",
        "kind": 5,
        "importPath": "encoder.config",
        "description": "encoder.config",
        "peekOfCode": "voxceleb_datasets = {\n    \"voxceleb1\" : {\n        \"train\": [\"VoxCeleb1/wav\"],\n        \"test\": [\"VoxCeleb1/test_wav\"]\n    },\n    \"voxceleb2\" : {\n        \"train\": [\"VoxCeleb2/dev/aac\"],\n        \"test\": [\"VoxCeleb2/test_wav\"]\n    }\n}",
        "detail": "encoder.config",
        "documentation": {}
    },
    {
        "label": "other_datasets",
        "kind": 5,
        "importPath": "encoder.config",
        "description": "encoder.config",
        "peekOfCode": "other_datasets = [\n    \"LJSpeech-1.1\",\n    \"VCTK-Corpus/wav48\",\n]\nanglophone_nationalites = [\"australia\", \"canada\", \"ireland\", \"uk\", \"usa\"]",
        "detail": "encoder.config",
        "documentation": {}
    },
    {
        "label": "anglophone_nationalites",
        "kind": 5,
        "importPath": "encoder.config",
        "description": "encoder.config",
        "peekOfCode": "anglophone_nationalites = [\"australia\", \"canada\", \"ireland\", \"uk\", \"usa\"]",
        "detail": "encoder.config",
        "documentation": {}
    },
    {
        "label": "load_model",
        "kind": 2,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "def load_model(weights_fpath: Path, device=None):\n    \"\"\"\n    Loads the model in memory. If this function is not explicitely called, it will be run on the \n    first call to embed_frames() with the default weights file.\n    :param weights_fpath: the path to saved model weights.\n    :param device: either a torch device or the name of a torch device (e.g. \"cpu\", \"cuda\"). The \n    model will be loaded and will run on this device. Outputs will however always be on the cpu. \n    If None, will default to your GPU if it\"s available, otherwise your CPU.\n    \"\"\"\n    # TODO: I think the slow loading of the encoder might have something to do with the device it",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "is_loaded",
        "kind": 2,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "def is_loaded():\n    return _model is not None\ndef embed_frames_batch(frames_batch):\n    \"\"\"\n    Computes embeddings for a batch of mel spectrogram.\n    :param frames_batch: a batch mel of spectrogram as a numpy array of float32 of shape \n    (batch_size, n_frames, n_channels)\n    :return: the embeddings as a numpy array of float32 of shape (batch_size, model_embedding_size)\n    \"\"\"\n    if _model is None:",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "embed_frames_batch",
        "kind": 2,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "def embed_frames_batch(frames_batch):\n    \"\"\"\n    Computes embeddings for a batch of mel spectrogram.\n    :param frames_batch: a batch mel of spectrogram as a numpy array of float32 of shape \n    (batch_size, n_frames, n_channels)\n    :return: the embeddings as a numpy array of float32 of shape (batch_size, model_embedding_size)\n    \"\"\"\n    if _model is None:\n        raise Exception(\"Model was not loaded. Call load_model() before inference.\")\n    frames = torch.from_numpy(frames_batch).to(_device)",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "compute_partial_slices",
        "kind": 2,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "def compute_partial_slices(n_samples, partial_utterance_n_frames=partials_n_frames,\n                           min_pad_coverage=0.75, overlap=0.5):\n    \"\"\"\n    Computes where to split an utterance waveform and its corresponding mel spectrogram to obtain \n    partial utterances of <partial_utterance_n_frames> each. Both the waveform and the mel \n    spectrogram slices are returned, so as to make each partial utterance waveform correspond to \n    its spectrogram. This function assumes that the mel spectrogram parameters used are those \n    defined in params_data.py.\n    The returned ranges may be indexing further than the length of the waveform. It is \n    recommended that you pad the waveform with zeros up to wave_slices[-1].stop.",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "embed_utterance",
        "kind": 2,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "def embed_utterance(wav, using_partials=True, return_partials=False, **kwargs):\n    \"\"\"\n    Computes an embedding for a single utterance.\n    # TODO: handle multiple wavs to benefit from batching on GPU\n    :param wav: a preprocessed (see audio.py) utterance waveform as a numpy array of float32\n    :param using_partials: if True, then the utterance is split in partial utterances of \n    <partial_utterance_n_frames> frames and the utterance embedding is computed from their \n    normalized average. If False, the utterance is instead computed from feeding the entire \n    spectogram to the network.\n    :param return_partials: if True, the partial embeddings will also be returned along with the ",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "embed_speaker",
        "kind": 2,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "def embed_speaker(wavs, **kwargs):\n    raise NotImplemented()\ndef plot_embedding_as_heatmap(embed, ax=None, title=\"\", shape=None, color_range=(0, 0.30)):\n    if ax is None:\n        ax = plt.gca()\n    if shape is None:\n        height = int(np.sqrt(len(embed)))\n        shape = (height, -1)\n    embed = embed.reshape(shape)\n    cmap = cm.get_cmap()",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "plot_embedding_as_heatmap",
        "kind": 2,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "def plot_embedding_as_heatmap(embed, ax=None, title=\"\", shape=None, color_range=(0, 0.30)):\n    if ax is None:\n        ax = plt.gca()\n    if shape is None:\n        height = int(np.sqrt(len(embed)))\n        shape = (height, -1)\n    embed = embed.reshape(shape)\n    cmap = cm.get_cmap()\n    mappable = ax.imshow(embed, cmap=cmap)\n    cbar = plt.colorbar(mappable, ax=ax, fraction=0.046, pad=0.04)",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "_model",
        "kind": 5,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "_model = None # type: SpeakerEncoder\n_device = None # type: torch.device\ndef load_model(weights_fpath: Path, device=None):\n    \"\"\"\n    Loads the model in memory. If this function is not explicitely called, it will be run on the \n    first call to embed_frames() with the default weights file.\n    :param weights_fpath: the path to saved model weights.\n    :param device: either a torch device or the name of a torch device (e.g. \"cpu\", \"cuda\"). The \n    model will be loaded and will run on this device. Outputs will however always be on the cpu. \n    If None, will default to your GPU if it\"s available, otherwise your CPU.",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "_device",
        "kind": 5,
        "importPath": "encoder.inference",
        "description": "encoder.inference",
        "peekOfCode": "_device = None # type: torch.device\ndef load_model(weights_fpath: Path, device=None):\n    \"\"\"\n    Loads the model in memory. If this function is not explicitely called, it will be run on the \n    first call to embed_frames() with the default weights file.\n    :param weights_fpath: the path to saved model weights.\n    :param device: either a torch device or the name of a torch device (e.g. \"cpu\", \"cuda\"). The \n    model will be loaded and will run on this device. Outputs will however always be on the cpu. \n    If None, will default to your GPU if it\"s available, otherwise your CPU.\n    \"\"\"",
        "detail": "encoder.inference",
        "documentation": {}
    },
    {
        "label": "SpeakerEncoder",
        "kind": 6,
        "importPath": "encoder.model",
        "description": "encoder.model",
        "peekOfCode": "class SpeakerEncoder(nn.Module):\n    def __init__(self, device, loss_device):\n        super().__init__()\n        self.loss_device = loss_device\n        # Network defition\n        self.lstm = nn.LSTM(input_size=mel_n_channels,\n                            hidden_size=model_hidden_size, \n                            num_layers=model_num_layers, \n                            batch_first=True).to(device)\n        self.linear = nn.Linear(in_features=model_hidden_size, ",
        "detail": "encoder.model",
        "documentation": {}
    },
    {
        "label": "mel_window_length",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "mel_window_length = 25  # In milliseconds\nmel_window_step = 10    # In milliseconds\nmel_n_channels = 40\n## Audio\nsampling_rate = 16000\n# Number of spectrogram frames in a partial utterance\npartials_n_frames = 160     # 1600 ms\n# Number of spectrogram frames at inference\ninference_n_frames = 80     #  800 ms\n## Voice Activation Detection",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "mel_window_step",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "mel_window_step = 10    # In milliseconds\nmel_n_channels = 40\n## Audio\nsampling_rate = 16000\n# Number of spectrogram frames in a partial utterance\npartials_n_frames = 160     # 1600 ms\n# Number of spectrogram frames at inference\ninference_n_frames = 80     #  800 ms\n## Voice Activation Detection\n# Window size of the VAD. Must be either 10, 20 or 30 milliseconds.",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "mel_n_channels",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "mel_n_channels = 40\n## Audio\nsampling_rate = 16000\n# Number of spectrogram frames in a partial utterance\npartials_n_frames = 160     # 1600 ms\n# Number of spectrogram frames at inference\ninference_n_frames = 80     #  800 ms\n## Voice Activation Detection\n# Window size of the VAD. Must be either 10, 20 or 30 milliseconds.\n# This sets the granularity of the VAD. Should not need to be changed.",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "sampling_rate",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "sampling_rate = 16000\n# Number of spectrogram frames in a partial utterance\npartials_n_frames = 160     # 1600 ms\n# Number of spectrogram frames at inference\ninference_n_frames = 80     #  800 ms\n## Voice Activation Detection\n# Window size of the VAD. Must be either 10, 20 or 30 milliseconds.\n# This sets the granularity of the VAD. Should not need to be changed.\nvad_window_length = 30  # In milliseconds\n# Number of frames to average together when performing the moving average smoothing.",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "partials_n_frames",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "partials_n_frames = 160     # 1600 ms\n# Number of spectrogram frames at inference\ninference_n_frames = 80     #  800 ms\n## Voice Activation Detection\n# Window size of the VAD. Must be either 10, 20 or 30 milliseconds.\n# This sets the granularity of the VAD. Should not need to be changed.\nvad_window_length = 30  # In milliseconds\n# Number of frames to average together when performing the moving average smoothing.\n# The larger this value, the larger the VAD variations must be to not get smoothed out. \nvad_moving_average_width = 8",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "inference_n_frames",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "inference_n_frames = 80     #  800 ms\n## Voice Activation Detection\n# Window size of the VAD. Must be either 10, 20 or 30 milliseconds.\n# This sets the granularity of the VAD. Should not need to be changed.\nvad_window_length = 30  # In milliseconds\n# Number of frames to average together when performing the moving average smoothing.\n# The larger this value, the larger the VAD variations must be to not get smoothed out. \nvad_moving_average_width = 8\n# Maximum number of consecutive silent frames a segment can have.\nvad_max_silence_length = 6",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "vad_window_length",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "vad_window_length = 30  # In milliseconds\n# Number of frames to average together when performing the moving average smoothing.\n# The larger this value, the larger the VAD variations must be to not get smoothed out. \nvad_moving_average_width = 8\n# Maximum number of consecutive silent frames a segment can have.\nvad_max_silence_length = 6\n## Audio volume normalization\naudio_norm_target_dBFS = -30",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "vad_moving_average_width",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "vad_moving_average_width = 8\n# Maximum number of consecutive silent frames a segment can have.\nvad_max_silence_length = 6\n## Audio volume normalization\naudio_norm_target_dBFS = -30",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "vad_max_silence_length",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "vad_max_silence_length = 6\n## Audio volume normalization\naudio_norm_target_dBFS = -30",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "audio_norm_target_dBFS",
        "kind": 5,
        "importPath": "encoder.params_data",
        "description": "encoder.params_data",
        "peekOfCode": "audio_norm_target_dBFS = -30",
        "detail": "encoder.params_data",
        "documentation": {}
    },
    {
        "label": "model_hidden_size",
        "kind": 5,
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "peekOfCode": "model_hidden_size = 256\nmodel_embedding_size = 256\nmodel_num_layers = 3\n## Training parameters\nlearning_rate_init = 1e-4\nspeakers_per_batch = 64\nutterances_per_speaker = 10",
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "model_embedding_size",
        "kind": 5,
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "peekOfCode": "model_embedding_size = 256\nmodel_num_layers = 3\n## Training parameters\nlearning_rate_init = 1e-4\nspeakers_per_batch = 64\nutterances_per_speaker = 10",
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "model_num_layers",
        "kind": 5,
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "peekOfCode": "model_num_layers = 3\n## Training parameters\nlearning_rate_init = 1e-4\nspeakers_per_batch = 64\nutterances_per_speaker = 10",
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "learning_rate_init",
        "kind": 5,
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "peekOfCode": "learning_rate_init = 1e-4\nspeakers_per_batch = 64\nutterances_per_speaker = 10",
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "speakers_per_batch",
        "kind": 5,
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "peekOfCode": "speakers_per_batch = 64\nutterances_per_speaker = 10",
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "utterances_per_speaker",
        "kind": 5,
        "importPath": "encoder.params_model",
        "description": "encoder.params_model",
        "peekOfCode": "utterances_per_speaker = 10",
        "detail": "encoder.params_model",
        "documentation": {}
    },
    {
        "label": "DatasetLog",
        "kind": 6,
        "importPath": "encoder.preprocess",
        "description": "encoder.preprocess",
        "peekOfCode": "class DatasetLog:\n    \"\"\"\n    Registers metadata about the dataset in a text file.\n    \"\"\"\n    def __init__(self, root, name):\n        self.text_file = open(Path(root, \"Log_%s.txt\" % name.replace(\"/\", \"_\")), \"w\")\n        self.sample_data = dict()\n        start_time = str(datetime.now().strftime(\"%A %d %B %Y at %H:%M\"))\n        self.write_line(\"Creating dataset %s on %s\" % (name, start_time))\n        self.write_line(\"-----\")",
        "detail": "encoder.preprocess",
        "documentation": {}
    },
    {
        "label": "preprocess_librispeech",
        "kind": 2,
        "importPath": "encoder.preprocess",
        "description": "encoder.preprocess",
        "peekOfCode": "def preprocess_librispeech(datasets_root: Path, out_dir: Path, skip_existing=False):\n    for dataset_name in librispeech_datasets[\"train\"][\"other\"]:\n        # Initialize the preprocessing\n        dataset_root, logger = _init_preprocess_dataset(dataset_name, datasets_root, out_dir)\n        if not dataset_root:\n            return \n        # Preprocess all speakers\n        speaker_dirs = list(dataset_root.glob(\"*\"))\n        _preprocess_speaker_dirs(speaker_dirs, dataset_name, datasets_root, out_dir, \"flac\",\n                                 skip_existing, logger)",
        "detail": "encoder.preprocess",
        "documentation": {}
    },
    {
        "label": "preprocess_voxceleb1",
        "kind": 2,
        "importPath": "encoder.preprocess",
        "description": "encoder.preprocess",
        "peekOfCode": "def preprocess_voxceleb1(datasets_root: Path, out_dir: Path, skip_existing=False):\n    # Initialize the preprocessing\n    dataset_name = \"VoxCeleb1\"\n    dataset_root, logger = _init_preprocess_dataset(dataset_name, datasets_root, out_dir)\n    if not dataset_root:\n        return\n    # Get the contents of the meta file\n    with dataset_root.joinpath(\"vox1_meta.csv\").open(\"r\") as metafile:\n        metadata = [line.split(\"\\t\") for line in metafile][1:]\n    # Select the ID and the nationality, filter out non-anglophone speakers",
        "detail": "encoder.preprocess",
        "documentation": {}
    },
    {
        "label": "preprocess_voxceleb2",
        "kind": 2,
        "importPath": "encoder.preprocess",
        "description": "encoder.preprocess",
        "peekOfCode": "def preprocess_voxceleb2(datasets_root: Path, out_dir: Path, skip_existing=False):\n    # Initialize the preprocessing\n    dataset_name = \"VoxCeleb2\"\n    dataset_root, logger = _init_preprocess_dataset(dataset_name, datasets_root, out_dir)\n    if not dataset_root:\n        return\n    # Get the speaker directories\n    # Preprocess all speakers\n    speaker_dirs = list(dataset_root.joinpath(\"dev\", \"aac\").glob(\"*\"))\n    _preprocess_speaker_dirs(speaker_dirs, dataset_name, datasets_root, out_dir, \"m4a\",",
        "detail": "encoder.preprocess",
        "documentation": {}
    },
    {
        "label": "sync",
        "kind": 2,
        "importPath": "encoder.train",
        "description": "encoder.train",
        "peekOfCode": "def sync(device: torch.device):\n    # For correct profiling (cuda operations are async)\n    if device.type == \"cuda\":\n        torch.cuda.synchronize(device)\n    else:\n        torch.cpu.synchronize(device)\ndef train(run_id: str, clean_data_root: Path, models_dir: Path, umap_every: int, save_every: int,\n          backup_every: int, vis_every: int, force_restart: bool, visdom_server: str,\n          no_visdom: bool):\n    # Create a dataset and a dataloader",
        "detail": "encoder.train",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "encoder.train",
        "description": "encoder.train",
        "peekOfCode": "def train(run_id: str, clean_data_root: Path, models_dir: Path, umap_every: int, save_every: int,\n          backup_every: int, vis_every: int, force_restart: bool, visdom_server: str,\n          no_visdom: bool):\n    # Create a dataset and a dataloader\n    dataset = SpeakerVerificationDataset(clean_data_root)\n    loader = SpeakerVerificationDataLoader(\n        dataset,\n        speakers_per_batch,\n        utterances_per_speaker,\n        num_workers=8,",
        "detail": "encoder.train",
        "documentation": {}
    },
    {
        "label": "Visualizations",
        "kind": 6,
        "importPath": "encoder.visualizations",
        "description": "encoder.visualizations",
        "peekOfCode": "class Visualizations:\n    def __init__(self, env_name=None, update_every=10, server=\"http://localhost\", disabled=False):\n        # Tracking data\n        self.last_update_timestamp = timer()\n        self.update_every = update_every\n        self.step_times = []\n        self.losses = []\n        self.eers = []\n        print(\"Updating the visualizations every %d steps.\" % update_every)\n        # If visdom is disabled TODO: use a better paradigm for that",
        "detail": "encoder.visualizations",
        "documentation": {}
    },
    {
        "label": "colormap",
        "kind": 5,
        "importPath": "encoder.visualizations",
        "description": "encoder.visualizations",
        "peekOfCode": "colormap = np.array([\n    [76, 255, 0],\n    [0, 127, 70],\n    [255, 0, 0],\n    [255, 217, 38],\n    [0, 135, 255],\n    [165, 0, 165],\n    [255, 167, 255],\n    [0, 255, 255],\n    [255, 96, 38],",
        "detail": "encoder.visualizations",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": "env.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\"}\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "create_community_node_colors",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])\n    colors = [\"#D4FCB1\", \"#CDC5FC\", \"#FFC2C4\", \"#F2D140\", \"#BCC6C8\"][:number_of_colors]\n    node_colors = []\n    for node in graph:\n        current_community_index = 0\n        for community in communities:\n            if node in community:\n                node_colors.append(colors[current_community_index])\n                break",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "visualize_communities",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def visualize_communities(graph, communities, i):\n    node_colors = create_community_node_colors(graph, communities)\n    modularity = round(nx.community.modularity(graph, communities), 6)\n    title = f\"Community Visualization of {len(communities)} communities with modularity of {modularity}\"\n    pos = nx.spring_layout(graph, k=0.3, iterations=50, seed=2)\n    plt.subplot(3, 1, i)\n    plt.title(title)\n    nx.draw(\n        graph,\n        pos=pos,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "G = nx.karate_club_graph()\ncommunities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "communities",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "communities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "modularity_df",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "modularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list\ndef create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k**p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "G = nx.Graph(\n    [\n        (1, 2),\n        (7, 2),\n        (3, 9),\n        (3, 2),\n        (7, 6),\n        (5, 2),\n        (1, 5),\n        (2, 8),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "I = approx.maximum_independent_set(G)\nprint(f\"Maximum independent set of G: {I}\")\npos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "pos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), G.order() // node_divisor))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": {\"color\": \"Red\"},\n    \"B\": {\"color\": \"Red\"},\n    \"C\": {\"color\": \"Red\"},\n    \"D\": {\"color\": \"Red\"},\n    \"E\": {\"color\": \"Blue\"},\n    \"F\": {\"color\": \"Blue\"},\n    \"G\": {\"color\": \"Blue\"},\n    \"H\": {\"color\": \"Blue\"},\n    \"I\": {\"color\": \"Yellow\"},",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "graph_partitioning",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "def graph_partitioning(G, plotting=True):\n    \"\"\"Partition a directed graph into a list of subgraphs that contain\n    only entirely supported or entirely unsupported nodes.\n    \"\"\"\n    # Categorize nodes by their node_type attribute\n    supported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"supported\"}\n    unsupported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"unsupported\"}\n    # Make a copy of the graph.\n    H = G.copy()\n    # Remove all edges connecting supported and unsupported nodes.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex = nx.DiGraph()\nG_ex.add_nodes_from([\"In\"], node_type=\"input\", node_color=\"b\")\nG_ex.add_nodes_from([\"A\", \"C\", \"E\", \"F\"], node_type=\"supported\", node_color=\"g\")\nG_ex.add_nodes_from([\"B\", \"D\"], node_type=\"unsupported\", node_color=\"r\")\nG_ex.add_nodes_from([\"Out\"], node_type=\"output\", node_color=\"m\")\nG_ex.add_edges_from(\n    [\n        (\"In\", \"A\"),\n        (\"A\", \"B\"),\n        (\"B\", \"C\"),",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################\n# Calculate the subgraphs with plotting all results of intemediate steps.",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex_r",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex_r = nx.DiGraph()\n# Composing all subgraphs.\nfor subgraph in subgraphs_of_G_ex:\n    G_ex_r = nx.compose(G_ex_r, subgraph)\n# Adding the previously stored edges.\nG_ex_r.add_edges_from(removed_edges.edges())\n###############################################################################\n# Check that the original graph and the reconstructed graphs are isomorphic.\n# --------------------------------------------------------------------------\n#",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex_r.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "G = nx.path_graph(20)  # An example graph\ncenter_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "center_node",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "center_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "edge_nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "edge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos[center_node]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for i, layer in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "G = nx.random_geometric_graph(20, radius=0.4, seed=3)\npos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos[0]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "H = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "cycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "edge_list",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "edge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,\n    edge_color=\"red\",",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor u, v, d in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "edge_labels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "edge_labels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(G, pos, edge_labels)\nax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "G = nx.DiGraph(\n    [\n        (\"f\", \"a\"),\n        (\"a\", \"b\"),\n        (\"a\", \"e\"),\n        (\"b\", \"c\"),\n        (\"b\", \"d\"),\n        (\"d\", \"e\"),\n        (\"f\", \"c\"),\n        (\"f\", \"g\"),",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nfig, ax = plt.subplots()\nnx.draw_networkx(G, pos=pos, ax=ax)\nax.set_title(\"DAG layout in topological order\")\nfig.tight_layout()\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "options = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "morse_encode",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "def morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol\n# Verify that the trie encoding is correct\nimport string\nfor letter in string.ascii_lowercase:\n    assert morse_encode(letter) == morse_direct_mapping[letter]",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dot = \"•\"\ndash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dash",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_direct_mapping",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,\n    \"h\": dot * 4,\n    \"i\": dot * 2,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_mapping_sorted",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_mapping_sorted = dict(\n    sorted(morse_direct_mapping.items(), key=lambda item: (len(item[1]), item[1]))\n)\n# More preprocessing: create the reverse mapping to simplify lookup\nreverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping[\"\"]",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "G = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:\n        G.nodes[n][\"layer\"] = i\npos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")\n# Flip the layout so the root node is on top\nfor k in pos:\n    pos[k][-1] *= -1\n# Visualize the trie\nnx.draw(G, pos=pos, with_labels=True)\nelabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "elabels",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "elabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node\ndef morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "G = nx.Graph()\nG.add_edges_from(\n    [\n        (0, 1, {\"weight\": 4}),\n        (0, 7, {\"weight\": 8}),\n        (1, 7, {\"weight\": 11}),\n        (1, 2, {\"weight\": 8}),\n        (2, 8, {\"weight\": 2}),\n        (2, 5, {\"weight\": 4}),\n        (2, 3, {\"weight\": 7}),",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "T = nx.minimum_spanning_tree(G)\n# Visualize the graph and the minimum spanning tree\npos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "pos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)\nplt.axis(\"off\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [G.pop[n] // 300 for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "triads",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "peekOfCode": "triads = {\n    \"003\": [],\n    \"012\": [(1, 2)],\n    \"102\": [(1, 2), (2, 1)],\n    \"021D\": [(3, 1), (3, 2)],\n    \"021U\": [(1, 3), (2, 3)],\n    \"021C\": [(1, 3), (3, 2)],\n    \"111D\": [(1, 2), (2, 1), (3, 1)],\n    \"111U\": [(1, 2), (2, 1), (1, 3)],\n    \"030T\": [(1, 2), (3, 2), (1, 3)],",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor source, target in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "options = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "env.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "myenv.Scripts.activate_this",
        "description": "myenv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\")\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k ** p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), int(G.order() / node_divisor)))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": dict(color=\"Red\"),\n    \"B\": dict(color=\"Red\"),\n    \"C\": dict(color=\"Red\"),\n    \"D\": dict(color=\"Red\"),\n    \"E\": dict(color=\"Blue\"),\n    \"F\": dict(color=\"Blue\"),\n    \"G\": dict(color=\"Blue\"),\n    \"H\": dict(color=\"Blue\"),\n    \"I\": dict(color=\"Yellow\"),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted([d for n, d in G.degree()], reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted([d for n, d in G.degree()], reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nplt.colorbar(pc)\nax = plt.gca()\nax.set_axis_off()\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for (i, layer) in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor (u, v, d) in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# labels",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_karate_club",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [int(G.pop[n] / 300.0) for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor (source, target) in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "options = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "myenv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "TacotronEncoderCell",
        "kind": 6,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "class TacotronEncoderCell(RNNCell):\n\t\"\"\"Tacotron 2 Encoder Cell\n\tPasses inputs through a stack of convolutional layers then through a bidirectional LSTM\n\tlayer to predict the hidden representation vector (or memory)\n\t\"\"\"\n\tdef __init__(self, convolutional_layers, lstm_layer):\n\t\t\"\"\"Initialize encoder parameters\n\t\tArgs:\n\t\t\tconvolutional_layers: Encoder convolutional block class\n\t\t\tlstm_layer: encoder bidirectional lstm layer class",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "TacotronDecoderCellState",
        "kind": 6,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "class TacotronDecoderCellState(\n\tcollections.namedtuple(\"TacotronDecoderCellState\",\n\t (\"cell_state\", \"attention\", \"time\", \"alignments\",\n\t  \"alignment_history\"))):\n\t\"\"\"`namedtuple` storing the state of a `TacotronDecoderCell`.\n\tContains:\n\t  - `cell_state`: The state of the wrapped `RNNCell` at the previous time\n\t\tstep.\n\t  - `attention`: The attention emitted at the previous time step.\n\t  - `time`: int32 scalar containing the current time step.",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "TacotronDecoderCell",
        "kind": 6,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "class TacotronDecoderCell(RNNCell):\n\t\"\"\"Tactron 2 Decoder Cell\n\tDecodes encoder output and previous mel frames into next r frames\n\tDecoder Step i:\n\t\t1) Prenet to compress last output information\n\t\t2) Concat compressed inputs with previous context vector (input feeding) *\n\t\t3) Decoder RNN (actual decoding) to predict current state s_{i} *\n\t\t4) Compute new context vector c_{i} based on s_{i} and a cumulative sum of previous alignments *\n\t\t5) Predict new output y_{i} using s_{i} and c_{i} (concatenated)\n\t\t6) Predict <stop_token> output ys_{i} using s_{i} and c_{i} (concatenated)",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "_zero_state_tensors",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "_zero_state_tensors = rnn_cell_impl._zero_state_tensors\nclass TacotronEncoderCell(RNNCell):\n\t\"\"\"Tacotron 2 Encoder Cell\n\tPasses inputs through a stack of convolutional layers then through a bidirectional LSTM\n\tlayer to predict the hidden representation vector (or memory)\n\t\"\"\"\n\tdef __init__(self, convolutional_layers, lstm_layer):\n\t\t\"\"\"Initialize encoder parameters\n\t\tArgs:\n\t\t\tconvolutional_layers: Encoder convolutional block class",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._convolutions",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._convolutions = convolutional_layers\n\t\tself._cell = lstm_layer\n\tdef __call__(self, inputs, input_lengths=None):\n\t\t#Pass input sequence through a stack of convolutional layers\n\t\tconv_output = self._convolutions(inputs)\n\t\t#Extract hidden representation from encoder lstm cells\n\t\thidden_representation = self._cell(conv_output, input_lengths)\n\t\t#For shape visualization\n\t\tself.conv_output_shape = conv_output.shape\n\t\treturn hidden_representation",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._cell",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._cell = lstm_layer\n\tdef __call__(self, inputs, input_lengths=None):\n\t\t#Pass input sequence through a stack of convolutional layers\n\t\tconv_output = self._convolutions(inputs)\n\t\t#Extract hidden representation from encoder lstm cells\n\t\thidden_representation = self._cell(conv_output, input_lengths)\n\t\t#For shape visualization\n\t\tself.conv_output_shape = conv_output.shape\n\t\treturn hidden_representation\nclass TacotronDecoderCellState(",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tconv_output",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tconv_output = self._convolutions(inputs)\n\t\t#Extract hidden representation from encoder lstm cells\n\t\thidden_representation = self._cell(conv_output, input_lengths)\n\t\t#For shape visualization\n\t\tself.conv_output_shape = conv_output.shape\n\t\treturn hidden_representation\nclass TacotronDecoderCellState(\n\tcollections.namedtuple(\"TacotronDecoderCellState\",\n\t (\"cell_state\", \"attention\", \"time\", \"alignments\",\n\t  \"alignment_history\"))):",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\thidden_representation",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\thidden_representation = self._cell(conv_output, input_lengths)\n\t\t#For shape visualization\n\t\tself.conv_output_shape = conv_output.shape\n\t\treturn hidden_representation\nclass TacotronDecoderCellState(\n\tcollections.namedtuple(\"TacotronDecoderCellState\",\n\t (\"cell_state\", \"attention\", \"time\", \"alignments\",\n\t  \"alignment_history\"))):\n\t\"\"\"`namedtuple` storing the state of a `TacotronDecoderCell`.\n\tContains:",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself.conv_output_shape",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself.conv_output_shape = conv_output.shape\n\t\treturn hidden_representation\nclass TacotronDecoderCellState(\n\tcollections.namedtuple(\"TacotronDecoderCellState\",\n\t (\"cell_state\", \"attention\", \"time\", \"alignments\",\n\t  \"alignment_history\"))):\n\t\"\"\"`namedtuple` storing the state of a `TacotronDecoderCell`.\n\tContains:\n\t  - `cell_state`: The state of the wrapped `RNNCell` at the previous time\n\t\tstep.",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._prenet",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._prenet = prenet\n\t\tself._attention_mechanism = attention_mechanism\n\t\tself._cell = rnn_cell\n\t\tself._frame_projection = frame_projection\n\t\tself._stop_projection = stop_projection\n\t\tself._attention_layer_size = self._attention_mechanism.values.get_shape()[-1].value\n\tdef _batch_size_checks(self, batch_size, error_message):\n\t\treturn [check_ops.assert_equal(batch_size,\n\t\t  self._attention_mechanism.batch_size,\n\t\t  message=error_message)]",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._attention_mechanism",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._attention_mechanism = attention_mechanism\n\t\tself._cell = rnn_cell\n\t\tself._frame_projection = frame_projection\n\t\tself._stop_projection = stop_projection\n\t\tself._attention_layer_size = self._attention_mechanism.values.get_shape()[-1].value\n\tdef _batch_size_checks(self, batch_size, error_message):\n\t\treturn [check_ops.assert_equal(batch_size,\n\t\t  self._attention_mechanism.batch_size,\n\t\t  message=error_message)]\n\t@property",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._cell",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._cell = rnn_cell\n\t\tself._frame_projection = frame_projection\n\t\tself._stop_projection = stop_projection\n\t\tself._attention_layer_size = self._attention_mechanism.values.get_shape()[-1].value\n\tdef _batch_size_checks(self, batch_size, error_message):\n\t\treturn [check_ops.assert_equal(batch_size,\n\t\t  self._attention_mechanism.batch_size,\n\t\t  message=error_message)]\n\t@property\n\tdef output_size(self):",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._frame_projection",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._frame_projection = frame_projection\n\t\tself._stop_projection = stop_projection\n\t\tself._attention_layer_size = self._attention_mechanism.values.get_shape()[-1].value\n\tdef _batch_size_checks(self, batch_size, error_message):\n\t\treturn [check_ops.assert_equal(batch_size,\n\t\t  self._attention_mechanism.batch_size,\n\t\t  message=error_message)]\n\t@property\n\tdef output_size(self):\n\t\treturn self._frame_projection.shape",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._stop_projection",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._stop_projection = stop_projection\n\t\tself._attention_layer_size = self._attention_mechanism.values.get_shape()[-1].value\n\tdef _batch_size_checks(self, batch_size, error_message):\n\t\treturn [check_ops.assert_equal(batch_size,\n\t\t  self._attention_mechanism.batch_size,\n\t\t  message=error_message)]\n\t@property\n\tdef output_size(self):\n\t\treturn self._frame_projection.shape\n\t@property",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tself._attention_layer_size",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tself._attention_layer_size = self._attention_mechanism.values.get_shape()[-1].value\n\tdef _batch_size_checks(self, batch_size, error_message):\n\t\treturn [check_ops.assert_equal(batch_size,\n\t\t  self._attention_mechanism.batch_size,\n\t\t  message=error_message)]\n\t@property\n\tdef output_size(self):\n\t\treturn self._frame_projection.shape\n\t@property\n\tdef state_size(self):",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\t\tcell_state",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\t\tcell_state = self._cell._cell.zero_state(batch_size, dtype)\n\t\t\terror_message = (\n\t\t\t\t\"When calling zero_state of TacotronDecoderCell %s: \" % self._base_name +\n\t\t\t\t\"Non-matching batch sizes between the memory \"\n\t\t\t\t\"(encoder output) and the requested batch size.\")\n\t\t\twith ops.control_dependencies(\n\t\t\t\tself._batch_size_checks(batch_size, error_message)):\n\t\t\t\tcell_state = nest.map_structure(\n\t\t\t\t\tlambda s: array_ops.identity(s, name=\"checked_cell_state\"),\n\t\t\t\t\tcell_state)",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\t\terror_message",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\t\terror_message = (\n\t\t\t\t\"When calling zero_state of TacotronDecoderCell %s: \" % self._base_name +\n\t\t\t\t\"Non-matching batch sizes between the memory \"\n\t\t\t\t\"(encoder output) and the requested batch size.\")\n\t\t\twith ops.control_dependencies(\n\t\t\t\tself._batch_size_checks(batch_size, error_message)):\n\t\t\t\tcell_state = nest.map_structure(\n\t\t\t\t\tlambda s: array_ops.identity(s, name=\"checked_cell_state\"),\n\t\t\t\t\tcell_state)\n\t\t\treturn TacotronDecoderCellState(",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcell_state",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\t\t\tcell_state = nest.map_structure(\n\t\t\t\t\tlambda s: array_ops.identity(s, name=\"checked_cell_state\"),\n\t\t\t\t\tcell_state)\n\t\t\treturn TacotronDecoderCellState(\n\t\t\t\tcell_state=cell_state,\n\t\t\t\ttime=array_ops.zeros([], dtype=tf.int32),\n\t\t\t\tattention=_zero_state_tensors(self._attention_layer_size, batch_size,\n\t\t\t\t  dtype),\n\t\t\t\talignments=self._attention_mechanism.initial_alignments(batch_size, dtype),\n\t\t\t\talignment_history=tensor_array_ops.TensorArray(dtype=dtype, size=0,",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tprenet_output",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tprenet_output = self._prenet(inputs)\n\t\t#Concat context vector and prenet output to form LSTM cells input (input feeding)\n\t\tLSTM_input = tf.concat([prenet_output, state.attention], axis=-1)\n\t\t#Unidirectional LSTM layers\n\t\tLSTM_output, next_cell_state = self._cell(LSTM_input, state.cell_state)\n\t\t#Compute the attention (context) vector and alignments using\n\t\t#the new decoder cell hidden state as query vector\n\t\t#and cumulative alignments to extract location features\n\t\t#The choice of the new cell hidden state (s_{i}) of the last\n\t\t#decoder RNN Cell is based on Luong et Al. (2015):",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tLSTM_input",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tLSTM_input = tf.concat([prenet_output, state.attention], axis=-1)\n\t\t#Unidirectional LSTM layers\n\t\tLSTM_output, next_cell_state = self._cell(LSTM_input, state.cell_state)\n\t\t#Compute the attention (context) vector and alignments using\n\t\t#the new decoder cell hidden state as query vector\n\t\t#and cumulative alignments to extract location features\n\t\t#The choice of the new cell hidden state (s_{i}) of the last\n\t\t#decoder RNN Cell is based on Luong et Al. (2015):\n\t\t#https://arxiv.org/pdf/1508.04025.pdf\n\t\tprevious_alignments = state.alignments",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tprevious_alignments",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tprevious_alignments = state.alignments\n\t\tprevious_alignment_history = state.alignment_history\n\t\tcontext_vector, alignments, cumulated_alignments = _compute_attention(self._attention_mechanism,\n\t\t\tLSTM_output,\n\t\t\tprevious_alignments,\n\t\t\tattention_layer=None)\n\t\t#Concat LSTM outputs and context vector to form projections inputs\n\t\tprojections_input = tf.concat([LSTM_output, context_vector], axis=-1)\n\t\t#Compute predicted frames and predicted <stop_token>\n\t\tcell_outputs = self._frame_projection(projections_input)",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tprevious_alignment_history",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tprevious_alignment_history = state.alignment_history\n\t\tcontext_vector, alignments, cumulated_alignments = _compute_attention(self._attention_mechanism,\n\t\t\tLSTM_output,\n\t\t\tprevious_alignments,\n\t\t\tattention_layer=None)\n\t\t#Concat LSTM outputs and context vector to form projections inputs\n\t\tprojections_input = tf.concat([LSTM_output, context_vector], axis=-1)\n\t\t#Compute predicted frames and predicted <stop_token>\n\t\tcell_outputs = self._frame_projection(projections_input)\n\t\tstop_tokens = self._stop_projection(projections_input)",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tprojections_input",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tprojections_input = tf.concat([LSTM_output, context_vector], axis=-1)\n\t\t#Compute predicted frames and predicted <stop_token>\n\t\tcell_outputs = self._frame_projection(projections_input)\n\t\tstop_tokens = self._stop_projection(projections_input)\n\t\t#Save alignment history\n\t\talignment_history = previous_alignment_history.write(state.time, alignments)\n\t\t#Prepare next decoder state\n\t\tnext_state = TacotronDecoderCellState(\n\t\t\ttime=state.time + 1,\n\t\t\tcell_state=next_cell_state,",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tcell_outputs",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tcell_outputs = self._frame_projection(projections_input)\n\t\tstop_tokens = self._stop_projection(projections_input)\n\t\t#Save alignment history\n\t\talignment_history = previous_alignment_history.write(state.time, alignments)\n\t\t#Prepare next decoder state\n\t\tnext_state = TacotronDecoderCellState(\n\t\t\ttime=state.time + 1,\n\t\t\tcell_state=next_cell_state,\n\t\t\tattention=context_vector,\n\t\t\talignments=cumulated_alignments,",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tstop_tokens",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tstop_tokens = self._stop_projection(projections_input)\n\t\t#Save alignment history\n\t\talignment_history = previous_alignment_history.write(state.time, alignments)\n\t\t#Prepare next decoder state\n\t\tnext_state = TacotronDecoderCellState(\n\t\t\ttime=state.time + 1,\n\t\t\tcell_state=next_cell_state,\n\t\t\tattention=context_vector,\n\t\t\talignments=cumulated_alignments,\n\t\t\talignment_history=alignment_history)",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\talignment_history",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\talignment_history = previous_alignment_history.write(state.time, alignments)\n\t\t#Prepare next decoder state\n\t\tnext_state = TacotronDecoderCellState(\n\t\t\ttime=state.time + 1,\n\t\t\tcell_state=next_cell_state,\n\t\t\tattention=context_vector,\n\t\t\talignments=cumulated_alignments,\n\t\t\talignment_history=alignment_history)\n\t\treturn (cell_outputs, stop_tokens), next_state",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "\t\tnext_state",
        "kind": 5,
        "importPath": "synthesizer.models.architecture_wrappers",
        "description": "synthesizer.models.architecture_wrappers",
        "peekOfCode": "\t\tnext_state = TacotronDecoderCellState(\n\t\t\ttime=state.time + 1,\n\t\t\tcell_state=next_cell_state,\n\t\t\tattention=context_vector,\n\t\t\talignments=cumulated_alignments,\n\t\t\talignment_history=alignment_history)\n\t\treturn (cell_outputs, stop_tokens), next_state",
        "detail": "synthesizer.models.architecture_wrappers",
        "documentation": {}
    },
    {
        "label": "LocationSensitiveAttention",
        "kind": 6,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "class LocationSensitiveAttention(BahdanauAttention):\n\t\"\"\"Impelements Bahdanau-style (cumulative) scoring function.\n\tUsually referred to as \"hybrid\" attention (content-based + location-based)\n\tExtends the additive attention described in:\n\t\"D. Bahdanau, K. Cho, and Y. Bengio, “Neural machine transla-\n  tion by jointly learning to align and translate,” in Proceedings\n  of ICLR, 2015.\"\n\tto use previous alignments as additional location features.\n\tThis attention is described in:\n\tJ. K. Chorowski, D. Bahdanau, D. Serdyuk, K. Cho, and Y. Ben-",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\texpanded_alignments",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\texpanded_alignments = array_ops.expand_dims(alignments, 1)\n\t# Context is the inner product of alignments and values along the\n\t# memory time dimension.\n\t# alignments shape is\n\t#   [batch_size, 1, memory_time]\n\t# attention_mechanism.values shape is\n\t#   [batch_size, memory_time, memory_size]\n\t# the batched matmul is over memory_time, so the output shape is\n\t#   [batch_size, 1, memory_size].\n\t# we then squeeze out the singleton dim.",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\tcontext",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\tcontext = math_ops.matmul(expanded_alignments, attention_mechanism.values)\n\tcontext = array_ops.squeeze(context, [1])\n\tif attention_layer is not None:\n\t\tattention = attention_layer(array_ops.concat([cell_output, context], 1))\n\telse:\n\t\tattention = context\n\treturn attention, alignments, next_attention_state\ndef _location_sensitive_score(W_query, W_fil, W_keys):\n\t\"\"\"Impelements Bahdanau-style (cumulative) scoring function.\n\tThis attention is described in:",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\tcontext",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\tcontext = array_ops.squeeze(context, [1])\n\tif attention_layer is not None:\n\t\tattention = attention_layer(array_ops.concat([cell_output, context], 1))\n\telse:\n\t\tattention = context\n\treturn attention, alignments, next_attention_state\ndef _location_sensitive_score(W_query, W_fil, W_keys):\n\t\"\"\"Impelements Bahdanau-style (cumulative) scoring function.\n\tThis attention is described in:\n\t\tJ. K. Chorowski, D. Bahdanau, D. Serdyuk, K. Cho, and Y. Ben-",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tattention",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tattention = attention_layer(array_ops.concat([cell_output, context], 1))\n\telse:\n\t\tattention = context\n\treturn attention, alignments, next_attention_state\ndef _location_sensitive_score(W_query, W_fil, W_keys):\n\t\"\"\"Impelements Bahdanau-style (cumulative) scoring function.\n\tThis attention is described in:\n\t\tJ. K. Chorowski, D. Bahdanau, D. Serdyuk, K. Cho, and Y. Ben-\n\t  gio, “Attention-based models for speech recognition,” in Ad-\n\t  vances in Neural Information Processing Systems, 2015, pp.",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tattention",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tattention = context\n\treturn attention, alignments, next_attention_state\ndef _location_sensitive_score(W_query, W_fil, W_keys):\n\t\"\"\"Impelements Bahdanau-style (cumulative) scoring function.\n\tThis attention is described in:\n\t\tJ. K. Chorowski, D. Bahdanau, D. Serdyuk, K. Cho, and Y. Ben-\n\t  gio, “Attention-based models for speech recognition,” in Ad-\n\t  vances in Neural Information Processing Systems, 2015, pp.\n\t  577–585.\n\t#############################################################################",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\tdtype",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\tdtype = W_query.dtype\n\tnum_units = W_keys.shape[-1].value or array_ops.shape(W_keys)[-1]\n\tv_a = tf.compat.v1.get_variable(\n\t\t\"attention_variable_projection\", shape=[num_units], dtype=dtype,\n\t\tinitializer=tf.contrib.layers.xavier_initializer())\n\tb_a = tf.compat.v1.get_variable(\n\t\t\"attention_bias\", shape=[num_units], dtype=dtype,\n\t\tinitializer=tf.zeros_initializer())\n\treturn tf.reduce_sum(v_a * tf.tanh(W_keys + W_query + W_fil + b_a), [2])\ndef _smoothing_normalization(e):",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\tnum_units",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\tnum_units = W_keys.shape[-1].value or array_ops.shape(W_keys)[-1]\n\tv_a = tf.compat.v1.get_variable(\n\t\t\"attention_variable_projection\", shape=[num_units], dtype=dtype,\n\t\tinitializer=tf.contrib.layers.xavier_initializer())\n\tb_a = tf.compat.v1.get_variable(\n\t\t\"attention_bias\", shape=[num_units], dtype=dtype,\n\t\tinitializer=tf.zeros_initializer())\n\treturn tf.reduce_sum(v_a * tf.tanh(W_keys + W_query + W_fil + b_a), [2])\ndef _smoothing_normalization(e):\n\t\"\"\"Applies a smoothing normalization function instead of softmax",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\tv_a",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\tv_a = tf.compat.v1.get_variable(\n\t\t\"attention_variable_projection\", shape=[num_units], dtype=dtype,\n\t\tinitializer=tf.contrib.layers.xavier_initializer())\n\tb_a = tf.compat.v1.get_variable(\n\t\t\"attention_bias\", shape=[num_units], dtype=dtype,\n\t\tinitializer=tf.zeros_initializer())\n\treturn tf.reduce_sum(v_a * tf.tanh(W_keys + W_query + W_fil + b_a), [2])\ndef _smoothing_normalization(e):\n\t\"\"\"Applies a smoothing normalization function instead of softmax\n\tIntroduced in:",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\tb_a",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\tb_a = tf.compat.v1.get_variable(\n\t\t\"attention_bias\", shape=[num_units], dtype=dtype,\n\t\tinitializer=tf.zeros_initializer())\n\treturn tf.reduce_sum(v_a * tf.tanh(W_keys + W_query + W_fil + b_a), [2])\ndef _smoothing_normalization(e):\n\t\"\"\"Applies a smoothing normalization function instead of softmax\n\tIntroduced in:\n\t\tJ. K. Chorowski, D. Bahdanau, D. Serdyuk, K. Cho, and Y. Ben-\n\t  gio, “Attention-based models for speech recognition,” in Ad-\n\t  vances in Neural Information Processing Systems, 2015, pp.",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tnormalization_function",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tnormalization_function = _smoothing_normalization if (smoothing == True) else None\n\t\tmemory_length = memory_sequence_length if (mask_encoder==True) else None\n\t\tsuper(LocationSensitiveAttention, self).__init__(\n\t\t\t\tnum_units=num_units,\n\t\t\t\tmemory=memory,\n\t\t\t\tmemory_sequence_length=memory_length,\n\t\t\t\tprobability_fn=normalization_function,\n\t\t\t\tname=name)\n\t\tself.location_convolution = tf.compat.v1.layers.Conv1D(filters=hparams.attention_filters,\n\t\t\tkernel_size=hparams.attention_kernel, padding=\"same\", use_bias=True,",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tmemory_length",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tmemory_length = memory_sequence_length if (mask_encoder==True) else None\n\t\tsuper(LocationSensitiveAttention, self).__init__(\n\t\t\t\tnum_units=num_units,\n\t\t\t\tmemory=memory,\n\t\t\t\tmemory_sequence_length=memory_length,\n\t\t\t\tprobability_fn=normalization_function,\n\t\t\t\tname=name)\n\t\tself.location_convolution = tf.compat.v1.layers.Conv1D(filters=hparams.attention_filters,\n\t\t\tkernel_size=hparams.attention_kernel, padding=\"same\", use_bias=True,\n\t\t\tbias_initializer=tf.zeros_initializer(), name=\"location_features_convolution\")",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tself.location_convolution",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tself.location_convolution = tf.compat.v1.layers.Conv1D(filters=hparams.attention_filters,\n\t\t\tkernel_size=hparams.attention_kernel, padding=\"same\", use_bias=True,\n\t\t\tbias_initializer=tf.zeros_initializer(), name=\"location_features_convolution\")\n\t\tself.location_layer = tf.compat.v1.layers.Dense(units=num_units, use_bias=False,\n\t\t\tdtype=tf.float32, name=\"location_features_layer\")\n\t\tself._cumulate = cumulate_weights\n\tdef __call__(self, query, state):\n\t\t\"\"\"Score the query based on the keys and values.\n\t\tArgs:\n\t\t\tquery: Tensor of dtype matching `self.values` and shape",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tself.location_layer",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tself.location_layer = tf.compat.v1.layers.Dense(units=num_units, use_bias=False,\n\t\t\tdtype=tf.float32, name=\"location_features_layer\")\n\t\tself._cumulate = cumulate_weights\n\tdef __call__(self, query, state):\n\t\t\"\"\"Score the query based on the keys and values.\n\t\tArgs:\n\t\t\tquery: Tensor of dtype matching `self.values` and shape\n\t\t\t\t`[batch_size, query_depth]`.\n\t\t\tstate (previous alignments): Tensor of dtype matching `self.values` and shape\n\t\t\t\t`[batch_size, alignments_size]`",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tself._cumulate",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tself._cumulate = cumulate_weights\n\tdef __call__(self, query, state):\n\t\t\"\"\"Score the query based on the keys and values.\n\t\tArgs:\n\t\t\tquery: Tensor of dtype matching `self.values` and shape\n\t\t\t\t`[batch_size, query_depth]`.\n\t\t\tstate (previous alignments): Tensor of dtype matching `self.values` and shape\n\t\t\t\t`[batch_size, alignments_size]`\n\t\t\t\t(`alignments_size` is memory\"s `max_time`).\n\t\tReturns:",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\tprevious_alignments",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\tprevious_alignments = state\n\t\twith variable_scope.variable_scope(None, \"Location_Sensitive_Attention\", [query]):\n\t\t\t# processed_query shape [batch_size, query_depth] -> [batch_size, attention_dim]\n\t\t\tprocessed_query = self.query_layer(query) if self.query_layer else query\n\t\t\t# -> [batch_size, 1, attention_dim]\n\t\t\tprocessed_query = tf.expand_dims(processed_query, 1)\n\t\t\t# processed_location_features shape [batch_size, max_time, attention dimension]\n\t\t\t# [batch_size, max_time] -> [batch_size, max_time, 1]\n\t\t\texpanded_alignments = tf.expand_dims(previous_alignments, axis=2)\n\t\t\t# location features [batch_size, max_time, filters]",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\tprocessed_query",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\tprocessed_query = self.query_layer(query) if self.query_layer else query\n\t\t\t# -> [batch_size, 1, attention_dim]\n\t\t\tprocessed_query = tf.expand_dims(processed_query, 1)\n\t\t\t# processed_location_features shape [batch_size, max_time, attention dimension]\n\t\t\t# [batch_size, max_time] -> [batch_size, max_time, 1]\n\t\t\texpanded_alignments = tf.expand_dims(previous_alignments, axis=2)\n\t\t\t# location features [batch_size, max_time, filters]\n\t\t\tf = self.location_convolution(expanded_alignments)\n\t\t\t# Projected location features [batch_size, max_time, attention_dim]\n\t\t\tprocessed_location_features = self.location_layer(f)",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\tprocessed_query",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\tprocessed_query = tf.expand_dims(processed_query, 1)\n\t\t\t# processed_location_features shape [batch_size, max_time, attention dimension]\n\t\t\t# [batch_size, max_time] -> [batch_size, max_time, 1]\n\t\t\texpanded_alignments = tf.expand_dims(previous_alignments, axis=2)\n\t\t\t# location features [batch_size, max_time, filters]\n\t\t\tf = self.location_convolution(expanded_alignments)\n\t\t\t# Projected location features [batch_size, max_time, attention_dim]\n\t\t\tprocessed_location_features = self.location_layer(f)\n\t\t\t# energy shape [batch_size, max_time]\n\t\t\tenergy = _location_sensitive_score(processed_query, processed_location_features, self.keys)",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\texpanded_alignments",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\texpanded_alignments = tf.expand_dims(previous_alignments, axis=2)\n\t\t\t# location features [batch_size, max_time, filters]\n\t\t\tf = self.location_convolution(expanded_alignments)\n\t\t\t# Projected location features [batch_size, max_time, attention_dim]\n\t\t\tprocessed_location_features = self.location_layer(f)\n\t\t\t# energy shape [batch_size, max_time]\n\t\t\tenergy = _location_sensitive_score(processed_query, processed_location_features, self.keys)\n\t\t# alignments shape = energy shape = [batch_size, max_time]\n\t\talignments = self._probability_fn(energy, previous_alignments)\n\t\t# Cumulate alignments",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\tf = self.location_convolution(expanded_alignments)\n\t\t\t# Projected location features [batch_size, max_time, attention_dim]\n\t\t\tprocessed_location_features = self.location_layer(f)\n\t\t\t# energy shape [batch_size, max_time]\n\t\t\tenergy = _location_sensitive_score(processed_query, processed_location_features, self.keys)\n\t\t# alignments shape = energy shape = [batch_size, max_time]\n\t\talignments = self._probability_fn(energy, previous_alignments)\n\t\t# Cumulate alignments\n\t\tif self._cumulate:\n\t\t\tnext_state = alignments + previous_alignments",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\tprocessed_location_features",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\tprocessed_location_features = self.location_layer(f)\n\t\t\t# energy shape [batch_size, max_time]\n\t\t\tenergy = _location_sensitive_score(processed_query, processed_location_features, self.keys)\n\t\t# alignments shape = energy shape = [batch_size, max_time]\n\t\talignments = self._probability_fn(energy, previous_alignments)\n\t\t# Cumulate alignments\n\t\tif self._cumulate:\n\t\t\tnext_state = alignments + previous_alignments\n\t\telse:\n\t\t\tnext_state = alignments",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\tenergy",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\tenergy = _location_sensitive_score(processed_query, processed_location_features, self.keys)\n\t\t# alignments shape = energy shape = [batch_size, max_time]\n\t\talignments = self._probability_fn(energy, previous_alignments)\n\t\t# Cumulate alignments\n\t\tif self._cumulate:\n\t\t\tnext_state = alignments + previous_alignments\n\t\telse:\n\t\t\tnext_state = alignments\n\t\treturn alignments, next_state",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\talignments",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\talignments = self._probability_fn(energy, previous_alignments)\n\t\t# Cumulate alignments\n\t\tif self._cumulate:\n\t\t\tnext_state = alignments + previous_alignments\n\t\telse:\n\t\t\tnext_state = alignments\n\t\treturn alignments, next_state",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\tnext_state",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\tnext_state = alignments + previous_alignments\n\t\telse:\n\t\t\tnext_state = alignments\n\t\treturn alignments, next_state",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "\t\t\tnext_state",
        "kind": 5,
        "importPath": "synthesizer.models.attention",
        "description": "synthesizer.models.attention",
        "peekOfCode": "\t\t\tnext_state = alignments\n\t\treturn alignments, next_state",
        "detail": "synthesizer.models.attention",
        "documentation": {}
    },
    {
        "label": "CustomDecoderOutput",
        "kind": 6,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "class CustomDecoderOutput(\n\t\tcollections.namedtuple(\"CustomDecoderOutput\", (\"rnn_output\", \"token_output\", \"sample_id\"))):\n\tpass\nclass CustomDecoder(decoder.Decoder):\n\t\"\"\"Custom sampling decoder.\n\tAllows for stop token prediction at inference time\n\tand returns equivalent loss in training time.\n\tNote:\n\tOnly use this decoder with Tacotron 2 as it only accepts tacotron custom helpers\n\t\"\"\"",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "CustomDecoder",
        "kind": 6,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "class CustomDecoder(decoder.Decoder):\n\t\"\"\"Custom sampling decoder.\n\tAllows for stop token prediction at inference time\n\tand returns equivalent loss in training time.\n\tNote:\n\tOnly use this decoder with Tacotron 2 as it only accepts tacotron custom helpers\n\t\"\"\"\n\tdef __init__(self, cell, helper, initial_state, output_layer=None):\n\t\t\"\"\"Initialize CustomDecoder.\n\t\tArgs:",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\tself._cell",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\tself._cell = cell\n\t\tself._helper = helper\n\t\tself._initial_state = initial_state\n\t\tself._output_layer = output_layer\n\t@property\n\tdef batch_size(self):\n\t\treturn self._helper.batch_size\n\tdef _rnn_output_size(self):\n\t\tsize = self._cell.output_size\n\t\tif self._output_layer is None:",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\tself._helper",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\tself._helper = helper\n\t\tself._initial_state = initial_state\n\t\tself._output_layer = output_layer\n\t@property\n\tdef batch_size(self):\n\t\treturn self._helper.batch_size\n\tdef _rnn_output_size(self):\n\t\tsize = self._cell.output_size\n\t\tif self._output_layer is None:\n\t\t\treturn size",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\tself._initial_state",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\tself._initial_state = initial_state\n\t\tself._output_layer = output_layer\n\t@property\n\tdef batch_size(self):\n\t\treturn self._helper.batch_size\n\tdef _rnn_output_size(self):\n\t\tsize = self._cell.output_size\n\t\tif self._output_layer is None:\n\t\t\treturn size\n\t\telse:",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\tself._output_layer",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\tself._output_layer = output_layer\n\t@property\n\tdef batch_size(self):\n\t\treturn self._helper.batch_size\n\tdef _rnn_output_size(self):\n\t\tsize = self._cell.output_size\n\t\tif self._output_layer is None:\n\t\t\treturn size\n\t\telse:\n\t\t\t# To use layer\"s compute_output_shape, we need to convert the",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\tsize",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\tsize = self._cell.output_size\n\t\tif self._output_layer is None:\n\t\t\treturn size\n\t\telse:\n\t\t\t# To use layer\"s compute_output_shape, we need to convert the\n\t\t\t# RNNCell\"s output_size entries into shapes with an unknown\n\t\t\t# batch size.  We then pass this through the layer\"s\n\t\t\t# compute_output_shape and read off all but the first (batch)\n\t\t\t# dimensions to get the output size of the rnn with the layer\n\t\t\t# applied to the top.",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\t\toutput_shape_with_unknown_batch",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\t\toutput_shape_with_unknown_batch = nest.map_structure(\n\t\t\t\t\tlambda s: tensor_shape.TensorShape([None]).concatenate(s),\n\t\t\t\t\tsize)\n\t\t\tlayer_output_shape = self._output_layer._compute_output_shape(  # pylint: disable=protected-access\n\t\t\t\t\toutput_shape_with_unknown_batch)\n\t\t\treturn nest.map_structure(lambda s: s[1:], layer_output_shape)\n\t@property\n\tdef output_size(self):\n\t\t# Return the cell output and the id\n\t\treturn CustomDecoderOutput(",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\t\tlayer_output_shape",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\t\tlayer_output_shape = self._output_layer._compute_output_shape(  # pylint: disable=protected-access\n\t\t\t\t\toutput_shape_with_unknown_batch)\n\t\t\treturn nest.map_structure(lambda s: s[1:], layer_output_shape)\n\t@property\n\tdef output_size(self):\n\t\t# Return the cell output and the id\n\t\treturn CustomDecoderOutput(\n\t\t\t\trnn_output=self._rnn_output_size(),\n\t\t\t\ttoken_output=self._helper.token_output_size,\n\t\t\t\tsample_id=self._helper.sample_ids_shape)",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\tdtype",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\tdtype = nest.flatten(self._initial_state)[0].dtype\n\t\treturn CustomDecoderOutput(\n\t\t\t\tnest.map_structure(lambda _: dtype, self._rnn_output_size()),\n\t\t\t\ttf.float32,\n\t\t\t\tself._helper.sample_ids_dtype)\n\tdef initialize(self, name=None):\n\t\t\"\"\"Initialize the decoder.\n\t\tArgs:\n\t\t\tname: Name scope for any created operations.\n\t\tReturns:",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcell_outputs",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\t\t\tcell_outputs = self._output_layer(cell_outputs)\n\t\t\tsample_ids = self._helper.sample(\n\t\t\t\t\ttime=time, outputs=cell_outputs, state=cell_state)\n\t\t\t(finished, next_inputs, next_state) = self._helper.next_inputs(\n\t\t\t\t\ttime=time,\n\t\t\t\t\toutputs=cell_outputs,\n\t\t\t\t\tstate=cell_state,\n\t\t\t\t\tsample_ids=sample_ids,\n\t\t\t\t\tstop_token_prediction=stop_token)\n\t\toutputs = CustomDecoderOutput(cell_outputs, stop_token, sample_ids)",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\t\tsample_ids",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\t\tsample_ids = self._helper.sample(\n\t\t\t\t\ttime=time, outputs=cell_outputs, state=cell_state)\n\t\t\t(finished, next_inputs, next_state) = self._helper.next_inputs(\n\t\t\t\t\ttime=time,\n\t\t\t\t\toutputs=cell_outputs,\n\t\t\t\t\tstate=cell_state,\n\t\t\t\t\tsample_ids=sample_ids,\n\t\t\t\t\tstop_token_prediction=stop_token)\n\t\toutputs = CustomDecoderOutput(cell_outputs, stop_token, sample_ids)\n\t\treturn (outputs, next_state, next_inputs, finished)",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "\t\toutputs",
        "kind": 5,
        "importPath": "synthesizer.models.custom_decoder",
        "description": "synthesizer.models.custom_decoder",
        "peekOfCode": "\t\toutputs = CustomDecoderOutput(cell_outputs, stop_token, sample_ids)\n\t\treturn (outputs, next_state, next_inputs, finished)",
        "detail": "synthesizer.models.custom_decoder",
        "documentation": {}
    },
    {
        "label": "TacoTestHelper",
        "kind": 6,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "class TacoTestHelper(Helper):\n\tdef __init__(self, batch_size, hparams):\n\t\twith tf.name_scope(\"TacoTestHelper\"):\n\t\t\tself._batch_size = batch_size\n\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself.stop_at_any = hparams.stop_at_any\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "TacoTrainingHelper",
        "kind": 6,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "class TacoTrainingHelper(Helper):\n\tdef __init__(self, batch_size, targets, hparams, gta, evaluating, global_step):\n\t\t# inputs is [N, T_in], targets is [N, T_out, D]\n\t\twith tf.name_scope(\"TacoTrainingHelper\"):\n\t\t\tself._batch_size = batch_size\n\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself._ratio = tf.convert_to_tensor(hparams.tacotron_teacher_forcing_ratio)\n\t\t\tself.gta = gta\n\t\t\tself.eval = evaluating",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._batch_size",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._batch_size = batch_size\n\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself.stop_at_any = hparams.stop_at_any\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property\n\tdef token_output_size(self):\n\t\treturn self._reduction_factor",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._output_dim",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself.stop_at_any = hparams.stop_at_any\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property\n\tdef token_output_size(self):\n\t\treturn self._reduction_factor\n\t@property",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._reduction_factor",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself.stop_at_any = hparams.stop_at_any\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property\n\tdef token_output_size(self):\n\t\treturn self._reduction_factor\n\t@property\n\tdef sample_ids_shape(self):",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.stop_at_any",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself.stop_at_any = hparams.stop_at_any\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property\n\tdef token_output_size(self):\n\t\treturn self._reduction_factor\n\t@property\n\tdef sample_ids_shape(self):\n\t\treturn tf.TensorShape([])",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tfinished",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tfinished = tf.cast(tf.round(stop_token_prediction), tf.bool)\n\t\t\t#Since we are predicting r frames at each step, two modes are\n\t\t\t#then possible:\n\t\t\t#\tStop when the model outputs a p > 0.5 for any frame between r frames (Recommended)\n\t\t\t#\tStop when the model outputs a p > 0.5 for all r frames (Safer)\n\t\t\t#Note:\n\t\t\t#\tWith enough training steps, the model should be able to predict when to stop correctly\n\t\t\t#\tand the use of stop_at_any = True would be recommended. If however the model didn\"t\n\t\t\t#\tlearn to stop correctly yet, (stops too soon) one could choose to use the safer option\n\t\t\t#\tto get a correct synthesis",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfinished",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\t\tfinished = tf.reduce_any(tf.reduce_all(finished, axis=0)) #Recommended\n\t\t\telse:\n\t\t\t\tfinished = tf.reduce_all(tf.reduce_all(finished, axis=0)) #Safer option\n\t\t\t# Feed last output frame as next input. outputs is [N, output_dim * r]\n\t\t\tnext_inputs = outputs[:, -self._output_dim:]\n\t\t\tnext_state = state\n\t\t\treturn (finished, next_inputs, next_state)\nclass TacoTrainingHelper(Helper):\n\tdef __init__(self, batch_size, targets, hparams, gta, evaluating, global_step):\n\t\t# inputs is [N, T_in], targets is [N, T_out, D]",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfinished",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\t\tfinished = tf.reduce_all(tf.reduce_all(finished, axis=0)) #Safer option\n\t\t\t# Feed last output frame as next input. outputs is [N, output_dim * r]\n\t\t\tnext_inputs = outputs[:, -self._output_dim:]\n\t\t\tnext_state = state\n\t\t\treturn (finished, next_inputs, next_state)\nclass TacoTrainingHelper(Helper):\n\tdef __init__(self, batch_size, targets, hparams, gta, evaluating, global_step):\n\t\t# inputs is [N, T_in], targets is [N, T_out, D]\n\t\twith tf.name_scope(\"TacoTrainingHelper\"):\n\t\t\tself._batch_size = batch_size",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tnext_inputs",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tnext_inputs = outputs[:, -self._output_dim:]\n\t\t\tnext_state = state\n\t\t\treturn (finished, next_inputs, next_state)\nclass TacoTrainingHelper(Helper):\n\tdef __init__(self, batch_size, targets, hparams, gta, evaluating, global_step):\n\t\t# inputs is [N, T_in], targets is [N, T_out, D]\n\t\twith tf.name_scope(\"TacoTrainingHelper\"):\n\t\t\tself._batch_size = batch_size\n\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tnext_state",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tnext_state = state\n\t\t\treturn (finished, next_inputs, next_state)\nclass TacoTrainingHelper(Helper):\n\tdef __init__(self, batch_size, targets, hparams, gta, evaluating, global_step):\n\t\t# inputs is [N, T_in], targets is [N, T_out, D]\n\t\twith tf.name_scope(\"TacoTrainingHelper\"):\n\t\t\tself._batch_size = batch_size\n\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself._ratio = tf.convert_to_tensor(hparams.tacotron_teacher_forcing_ratio)",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._batch_size",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._batch_size = batch_size\n\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself._ratio = tf.convert_to_tensor(hparams.tacotron_teacher_forcing_ratio)\n\t\t\tself.gta = gta\n\t\t\tself.eval = evaluating\n\t\t\tself._hparams = hparams\n\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._output_dim",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._output_dim = hparams.num_mels\n\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself._ratio = tf.convert_to_tensor(hparams.tacotron_teacher_forcing_ratio)\n\t\t\tself.gta = gta\n\t\t\tself.eval = evaluating\n\t\t\tself._hparams = hparams\n\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._reduction_factor",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._reduction_factor = hparams.outputs_per_step\n\t\t\tself._ratio = tf.convert_to_tensor(hparams.tacotron_teacher_forcing_ratio)\n\t\t\tself.gta = gta\n\t\t\tself.eval = evaluating\n\t\t\tself._hparams = hparams\n\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._ratio",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._ratio = tf.convert_to_tensor(hparams.tacotron_teacher_forcing_ratio)\n\t\t\tself.gta = gta\n\t\t\tself.eval = evaluating\n\t\t\tself._hparams = hparams\n\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length\n\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.gta",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself.gta = gta\n\t\t\tself.eval = evaluating\n\t\t\tself._hparams = hparams\n\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length\n\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])\n\t@property",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.eval",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself.eval = evaluating\n\t\t\tself._hparams = hparams\n\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length\n\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])\n\t@property\n\tdef batch_size(self):",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._hparams",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._hparams = hparams\n\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length\n\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.global_step",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself.global_step = global_step\n\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length\n\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tr",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tr = self._reduction_factor\n\t\t\t# Feed every r-th target frame as input\n\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length\n\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property\n\tdef token_output_size(self):",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._targets",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._targets = targets[:, r-1::r, :]\n\t\t\t#Maximal sequence length\n\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property\n\tdef token_output_size(self):\n\t\treturn self._reduction_factor\n\t@property",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._lengths",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._lengths = tf.tile([tf.shape(self._targets)[1]], [self._batch_size])\n\t@property\n\tdef batch_size(self):\n\t\treturn self._batch_size\n\t@property\n\tdef token_output_size(self):\n\t\treturn self._reduction_factor\n\t@property\n\tdef sample_ids_shape(self):\n\t\treturn tf.TensorShape([])",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._ratio",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._ratio = tf.convert_to_tensor(1.) #Force GTA model to always feed ground-truth\n\t\telif self.eval and self._hparams.natural_eval:\n\t\t\tself._ratio = tf.convert_to_tensor(0.) #Force eval model to always feed predictions\n\t\telse:\n\t\t\tif self._hparams.tacotron_teacher_forcing_mode == \"scheduled\":\n\t\t\t\tself._ratio = _teacher_forcing_ratio_decay(self._hparams.tacotron_teacher_forcing_init_ratio,\n\t\t\t\t\tself.global_step, self._hparams)\n\t\treturn (tf.tile([False], [self._batch_size]), _go_frames(self._batch_size, self._output_dim))\n\tdef sample(self, time, outputs, state, name=None):\n\t\treturn tf.tile([0], [self._batch_size])  # Return all 0; we ignore them",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._ratio",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tself._ratio = tf.convert_to_tensor(0.) #Force eval model to always feed predictions\n\t\telse:\n\t\t\tif self._hparams.tacotron_teacher_forcing_mode == \"scheduled\":\n\t\t\t\tself._ratio = _teacher_forcing_ratio_decay(self._hparams.tacotron_teacher_forcing_init_ratio,\n\t\t\t\t\tself.global_step, self._hparams)\n\t\treturn (tf.tile([False], [self._batch_size]), _go_frames(self._batch_size, self._output_dim))\n\tdef sample(self, time, outputs, state, name=None):\n\t\treturn tf.tile([0], [self._batch_size])  # Return all 0; we ignore them\n\tdef next_inputs(self, time, outputs, state, sample_ids, stop_token_prediction, name=None):\n\t\twith tf.name_scope(name or \"TacoTrainingHelper\"):",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself._ratio",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\t\tself._ratio = _teacher_forcing_ratio_decay(self._hparams.tacotron_teacher_forcing_init_ratio,\n\t\t\t\t\tself.global_step, self._hparams)\n\t\treturn (tf.tile([False], [self._batch_size]), _go_frames(self._batch_size, self._output_dim))\n\tdef sample(self, time, outputs, state, name=None):\n\t\treturn tf.tile([0], [self._batch_size])  # Return all 0; we ignore them\n\tdef next_inputs(self, time, outputs, state, sample_ids, stop_token_prediction, name=None):\n\t\twith tf.name_scope(name or \"TacoTrainingHelper\"):\n\t\t\t#synthesis stop (we let the model see paddings as we mask them when computing loss functions)\n\t\t\tfinished = (time + 1 >= self._lengths)\n\t\t\t#Pick previous outputs randomly with respect to teacher forcing ratio",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tfinished",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tfinished = (time + 1 >= self._lengths)\n\t\t\t#Pick previous outputs randomly with respect to teacher forcing ratio\n\t\t\tnext_inputs = tf.cond(\n\t\t\t\ttf.less(tf.random.uniform([], minval=0, maxval=1, dtype=tf.float32), self._ratio),\n\t\t\t\tlambda: self._targets[:, time, :], #Teacher-forcing: return true frame\n\t\t\t\tlambda: outputs[:,-self._output_dim:])\n\t\t\t#Pass on state\n\t\t\tnext_state = state\n\t\t\treturn (finished, next_inputs, next_state)\ndef _go_frames(batch_size, output_dim):",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tnext_inputs",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tnext_inputs = tf.cond(\n\t\t\t\ttf.less(tf.random.uniform([], minval=0, maxval=1, dtype=tf.float32), self._ratio),\n\t\t\t\tlambda: self._targets[:, time, :], #Teacher-forcing: return true frame\n\t\t\t\tlambda: outputs[:,-self._output_dim:])\n\t\t\t#Pass on state\n\t\t\tnext_state = state\n\t\t\treturn (finished, next_inputs, next_state)\ndef _go_frames(batch_size, output_dim):\n\t\"\"\"Returns all-zero <GO> frames for a given batch size and output dimension\"\"\"\n\treturn tf.tile([[0.0]], [batch_size, output_dim])",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\t\tnext_state",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\t\tnext_state = state\n\t\t\treturn (finished, next_inputs, next_state)\ndef _go_frames(batch_size, output_dim):\n\t\"\"\"Returns all-zero <GO> frames for a given batch size and output dimension\"\"\"\n\treturn tf.tile([[0.0]], [batch_size, output_dim])\ndef _teacher_forcing_ratio_decay(init_tfr, global_step, hparams):\n\t\t#################################################################\n\t\t# Narrow Cosine Decay:\n\t\t# Phase 1: tfr = 1\n\t\t# We only start learning rate decay after 10k steps",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\ttfr",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\ttfr = tf.train.cosine_decay(init_tfr,\n\t\t\tglobal_step=global_step - hparams.tacotron_teacher_forcing_start_decay, #tfr = 1 at step 10k\n\t\t\tdecay_steps=hparams.tacotron_teacher_forcing_decay_steps, #tfr = 0 at step ~280k\n\t\t\talpha=hparams.tacotron_teacher_forcing_decay_alpha, #tfr = 0% of init_tfr as final value\n\t\t\tname=\"tfr_cosine_decay\")\n\t\t#force teacher forcing ratio to take initial value when global step < start decay step.\n\t\tnarrow_tfr = tf.cond(\n\t\t\ttf.less(global_step, tf.convert_to_tensor(hparams.tacotron_teacher_forcing_start_decay)),\n\t\t\tlambda: tf.convert_to_tensor(init_tfr),\n\t\t\tlambda: tfr)",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "\t\tnarrow_tfr",
        "kind": 5,
        "importPath": "synthesizer.models.helpers",
        "description": "synthesizer.models.helpers",
        "peekOfCode": "\t\tnarrow_tfr = tf.cond(\n\t\t\ttf.less(global_step, tf.convert_to_tensor(hparams.tacotron_teacher_forcing_start_decay)),\n\t\t\tlambda: tf.convert_to_tensor(init_tfr),\n\t\t\tlambda: tfr)\n\t\treturn narrow_tfr",
        "detail": "synthesizer.models.helpers",
        "documentation": {}
    },
    {
        "label": "HighwayNet",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class HighwayNet:\n    def __init__(self, units, name=None):\n        self.units = units\n        self.scope = \"HighwayNet\" if name is None else name\n        self.H_layer = tf.compat.v1.layers.Dense(units=self.units, activation=tf.nn.relu, name=\"H\")\n        self.T_layer = tf.compat.v1.layers.Dense(units=self.units, activation=tf.nn.sigmoid, name=\"T\",\n                                       bias_initializer=tf.constant_initializer(-1.))\n    def __call__(self, inputs):\n        with tf.compat.v1.variable_scope(self.scope):\n            H = self.H_layer(inputs)",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "CBHG",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class CBHG:\n    def __init__(self, K, conv_channels, pool_size, projections, projection_kernel_size,\n                 n_highwaynet_layers, highway_units, rnn_units, is_training, name=None):\n        self.K = K\n        self.conv_channels = conv_channels\n        self.pool_size = pool_size\n        self.projections = projections\n        self.projection_kernel_size = projection_kernel_size\n        self.is_training = is_training\n        self.scope = \"CBHG\" if name is None else name",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "ZoneoutLSTMCell",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class ZoneoutLSTMCell(tf.compat.v1.nn.rnn_cell.RNNCell):\n    \"\"\"Wrapper for tf LSTM to create Zoneout LSTM Cell\n    inspired by:\n    https://github.com/teganmaharaj/zoneout/blob/master/zoneout_tensorflow.py\n    Published by one of \"https://arxiv.org/pdf/1606.01305.pdf\" paper writers.\n    Many thanks to @Ondal90 for pointing this out. You sir are a hero!\n    \"\"\"\n    def __init__(self, num_units, is_training, zoneout_factor_cell=0., zoneout_factor_output=0.,\n                 state_is_tuple=True, name=None):\n        \"\"\"Initializer with possibility to set different zoneout values for cell/hidden states.",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "EncoderConvolutions",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class EncoderConvolutions:\n    \"\"\"Encoder convolutional layers used to find local dependencies in inputs characters.\n    \"\"\"\n    def __init__(self, is_training, hparams, activation=tf.nn.relu, scope=None):\n        \"\"\"\n        Args:\n            is_training: Boolean, determines if the model is training or in inference to control \n            dropout\n            kernel_size: tuple or integer, The size of convolution kernels\n            channels: integer, number of convolutional kernels",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "EncoderRNN",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class EncoderRNN:\n    \"\"\"Encoder bidirectional one layer LSTM\n    \"\"\"\n    def __init__(self, is_training, size=256, zoneout=0.1, scope=None):\n        \"\"\"\n        Args:\n            is_training: Boolean, determines if the model is training or in inference to control \n            zoneout\n            size: integer, the number of LSTM units for each direction\n            zoneout: the zoneout factor",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "Prenet",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class Prenet:\n    \"\"\"\n        Two fully connected layers used as an information bottleneck for the attention.\n    \"\"\"\n    def __init__(self, is_training, layers_sizes=[256, 256], drop_rate=0.5, activation=tf.nn.relu,\n                 scope=None):\n        \"\"\"\n        Args:\n            layers_sizes: list of integers, the length of the list represents the number of pre-net\n                layers and the list values represent the layers number of units",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "DecoderRNN",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class DecoderRNN:\n    \"\"\"Decoder two uni directional LSTM Cells\n    \"\"\"\n    def __init__(self, is_training, layers=2, size=1024, zoneout=0.1, scope=None):\n        \"\"\"\n        Args:\n            is_training: Boolean, determines if the model is in training or inference to control \n            zoneout\n            layers: integer, the number of LSTM layers in the decoder\n            size: integer, the number of LSTM units in each layer",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "FrameProjection",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class FrameProjection:\n    \"\"\"Projection layer to r * num_mels dimensions or num_mels dimensions\n    \"\"\"\n    def __init__(self, shape=80, activation=None, scope=None):\n        \"\"\"\n        Args:\n            shape: integer, dimensionality of output space (r*n_mels for decoder or n_mels for \n            postnet)\n            activation: callable, activation function\n            scope: FrameProjection scope.",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "StopProjection",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class StopProjection:\n    \"\"\"Projection to a scalar and through a sigmoid activation\n    \"\"\"\n    def __init__(self, is_training, shape=1, activation=tf.nn.sigmoid, scope=None):\n        \"\"\"\n        Args:\n            is_training: Boolean, to control the use of sigmoid function as it is useless to use it\n                during training since it is integrate inside the sigmoid_crossentropy loss\n            shape: integer, dimensionality of output space. Defaults to 1 (scalar)\n            activation: callable, activation function. only used during inference",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "Postnet",
        "kind": 6,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "class Postnet:\n    \"\"\"Postnet that takes final decoder output and fine tunes it (using vision on past and future \n    frames)\n    \"\"\"\n    def __init__(self, is_training, hparams, activation=tf.nn.tanh, scope=None):\n        \"\"\"\n        Args:\n            is_training: Boolean, determines if the model is training or in inference to control \n            dropout\n            kernel_size: tuple or integer, The size of convolution kernels",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "conv1d",
        "kind": 2,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "def conv1d(inputs, kernel_size, channels, activation, is_training, drop_rate, scope):\n    with tf.compat.v1.variable_scope(scope):\n        conv1d_output = tf.compat.v1.layers.conv1d(\n            inputs,\n            filters=channels,\n            kernel_size=kernel_size,\n            activation=None,\n            padding=\"same\")\n        batched = tf.compat.v1.layers.batch_normalization(conv1d_output, training=is_training)\n        activated = activation(batched)",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "sequence_mask",
        "kind": 2,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "def sequence_mask(lengths, r, expand=True):\n    \"\"\"Returns a 2-D or 3-D tensorflow sequence mask depending on the argument \"expand\"\n    \"\"\"\n    max_len = tf.reduce_max(lengths)\n    max_len = _round_up_tf(max_len, tf.convert_to_tensor(r))\n    if expand:\n        return tf.expand_dims(tf.sequence_mask(lengths, maxlen=max_len, dtype=tf.float32), axis=-1)\n    return tf.sequence_mask(lengths, maxlen=max_len, dtype=tf.float32)\ndef MaskedMSE(targets, outputs, targets_lengths, hparams, mask=None):\n    \"\"\"Computes a masked Mean Squared Error",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "MaskedMSE",
        "kind": 2,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "def MaskedMSE(targets, outputs, targets_lengths, hparams, mask=None):\n    \"\"\"Computes a masked Mean Squared Error\n    \"\"\"\n    # [batch_size, time_dimension, 1]\n    # example:\n    # sequence_mask([1, 3, 2], 5) = [[[1., 0., 0., 0., 0.]],\n    #\t\t\t\t\t\t\t    [[1., 1., 1., 0., 0.]],\n    #\t\t\t\t\t\t\t    [[1., 1., 0., 0., 0.]]]\n    # Note the maxlen argument that ensures mask shape is compatible with r>1\n    # This will by default mask the extra paddings caused by r>1",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "MaskedSigmoidCrossEntropy",
        "kind": 2,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "def MaskedSigmoidCrossEntropy(targets, outputs, targets_lengths, hparams, mask=None):\n    \"\"\"Computes a masked SigmoidCrossEntropy with logits\n    \"\"\"\n    # [batch_size, time_dimension]\n    # example:\n    # sequence_mask([1, 3, 2], 5) = [[1., 0., 0., 0., 0.],\n    #\t\t\t\t\t\t\t    [1., 1., 1., 0., 0.],\n    #\t\t\t\t\t\t\t    [1., 1., 0., 0., 0.]]\n    # Note the maxlen argument that ensures mask shape is compatible with r>1\n    # This will by default mask the extra paddings caused by r>1",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "MaskedLinearLoss",
        "kind": 2,
        "importPath": "synthesizer.models.modules",
        "description": "synthesizer.models.modules",
        "peekOfCode": "def MaskedLinearLoss(targets, outputs, targets_lengths, hparams, mask=None):\n    \"\"\"Computes a masked MAE loss with priority to low frequencies\n    \"\"\"\n    # [batch_size, time_dimension, 1]\n    # example:\n    # sequence_mask([1, 3, 2], 5) = [[[1., 0., 0., 0., 0.]],\n    #\t\t\t\t\t\t\t    [[1., 1., 1., 0., 0.]],\n    #\t\t\t\t\t\t\t    [[1., 1., 0., 0., 0.]]]\n    # Note the maxlen argument that ensures mask shape is compatible with r>1\n    # This will by default mask the extra paddings caused by r>1",
        "detail": "synthesizer.models.modules",
        "documentation": {}
    },
    {
        "label": "Tacotron",
        "kind": 6,
        "importPath": "synthesizer.models.tacotron",
        "description": "synthesizer.models.tacotron",
        "peekOfCode": "class Tacotron():\n    \"\"\"Tacotron-2 Feature prediction Model.\n    \"\"\"\n    def __init__(self, hparams):\n        self._hparams = hparams\n    def initialize(self, inputs, input_lengths, embed_targets, mel_targets=None, \n                   stop_token_targets=None, linear_targets=None, targets_lengths=None, gta=False,\n                   global_step=None, is_training=False, is_evaluating=False, split_infos=None):\n        \"\"\"\n        Initializes the model for inference sets \"mel_outputs\" and \"alignments\" fields.",
        "detail": "synthesizer.models.tacotron",
        "documentation": {}
    },
    {
        "label": "split_func",
        "kind": 2,
        "importPath": "synthesizer.models.tacotron",
        "description": "synthesizer.models.tacotron",
        "peekOfCode": "def split_func(x, split_pos):\n    rst = []\n    start = 0\n    # x will be a numpy array with the contents of the placeholder below\n    for i in range(split_pos.shape[0]):\n        rst.append(x[:, start:start + split_pos[i]])\n        start += split_pos[i]\n    return rst\nclass Tacotron():\n    \"\"\"Tacotron-2 Feature prediction Model.",
        "detail": "synthesizer.models.tacotron",
        "documentation": {}
    },
    {
        "label": "expand_abbreviations",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def expand_abbreviations(text):\n  for regex, replacement in _abbreviations:\n    text = re.sub(regex, replacement, text)\n  return text\ndef expand_numbers(text):\n  return normalize_numbers(text)\ndef lowercase(text):\n  \"\"\"lowercase input tokens.\"\"\"\n  return text.lower()\ndef collapse_whitespace(text):",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "expand_numbers",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def expand_numbers(text):\n  return normalize_numbers(text)\ndef lowercase(text):\n  \"\"\"lowercase input tokens.\"\"\"\n  return text.lower()\ndef collapse_whitespace(text):\n  return re.sub(_whitespace_re, \" \", text)\ndef convert_to_ascii(text):\n  return unidecode(text)\ndef basic_cleaners(text):",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "lowercase",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def lowercase(text):\n  \"\"\"lowercase input tokens.\"\"\"\n  return text.lower()\ndef collapse_whitespace(text):\n  return re.sub(_whitespace_re, \" \", text)\ndef convert_to_ascii(text):\n  return unidecode(text)\ndef basic_cleaners(text):\n  \"\"\"Basic pipeline that lowercases and collapses whitespace without transliteration.\"\"\"\n  text = lowercase(text)",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "collapse_whitespace",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def collapse_whitespace(text):\n  return re.sub(_whitespace_re, \" \", text)\ndef convert_to_ascii(text):\n  return unidecode(text)\ndef basic_cleaners(text):\n  \"\"\"Basic pipeline that lowercases and collapses whitespace without transliteration.\"\"\"\n  text = lowercase(text)\n  text = collapse_whitespace(text)\n  return text\ndef transliteration_cleaners(text):",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "convert_to_ascii",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def convert_to_ascii(text):\n  return unidecode(text)\ndef basic_cleaners(text):\n  \"\"\"Basic pipeline that lowercases and collapses whitespace without transliteration.\"\"\"\n  text = lowercase(text)\n  text = collapse_whitespace(text)\n  return text\ndef transliteration_cleaners(text):\n  \"\"\"Pipeline for non-English text that transliterates to ASCII.\"\"\"\n  text = convert_to_ascii(text)",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "basic_cleaners",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def basic_cleaners(text):\n  \"\"\"Basic pipeline that lowercases and collapses whitespace without transliteration.\"\"\"\n  text = lowercase(text)\n  text = collapse_whitespace(text)\n  return text\ndef transliteration_cleaners(text):\n  \"\"\"Pipeline for non-English text that transliterates to ASCII.\"\"\"\n  text = convert_to_ascii(text)\n  text = lowercase(text)\n  text = collapse_whitespace(text)",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "transliteration_cleaners",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def transliteration_cleaners(text):\n  \"\"\"Pipeline for non-English text that transliterates to ASCII.\"\"\"\n  text = convert_to_ascii(text)\n  text = lowercase(text)\n  text = collapse_whitespace(text)\n  return text\ndef english_cleaners(text):\n  \"\"\"Pipeline for English text, including number and abbreviation expansion.\"\"\"\n  text = convert_to_ascii(text)\n  text = lowercase(text)",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "english_cleaners",
        "kind": 2,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "def english_cleaners(text):\n  \"\"\"Pipeline for English text, including number and abbreviation expansion.\"\"\"\n  text = convert_to_ascii(text)\n  text = lowercase(text)\n  text = expand_numbers(text)\n  text = expand_abbreviations(text)\n  text = collapse_whitespace(text)\n  return text",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "_whitespace_re",
        "kind": 5,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "_whitespace_re = re.compile(r\"\\s+\")\n# List of (regular expression, replacement) pairs for abbreviations:\n_abbreviations = [(re.compile(\"\\\\b%s\\\\.\" % x[0], re.IGNORECASE), x[1]) for x in [\n  (\"mrs\", \"misess\"),\n  (\"mr\", \"mister\"),\n  (\"dr\", \"doctor\"),\n  (\"st\", \"saint\"),\n  (\"co\", \"company\"),\n  (\"jr\", \"junior\"),\n  (\"maj\", \"major\"),",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "_abbreviations",
        "kind": 5,
        "importPath": "synthesizer.utils.cleaners",
        "description": "synthesizer.utils.cleaners",
        "peekOfCode": "_abbreviations = [(re.compile(\"\\\\b%s\\\\.\" % x[0], re.IGNORECASE), x[1]) for x in [\n  (\"mrs\", \"misess\"),\n  (\"mr\", \"mister\"),\n  (\"dr\", \"doctor\"),\n  (\"st\", \"saint\"),\n  (\"co\", \"company\"),\n  (\"jr\", \"junior\"),\n  (\"maj\", \"major\"),\n  (\"gen\", \"general\"),\n  (\"drs\", \"doctors\"),",
        "detail": "synthesizer.utils.cleaners",
        "documentation": {}
    },
    {
        "label": "normalize_numbers",
        "kind": 2,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "def normalize_numbers(text):\n  text = re.sub(_comma_number_re, _remove_commas, text)\n  text = re.sub(_pounds_re, r\"\\1 pounds\", text)\n  text = re.sub(_dollars_re, _expand_dollars, text)\n  text = re.sub(_decimal_number_re, _expand_decimal_point, text)\n  text = re.sub(_ordinal_re, _expand_ordinal, text)\n  text = re.sub(_number_re, _expand_number, text)\n  return text",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "_inflect",
        "kind": 5,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "_inflect = inflect.engine()\n_comma_number_re = re.compile(r\"([0-9][0-9\\,]+[0-9])\")\n_decimal_number_re = re.compile(r\"([0-9]+\\.[0-9]+)\")\n_pounds_re = re.compile(r\"£([0-9\\,]*[0-9]+)\")\n_dollars_re = re.compile(r\"\\$([0-9\\.\\,]*[0-9]+)\")\n_ordinal_re = re.compile(r\"[0-9]+(st|nd|rd|th)\")\n_number_re = re.compile(r\"[0-9]+\")\ndef _remove_commas(m):\n  return m.group(1).replace(\",\", \"\")\ndef _expand_decimal_point(m):",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "_comma_number_re",
        "kind": 5,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "_comma_number_re = re.compile(r\"([0-9][0-9\\,]+[0-9])\")\n_decimal_number_re = re.compile(r\"([0-9]+\\.[0-9]+)\")\n_pounds_re = re.compile(r\"£([0-9\\,]*[0-9]+)\")\n_dollars_re = re.compile(r\"\\$([0-9\\.\\,]*[0-9]+)\")\n_ordinal_re = re.compile(r\"[0-9]+(st|nd|rd|th)\")\n_number_re = re.compile(r\"[0-9]+\")\ndef _remove_commas(m):\n  return m.group(1).replace(\",\", \"\")\ndef _expand_decimal_point(m):\n  return m.group(1).replace(\".\", \" point \")",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "_decimal_number_re",
        "kind": 5,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "_decimal_number_re = re.compile(r\"([0-9]+\\.[0-9]+)\")\n_pounds_re = re.compile(r\"£([0-9\\,]*[0-9]+)\")\n_dollars_re = re.compile(r\"\\$([0-9\\.\\,]*[0-9]+)\")\n_ordinal_re = re.compile(r\"[0-9]+(st|nd|rd|th)\")\n_number_re = re.compile(r\"[0-9]+\")\ndef _remove_commas(m):\n  return m.group(1).replace(\",\", \"\")\ndef _expand_decimal_point(m):\n  return m.group(1).replace(\".\", \" point \")\ndef _expand_dollars(m):",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "_pounds_re",
        "kind": 5,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "_pounds_re = re.compile(r\"£([0-9\\,]*[0-9]+)\")\n_dollars_re = re.compile(r\"\\$([0-9\\.\\,]*[0-9]+)\")\n_ordinal_re = re.compile(r\"[0-9]+(st|nd|rd|th)\")\n_number_re = re.compile(r\"[0-9]+\")\ndef _remove_commas(m):\n  return m.group(1).replace(\",\", \"\")\ndef _expand_decimal_point(m):\n  return m.group(1).replace(\".\", \" point \")\ndef _expand_dollars(m):\n  match = m.group(1)",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "_dollars_re",
        "kind": 5,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "_dollars_re = re.compile(r\"\\$([0-9\\.\\,]*[0-9]+)\")\n_ordinal_re = re.compile(r\"[0-9]+(st|nd|rd|th)\")\n_number_re = re.compile(r\"[0-9]+\")\ndef _remove_commas(m):\n  return m.group(1).replace(\",\", \"\")\ndef _expand_decimal_point(m):\n  return m.group(1).replace(\".\", \" point \")\ndef _expand_dollars(m):\n  match = m.group(1)\n  parts = match.split(\".\")",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "_ordinal_re",
        "kind": 5,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "_ordinal_re = re.compile(r\"[0-9]+(st|nd|rd|th)\")\n_number_re = re.compile(r\"[0-9]+\")\ndef _remove_commas(m):\n  return m.group(1).replace(\",\", \"\")\ndef _expand_decimal_point(m):\n  return m.group(1).replace(\".\", \" point \")\ndef _expand_dollars(m):\n  match = m.group(1)\n  parts = match.split(\".\")\n  if len(parts) > 2:",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "_number_re",
        "kind": 5,
        "importPath": "synthesizer.utils.numbers",
        "description": "synthesizer.utils.numbers",
        "peekOfCode": "_number_re = re.compile(r\"[0-9]+\")\ndef _remove_commas(m):\n  return m.group(1).replace(\",\", \"\")\ndef _expand_decimal_point(m):\n  return m.group(1).replace(\".\", \" point \")\ndef _expand_dollars(m):\n  match = m.group(1)\n  parts = match.split(\".\")\n  if len(parts) > 2:\n    return match + \" dollars\"  # Unexpected format",
        "detail": "synthesizer.utils.numbers",
        "documentation": {}
    },
    {
        "label": "split_title_line",
        "kind": 2,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "def split_title_line(title_text, max_words=5):\n\t\"\"\"\n\tA function that splits any string based on specific character\n\t(returning it with the string), with maximum number of words on it\n\t\"\"\"\n\tseq = title_text.split()\n\treturn \"\\n\".join([\" \".join(seq[i:i + max_words]) for i in range(0, len(seq), max_words)])\ndef plot_alignment(alignment, path, title=None, split_title=False, max_len=None):\n\tif max_len is not None:\n\t\talignment = alignment[:, :max_len]",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "plot_alignment",
        "kind": 2,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "def plot_alignment(alignment, path, title=None, split_title=False, max_len=None):\n\tif max_len is not None:\n\t\talignment = alignment[:, :max_len]\n\tfig = plt.figure(figsize=(8, 6))\n\tax = fig.add_subplot(111)\n\tim = ax.imshow(\n\t\talignment,\n\t\taspect=\"auto\",\n\t\torigin=\"lower\",\n\t\tinterpolation=\"none\")",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "plot_spectrogram",
        "kind": 2,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "def plot_spectrogram(pred_spectrogram, path, title=None, split_title=False, target_spectrogram=None, max_len=None, auto_aspect=False):\n\tif max_len is not None:\n\t\ttarget_spectrogram = target_spectrogram[:max_len]\n\t\tpred_spectrogram = pred_spectrogram[:max_len]\n\tif split_title:\n\t\ttitle = split_title_line(title)\n\tfig = plt.figure(figsize=(10, 8))\n\t# Set common labels\n\tfig.text(0.5, 0.18, title, horizontalalignment=\"center\", fontsize=16)\n\t#target spectrogram subplot",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\tseq",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\tseq = title_text.split()\n\treturn \"\\n\".join([\" \".join(seq[i:i + max_words]) for i in range(0, len(seq), max_words)])\ndef plot_alignment(alignment, path, title=None, split_title=False, max_len=None):\n\tif max_len is not None:\n\t\talignment = alignment[:, :max_len]\n\tfig = plt.figure(figsize=(8, 6))\n\tax = fig.add_subplot(111)\n\tim = ax.imshow(\n\t\talignment,\n\t\taspect=\"auto\",",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\talignment",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\talignment = alignment[:, :max_len]\n\tfig = plt.figure(figsize=(8, 6))\n\tax = fig.add_subplot(111)\n\tim = ax.imshow(\n\t\talignment,\n\t\taspect=\"auto\",\n\t\torigin=\"lower\",\n\t\tinterpolation=\"none\")\n\tfig.colorbar(im, ax=ax)\n\txlabel = \"Decoder timestep\"",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\tfig",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\tfig = plt.figure(figsize=(8, 6))\n\tax = fig.add_subplot(111)\n\tim = ax.imshow(\n\t\talignment,\n\t\taspect=\"auto\",\n\t\torigin=\"lower\",\n\t\tinterpolation=\"none\")\n\tfig.colorbar(im, ax=ax)\n\txlabel = \"Decoder timestep\"\n\tif split_title:",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\tax",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\tax = fig.add_subplot(111)\n\tim = ax.imshow(\n\t\talignment,\n\t\taspect=\"auto\",\n\t\torigin=\"lower\",\n\t\tinterpolation=\"none\")\n\tfig.colorbar(im, ax=ax)\n\txlabel = \"Decoder timestep\"\n\tif split_title:\n\t\ttitle = split_title_line(title)",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\tim",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\tim = ax.imshow(\n\t\talignment,\n\t\taspect=\"auto\",\n\t\torigin=\"lower\",\n\t\tinterpolation=\"none\")\n\tfig.colorbar(im, ax=ax)\n\txlabel = \"Decoder timestep\"\n\tif split_title:\n\t\ttitle = split_title_line(title)\n\tplt.xlabel(xlabel)",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\txlabel",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\txlabel = \"Decoder timestep\"\n\tif split_title:\n\t\ttitle = split_title_line(title)\n\tplt.xlabel(xlabel)\n\tplt.title(title)\n\tplt.ylabel(\"Encoder timestep\")\n\tplt.tight_layout()\n\tplt.savefig(path, format=\"png\")\n\tplt.close()\ndef plot_spectrogram(pred_spectrogram, path, title=None, split_title=False, target_spectrogram=None, max_len=None, auto_aspect=False):",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\ttitle = split_title_line(title)\n\tplt.xlabel(xlabel)\n\tplt.title(title)\n\tplt.ylabel(\"Encoder timestep\")\n\tplt.tight_layout()\n\tplt.savefig(path, format=\"png\")\n\tplt.close()\ndef plot_spectrogram(pred_spectrogram, path, title=None, split_title=False, target_spectrogram=None, max_len=None, auto_aspect=False):\n\tif max_len is not None:\n\t\ttarget_spectrogram = target_spectrogram[:max_len]",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_spectrogram",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\ttarget_spectrogram = target_spectrogram[:max_len]\n\t\tpred_spectrogram = pred_spectrogram[:max_len]\n\tif split_title:\n\t\ttitle = split_title_line(title)\n\tfig = plt.figure(figsize=(10, 8))\n\t# Set common labels\n\tfig.text(0.5, 0.18, title, horizontalalignment=\"center\", fontsize=16)\n\t#target spectrogram subplot\n\tif target_spectrogram is not None:\n\t\tax1 = fig.add_subplot(311)",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\tpred_spectrogram",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\tpred_spectrogram = pred_spectrogram[:max_len]\n\tif split_title:\n\t\ttitle = split_title_line(title)\n\tfig = plt.figure(figsize=(10, 8))\n\t# Set common labels\n\tfig.text(0.5, 0.18, title, horizontalalignment=\"center\", fontsize=16)\n\t#target spectrogram subplot\n\tif target_spectrogram is not None:\n\t\tax1 = fig.add_subplot(311)\n\t\tax2 = fig.add_subplot(312)",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\ttitle = split_title_line(title)\n\tfig = plt.figure(figsize=(10, 8))\n\t# Set common labels\n\tfig.text(0.5, 0.18, title, horizontalalignment=\"center\", fontsize=16)\n\t#target spectrogram subplot\n\tif target_spectrogram is not None:\n\t\tax1 = fig.add_subplot(311)\n\t\tax2 = fig.add_subplot(312)\n\t\tif auto_aspect:\n\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), aspect=\"auto\", interpolation=\"none\")",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\tfig",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\tfig = plt.figure(figsize=(10, 8))\n\t# Set common labels\n\tfig.text(0.5, 0.18, title, horizontalalignment=\"center\", fontsize=16)\n\t#target spectrogram subplot\n\tif target_spectrogram is not None:\n\t\tax1 = fig.add_subplot(311)\n\t\tax2 = fig.add_subplot(312)\n\t\tif auto_aspect:\n\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), aspect=\"auto\", interpolation=\"none\")\n\t\telse:",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\tax1",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\tax1 = fig.add_subplot(311)\n\t\tax2 = fig.add_subplot(312)\n\t\tif auto_aspect:\n\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), aspect=\"auto\", interpolation=\"none\")\n\t\telse:\n\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), interpolation=\"none\")\n\t\tax1.set_title(\"Target Mel-Spectrogram\")\n\t\tfig.colorbar(mappable=im, shrink=0.65, orientation=\"horizontal\", ax=ax1)\n\t\tax2.set_title(\"Predicted Mel-Spectrogram\")\n\telse:",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\tax2",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\tax2 = fig.add_subplot(312)\n\t\tif auto_aspect:\n\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), aspect=\"auto\", interpolation=\"none\")\n\t\telse:\n\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), interpolation=\"none\")\n\t\tax1.set_title(\"Target Mel-Spectrogram\")\n\t\tfig.colorbar(mappable=im, shrink=0.65, orientation=\"horizontal\", ax=ax1)\n\t\tax2.set_title(\"Predicted Mel-Spectrogram\")\n\telse:\n\t\tax2 = fig.add_subplot(211)",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\t\tim",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), aspect=\"auto\", interpolation=\"none\")\n\t\telse:\n\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), interpolation=\"none\")\n\t\tax1.set_title(\"Target Mel-Spectrogram\")\n\t\tfig.colorbar(mappable=im, shrink=0.65, orientation=\"horizontal\", ax=ax1)\n\t\tax2.set_title(\"Predicted Mel-Spectrogram\")\n\telse:\n\t\tax2 = fig.add_subplot(211)\n\tif auto_aspect:\n\t\tim = ax2.imshow(np.rot90(pred_spectrogram), aspect=\"auto\", interpolation=\"none\")",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\t\tim",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\t\tim = ax1.imshow(np.rot90(target_spectrogram), interpolation=\"none\")\n\t\tax1.set_title(\"Target Mel-Spectrogram\")\n\t\tfig.colorbar(mappable=im, shrink=0.65, orientation=\"horizontal\", ax=ax1)\n\t\tax2.set_title(\"Predicted Mel-Spectrogram\")\n\telse:\n\t\tax2 = fig.add_subplot(211)\n\tif auto_aspect:\n\t\tim = ax2.imshow(np.rot90(pred_spectrogram), aspect=\"auto\", interpolation=\"none\")\n\telse:\n\t\tim = ax2.imshow(np.rot90(pred_spectrogram), interpolation=\"none\")",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\tax2",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\tax2 = fig.add_subplot(211)\n\tif auto_aspect:\n\t\tim = ax2.imshow(np.rot90(pred_spectrogram), aspect=\"auto\", interpolation=\"none\")\n\telse:\n\t\tim = ax2.imshow(np.rot90(pred_spectrogram), interpolation=\"none\")\n\tfig.colorbar(mappable=im, shrink=0.65, orientation=\"horizontal\", ax=ax2)\n\tplt.tight_layout()\n\tplt.savefig(path, format=\"png\")\n\tplt.close()",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\tim",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\tim = ax2.imshow(np.rot90(pred_spectrogram), aspect=\"auto\", interpolation=\"none\")\n\telse:\n\t\tim = ax2.imshow(np.rot90(pred_spectrogram), interpolation=\"none\")\n\tfig.colorbar(mappable=im, shrink=0.65, orientation=\"horizontal\", ax=ax2)\n\tplt.tight_layout()\n\tplt.savefig(path, format=\"png\")\n\tplt.close()",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "\t\tim",
        "kind": 5,
        "importPath": "synthesizer.utils.plot",
        "description": "synthesizer.utils.plot",
        "peekOfCode": "\t\tim = ax2.imshow(np.rot90(pred_spectrogram), interpolation=\"none\")\n\tfig.colorbar(mappable=im, shrink=0.65, orientation=\"horizontal\", ax=ax2)\n\tplt.tight_layout()\n\tplt.savefig(path, format=\"png\")\n\tplt.close()",
        "detail": "synthesizer.utils.plot",
        "documentation": {}
    },
    {
        "label": "_characters",
        "kind": 5,
        "importPath": "synthesizer.utils.symbols",
        "description": "synthesizer.utils.symbols",
        "peekOfCode": "_characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!\\'\\\"(),-.:;? \"\n# Prepend \"@\" to ARPAbet symbols to ensure uniqueness (some are the same as uppercase letters):\n#_arpabet = [\"@' + s for s in cmudict.valid_symbols]\n# Export all symbols:\nsymbols = [_pad, _eos] + list(_characters) #+ _arpabet",
        "detail": "synthesizer.utils.symbols",
        "documentation": {}
    },
    {
        "label": "#_arpabet",
        "kind": 5,
        "importPath": "synthesizer.utils.symbols",
        "description": "synthesizer.utils.symbols",
        "peekOfCode": "#_arpabet = [\"@' + s for s in cmudict.valid_symbols]\n# Export all symbols:\nsymbols = [_pad, _eos] + list(_characters) #+ _arpabet",
        "detail": "synthesizer.utils.symbols",
        "documentation": {}
    },
    {
        "label": "symbols",
        "kind": 5,
        "importPath": "synthesizer.utils.symbols",
        "description": "synthesizer.utils.symbols",
        "peekOfCode": "symbols = [_pad, _eos] + list(_characters) #+ _arpabet",
        "detail": "synthesizer.utils.symbols",
        "documentation": {}
    },
    {
        "label": "text_to_sequence",
        "kind": 2,
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "peekOfCode": "def text_to_sequence(text, cleaner_names):\n  \"\"\"Converts a string of text to a sequence of IDs corresponding to the symbols in the text.\n    The text can optionally have ARPAbet sequences enclosed in curly braces embedded\n    in it. For example, \"Turn left on {HH AW1 S S T AH0 N} Street.\"\n    Args:\n      text: string to convert to a sequence\n      cleaner_names: names of the cleaner functions to run the text through\n    Returns:\n      List of integers corresponding to the symbols in the text\n  \"\"\"",
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "sequence_to_text",
        "kind": 2,
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "peekOfCode": "def sequence_to_text(sequence):\n  \"\"\"Converts a sequence of IDs back to a string\"\"\"\n  result = \"\"\n  for symbol_id in sequence:\n    if symbol_id in _id_to_symbol:\n      s = _id_to_symbol[symbol_id]\n      # Enclose ARPAbet back in curly braces:\n      if len(s) > 1 and s[0] == \"@\":\n        s = \"{%s}\" % s[1:]\n      result += s",
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "_symbol_to_id",
        "kind": 5,
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "peekOfCode": "_symbol_to_id = {s: i for i, s in enumerate(symbols)}\n_id_to_symbol = {i: s for i, s in enumerate(symbols)}\n# Regular expression matching text enclosed in curly braces:\n_curly_re = re.compile(r\"(.*?)\\{(.+?)\\}(.*)\")\ndef text_to_sequence(text, cleaner_names):\n  \"\"\"Converts a string of text to a sequence of IDs corresponding to the symbols in the text.\n    The text can optionally have ARPAbet sequences enclosed in curly braces embedded\n    in it. For example, \"Turn left on {HH AW1 S S T AH0 N} Street.\"\n    Args:\n      text: string to convert to a sequence",
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "_id_to_symbol",
        "kind": 5,
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "peekOfCode": "_id_to_symbol = {i: s for i, s in enumerate(symbols)}\n# Regular expression matching text enclosed in curly braces:\n_curly_re = re.compile(r\"(.*?)\\{(.+?)\\}(.*)\")\ndef text_to_sequence(text, cleaner_names):\n  \"\"\"Converts a string of text to a sequence of IDs corresponding to the symbols in the text.\n    The text can optionally have ARPAbet sequences enclosed in curly braces embedded\n    in it. For example, \"Turn left on {HH AW1 S S T AH0 N} Street.\"\n    Args:\n      text: string to convert to a sequence\n      cleaner_names: names of the cleaner functions to run the text through",
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "_curly_re",
        "kind": 5,
        "importPath": "synthesizer.utils.text",
        "description": "synthesizer.utils.text",
        "peekOfCode": "_curly_re = re.compile(r\"(.*?)\\{(.+?)\\}(.*)\")\ndef text_to_sequence(text, cleaner_names):\n  \"\"\"Converts a string of text to a sequence of IDs corresponding to the symbols in the text.\n    The text can optionally have ARPAbet sequences enclosed in curly braces embedded\n    in it. For example, \"Turn left on {HH AW1 S S T AH0 N} Street.\"\n    Args:\n      text: string to convert to a sequence\n      cleaner_names: names of the cleaner functions to run the text through\n    Returns:\n      List of integers corresponding to the symbols in the text",
        "detail": "synthesizer.utils.text",
        "documentation": {}
    },
    {
        "label": "CMUDict",
        "kind": 6,
        "importPath": "synthesizer.utils._cmudict",
        "description": "synthesizer.utils._cmudict",
        "peekOfCode": "class CMUDict:\n  \"\"\"Thin wrapper around CMUDict data. http://www.speech.cs.cmu.edu/cgi-bin/cmudict\"\"\"\n  def __init__(self, file_or_path, keep_ambiguous=True):\n    if isinstance(file_or_path, str):\n      with open(file_or_path, encoding=\"latin-1\") as f:\n        entries = _parse_cmudict(f)\n    else:\n      entries = _parse_cmudict(file_or_path)\n    if not keep_ambiguous:\n      entries = {word: pron for word, pron in entries.items() if len(pron) == 1}",
        "detail": "synthesizer.utils._cmudict",
        "documentation": {}
    },
    {
        "label": "valid_symbols",
        "kind": 5,
        "importPath": "synthesizer.utils._cmudict",
        "description": "synthesizer.utils._cmudict",
        "peekOfCode": "valid_symbols = [\n  \"AA\", \"AA0\", \"AA1\", \"AA2\", \"AE\", \"AE0\", \"AE1\", \"AE2\", \"AH\", \"AH0\", \"AH1\", \"AH2\",\n  \"AO\", \"AO0\", \"AO1\", \"AO2\", \"AW\", \"AW0\", \"AW1\", \"AW2\", \"AY\", \"AY0\", \"AY1\", \"AY2\",\n  \"B\", \"CH\", \"D\", \"DH\", \"EH\", \"EH0\", \"EH1\", \"EH2\", \"ER\", \"ER0\", \"ER1\", \"ER2\", \"EY\",\n  \"EY0\", \"EY1\", \"EY2\", \"F\", \"G\", \"HH\", \"IH\", \"IH0\", \"IH1\", \"IH2\", \"IY\", \"IY0\", \"IY1\",\n  \"IY2\", \"JH\", \"K\", \"L\", \"M\", \"N\", \"NG\", \"OW\", \"OW0\", \"OW1\", \"OW2\", \"OY\", \"OY0\",\n  \"OY1\", \"OY2\", \"P\", \"R\", \"S\", \"SH\", \"T\", \"TH\", \"UH\", \"UH0\", \"UH1\", \"UH2\", \"UW\",\n  \"UW0\", \"UW1\", \"UW2\", \"V\", \"W\", \"Y\", \"Z\", \"ZH\"\n]\n_valid_symbol_set = set(valid_symbols)",
        "detail": "synthesizer.utils._cmudict",
        "documentation": {}
    },
    {
        "label": "_valid_symbol_set",
        "kind": 5,
        "importPath": "synthesizer.utils._cmudict",
        "description": "synthesizer.utils._cmudict",
        "peekOfCode": "_valid_symbol_set = set(valid_symbols)\nclass CMUDict:\n  \"\"\"Thin wrapper around CMUDict data. http://www.speech.cs.cmu.edu/cgi-bin/cmudict\"\"\"\n  def __init__(self, file_or_path, keep_ambiguous=True):\n    if isinstance(file_or_path, str):\n      with open(file_or_path, encoding=\"latin-1\") as f:\n        entries = _parse_cmudict(f)\n    else:\n      entries = _parse_cmudict(file_or_path)\n    if not keep_ambiguous:",
        "detail": "synthesizer.utils._cmudict",
        "documentation": {}
    },
    {
        "label": "_alt_re",
        "kind": 5,
        "importPath": "synthesizer.utils._cmudict",
        "description": "synthesizer.utils._cmudict",
        "peekOfCode": "_alt_re = re.compile(r\"\\([0-9]+\\)\")\ndef _parse_cmudict(file):\n  cmudict = {}\n  for line in file:\n    if len(line) and (line[0] >= \"A\" and line[0] <= \"Z\" or line[0] == \"'\"):\n      parts = line.split(\"  \")\n      word = re.sub(_alt_re, \"\", parts[0])\n      pronunciation = _get_pronunciation(parts[1])\n      if pronunciation:\n        if word in cmudict:",
        "detail": "synthesizer.utils._cmudict",
        "documentation": {}
    },
    {
        "label": "load_wav",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def load_wav(path, sr):\n    return librosa.core.load(path, sr=sr)[0]\ndef save_wav(wav, path, sr):\n    wav *= 32767 / max(0.01, np.max(np.abs(wav)))\n    #proposed by @dsmiller\n    wavfile.write(path, sr, wav.astype(np.int16))\ndef save_wavenet_wav(wav, path, sr):\n    librosa.output.write_wav(path, wav, sr=sr)\ndef preemphasis(wav, k, preemphasize=True):\n    if preemphasize:",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "save_wav",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def save_wav(wav, path, sr):\n    wav *= 32767 / max(0.01, np.max(np.abs(wav)))\n    #proposed by @dsmiller\n    wavfile.write(path, sr, wav.astype(np.int16))\ndef save_wavenet_wav(wav, path, sr):\n    librosa.output.write_wav(path, wav, sr=sr)\ndef preemphasis(wav, k, preemphasize=True):\n    if preemphasize:\n        return signal.lfilter([1, -k], [1], wav)\n    return wav",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "save_wavenet_wav",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def save_wavenet_wav(wav, path, sr):\n    librosa.output.write_wav(path, wav, sr=sr)\ndef preemphasis(wav, k, preemphasize=True):\n    if preemphasize:\n        return signal.lfilter([1, -k], [1], wav)\n    return wav\ndef inv_preemphasis(wav, k, inv_preemphasize=True):\n    if inv_preemphasize:\n        return signal.lfilter([1], [1, -k], wav)\n    return wav",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "preemphasis",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def preemphasis(wav, k, preemphasize=True):\n    if preemphasize:\n        return signal.lfilter([1, -k], [1], wav)\n    return wav\ndef inv_preemphasis(wav, k, inv_preemphasize=True):\n    if inv_preemphasize:\n        return signal.lfilter([1], [1, -k], wav)\n    return wav\n#From https://github.com/r9y9/wavenet_vocoder/blob/master/audio.py\ndef start_and_end_indices(quantized, silence_threshold=2):",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "inv_preemphasis",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def inv_preemphasis(wav, k, inv_preemphasize=True):\n    if inv_preemphasize:\n        return signal.lfilter([1], [1, -k], wav)\n    return wav\n#From https://github.com/r9y9/wavenet_vocoder/blob/master/audio.py\ndef start_and_end_indices(quantized, silence_threshold=2):\n    for start in range(quantized.size):\n        if abs(quantized[start] - 127) > silence_threshold:\n            break\n    for end in range(quantized.size - 1, 1, -1):",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "start_and_end_indices",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def start_and_end_indices(quantized, silence_threshold=2):\n    for start in range(quantized.size):\n        if abs(quantized[start] - 127) > silence_threshold:\n            break\n    for end in range(quantized.size - 1, 1, -1):\n        if abs(quantized[end] - 127) > silence_threshold:\n            break\n    assert abs(quantized[start] - 127) > silence_threshold\n    assert abs(quantized[end] - 127) > silence_threshold\n    return start, end",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "get_hop_size",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def get_hop_size(hparams):\n    hop_size = hparams.hop_size\n    if hop_size is None:\n        assert hparams.frame_shift_ms is not None\n        hop_size = int(hparams.frame_shift_ms / 1000 * hparams.sample_rate)\n    return hop_size\ndef linearspectrogram(wav, hparams):\n    D = _stft(preemphasis(wav, hparams.preemphasis, hparams.preemphasize), hparams)\n    S = _amp_to_db(np.abs(D), hparams) - hparams.ref_level_db\n    if hparams.signal_normalization:",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "linearspectrogram",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def linearspectrogram(wav, hparams):\n    D = _stft(preemphasis(wav, hparams.preemphasis, hparams.preemphasize), hparams)\n    S = _amp_to_db(np.abs(D), hparams) - hparams.ref_level_db\n    if hparams.signal_normalization:\n        return _normalize(S, hparams)\n    return S\ndef melspectrogram(wav, hparams):\n    D = _stft(preemphasis(wav, hparams.preemphasis, hparams.preemphasize), hparams)\n    S = _amp_to_db(_linear_to_mel(np.abs(D), hparams), hparams) - hparams.ref_level_db\n    if hparams.signal_normalization:",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "melspectrogram",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def melspectrogram(wav, hparams):\n    D = _stft(preemphasis(wav, hparams.preemphasis, hparams.preemphasize), hparams)\n    S = _amp_to_db(_linear_to_mel(np.abs(D), hparams), hparams) - hparams.ref_level_db\n    if hparams.signal_normalization:\n        return _normalize(S, hparams)\n    return S\ndef inv_linear_spectrogram(linear_spectrogram, hparams):\n    \"\"\"Converts linear spectrogram to waveform using librosa\"\"\"\n    if hparams.signal_normalization:\n        D = _denormalize(linear_spectrogram, hparams)",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "inv_linear_spectrogram",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def inv_linear_spectrogram(linear_spectrogram, hparams):\n    \"\"\"Converts linear spectrogram to waveform using librosa\"\"\"\n    if hparams.signal_normalization:\n        D = _denormalize(linear_spectrogram, hparams)\n    else:\n        D = linear_spectrogram\n    S = _db_to_amp(D + hparams.ref_level_db) #Convert back to linear\n    if hparams.use_lws:\n        processor = _lws_processor(hparams)\n        D = processor.run_lws(S.astype(np.float64).T ** hparams.power)",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "inv_mel_spectrogram",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def inv_mel_spectrogram(mel_spectrogram, hparams):\n    \"\"\"Converts mel spectrogram to waveform using librosa\"\"\"\n    if hparams.signal_normalization:\n        D = _denormalize(mel_spectrogram, hparams)\n    else:\n        D = mel_spectrogram\n    S = _mel_to_linear(_db_to_amp(D + hparams.ref_level_db), hparams)  # Convert back to linear\n    if hparams.use_lws:\n        processor = _lws_processor(hparams)\n        D = processor.run_lws(S.astype(np.float64).T ** hparams.power)",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "num_frames",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def num_frames(length, fsize, fshift):\n    \"\"\"Compute number of time frames of spectrogram\n    \"\"\"\n    pad = (fsize - fshift)\n    if length % fshift == 0:\n        M = (length + pad * 2 - fsize) // fshift + 1\n    else:\n        M = (length + pad * 2 - fsize) // fshift + 2\n    return M\ndef pad_lr(x, fsize, fshift):",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "pad_lr",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def pad_lr(x, fsize, fshift):\n    \"\"\"Compute left and right padding\n    \"\"\"\n    M = num_frames(len(x), fsize, fshift)\n    pad = (fsize - fshift)\n    T = len(x) + 2 * pad\n    r = (M - 1) * fshift + fsize - T\n    return pad, pad + r\n##########################################################\n#Librosa correct padding",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "librosa_pad_lr",
        "kind": 2,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "def librosa_pad_lr(x, fsize, fshift):\n    return 0, (x.shape[0] // fshift + 1) * fshift - x.shape[0]\n# Conversions\n_mel_basis = None\n_inv_mel_basis = None\ndef _linear_to_mel(spectogram, hparams):\n    global _mel_basis\n    if _mel_basis is None:\n        _mel_basis = _build_mel_basis(hparams)\n    return np.dot(_mel_basis, spectogram)",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "_mel_basis",
        "kind": 5,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "_mel_basis = None\n_inv_mel_basis = None\ndef _linear_to_mel(spectogram, hparams):\n    global _mel_basis\n    if _mel_basis is None:\n        _mel_basis = _build_mel_basis(hparams)\n    return np.dot(_mel_basis, spectogram)\ndef _mel_to_linear(mel_spectrogram, hparams):\n    global _inv_mel_basis\n    if _inv_mel_basis is None:",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "_inv_mel_basis",
        "kind": 5,
        "importPath": "synthesizer.audio",
        "description": "synthesizer.audio",
        "peekOfCode": "_inv_mel_basis = None\ndef _linear_to_mel(spectogram, hparams):\n    global _mel_basis\n    if _mel_basis is None:\n        _mel_basis = _build_mel_basis(hparams)\n    return np.dot(_mel_basis, spectogram)\ndef _mel_to_linear(mel_spectrogram, hparams):\n    global _inv_mel_basis\n    if _inv_mel_basis is None:\n        _inv_mel_basis = np.linalg.pinv(_build_mel_basis(hparams))",
        "detail": "synthesizer.audio",
        "documentation": {}
    },
    {
        "label": "Feeder",
        "kind": 6,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "class Feeder:\n\t\"\"\"\n\t\tFeeds batches of data into queue on a background thread.\n\t\"\"\"\n\tdef __init__(self, coordinator, metadata_filename, hparams):\n\t\tsuper(Feeder, self).__init__()\n\t\tself._coord = coordinator\n\t\tself._hparams = hparams\n\t\tself._cleaner_names = [x.strip() for x in hparams.cleaners.split(\",\")]\n\t\tself._train_offset = 0",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "_batches_per_group",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "_batches_per_group = 64\nclass Feeder:\n\t\"\"\"\n\t\tFeeds batches of data into queue on a background thread.\n\t\"\"\"\n\tdef __init__(self, coordinator, metadata_filename, hparams):\n\t\tsuper(Feeder, self).__init__()\n\t\tself._coord = coordinator\n\t\tself._hparams = hparams\n\t\tself._cleaner_names = [x.strip() for x in hparams.cleaners.split(\",\")]",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._coord",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._coord = coordinator\n\t\tself._hparams = hparams\n\t\tself._cleaner_names = [x.strip() for x in hparams.cleaners.split(\",\")]\n\t\tself._train_offset = 0\n\t\tself._test_offset = 0\n\t\t# Load metadata\n\t\tself._mel_dir = os.path.join(os.path.dirname(metadata_filename), \"mels\")\n\t\tself._embed_dir = os.path.join(os.path.dirname(metadata_filename), \"embeds\")\n\t\twith open(metadata_filename, encoding=\"utf-8\") as f:\n\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._hparams",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._hparams = hparams\n\t\tself._cleaner_names = [x.strip() for x in hparams.cleaners.split(\",\")]\n\t\tself._train_offset = 0\n\t\tself._test_offset = 0\n\t\t# Load metadata\n\t\tself._mel_dir = os.path.join(os.path.dirname(metadata_filename), \"mels\")\n\t\tself._embed_dir = os.path.join(os.path.dirname(metadata_filename), \"embeds\")\n\t\twith open(metadata_filename, encoding=\"utf-8\") as f:\n\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]\n\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._cleaner_names",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._cleaner_names = [x.strip() for x in hparams.cleaners.split(\",\")]\n\t\tself._train_offset = 0\n\t\tself._test_offset = 0\n\t\t# Load metadata\n\t\tself._mel_dir = os.path.join(os.path.dirname(metadata_filename), \"mels\")\n\t\tself._embed_dir = os.path.join(os.path.dirname(metadata_filename), \"embeds\")\n\t\twith open(metadata_filename, encoding=\"utf-8\") as f:\n\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]\n\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate\n\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._train_offset",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._train_offset = 0\n\t\tself._test_offset = 0\n\t\t# Load metadata\n\t\tself._mel_dir = os.path.join(os.path.dirname(metadata_filename), \"mels\")\n\t\tself._embed_dir = os.path.join(os.path.dirname(metadata_filename), \"embeds\")\n\t\twith open(metadata_filename, encoding=\"utf-8\") as f:\n\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]\n\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate\n\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)\n\t\t\tlog(\"Loaded metadata for {} examples ({:.2f} hours)\".format(len(self._metadata), hours))",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._test_offset",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._test_offset = 0\n\t\t# Load metadata\n\t\tself._mel_dir = os.path.join(os.path.dirname(metadata_filename), \"mels\")\n\t\tself._embed_dir = os.path.join(os.path.dirname(metadata_filename), \"embeds\")\n\t\twith open(metadata_filename, encoding=\"utf-8\") as f:\n\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]\n\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate\n\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)\n\t\t\tlog(\"Loaded metadata for {} examples ({:.2f} hours)\".format(len(self._metadata), hours))\n\t\t#Train test split",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._mel_dir",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._mel_dir = os.path.join(os.path.dirname(metadata_filename), \"mels\")\n\t\tself._embed_dir = os.path.join(os.path.dirname(metadata_filename), \"embeds\")\n\t\twith open(metadata_filename, encoding=\"utf-8\") as f:\n\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]\n\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate\n\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)\n\t\t\tlog(\"Loaded metadata for {} examples ({:.2f} hours)\".format(len(self._metadata), hours))\n\t\t#Train test split\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches is not None",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._embed_dir",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._embed_dir = os.path.join(os.path.dirname(metadata_filename), \"embeds\")\n\t\twith open(metadata_filename, encoding=\"utf-8\") as f:\n\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]\n\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate\n\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)\n\t\t\tlog(\"Loaded metadata for {} examples ({:.2f} hours)\".format(len(self._metadata), hours))\n\t\t#Train test split\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches is not None\n\t\ttest_size = (hparams.tacotron_test_size if hparams.tacotron_test_size is not None",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._metadata",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tself._metadata = [line.strip().split(\"|\") for line in f]\n\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate\n\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)\n\t\t\tlog(\"Loaded metadata for {} examples ({:.2f} hours)\".format(len(self._metadata), hours))\n\t\t#Train test split\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches is not None\n\t\ttest_size = (hparams.tacotron_test_size if hparams.tacotron_test_size is not None\n\t\t\telse hparams.tacotron_test_batches * hparams.tacotron_batch_size)\n\t\tindices = np.arange(len(self._metadata))",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tframe_shift_ms",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tframe_shift_ms = hparams.hop_size / hparams.sample_rate\n\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)\n\t\t\tlog(\"Loaded metadata for {} examples ({:.2f} hours)\".format(len(self._metadata), hours))\n\t\t#Train test split\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches is not None\n\t\ttest_size = (hparams.tacotron_test_size if hparams.tacotron_test_size is not None\n\t\t\telse hparams.tacotron_test_batches * hparams.tacotron_batch_size)\n\t\tindices = np.arange(len(self._metadata))\n\t\ttrain_indices, test_indices = train_test_split(indices,",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\thours",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\thours = sum([int(x[4]) for x in self._metadata]) * frame_shift_ms / (3600)\n\t\t\tlog(\"Loaded metadata for {} examples ({:.2f} hours)\".format(len(self._metadata), hours))\n\t\t#Train test split\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches is not None\n\t\ttest_size = (hparams.tacotron_test_size if hparams.tacotron_test_size is not None\n\t\t\telse hparams.tacotron_test_batches * hparams.tacotron_batch_size)\n\t\tindices = np.arange(len(self._metadata))\n\t\ttrain_indices, test_indices = train_test_split(indices,\n\t\t\ttest_size=test_size, random_state=hparams.tacotron_data_random_state)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttest_size",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttest_size = (hparams.tacotron_test_size if hparams.tacotron_test_size is not None\n\t\t\telse hparams.tacotron_test_batches * hparams.tacotron_batch_size)\n\t\tindices = np.arange(len(self._metadata))\n\t\ttrain_indices, test_indices = train_test_split(indices,\n\t\t\ttest_size=test_size, random_state=hparams.tacotron_data_random_state)\n\t\t#Make sure test_indices is a multiple of batch_size else round up\n\t\tlen_test_indices = self._round_down(len(test_indices), hparams.tacotron_batch_size)\n\t\textra_test = test_indices[len_test_indices:]\n\t\ttest_indices = test_indices[:len_test_indices]\n\t\ttrain_indices = np.concatenate([train_indices, extra_test])",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tindices",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tindices = np.arange(len(self._metadata))\n\t\ttrain_indices, test_indices = train_test_split(indices,\n\t\t\ttest_size=test_size, random_state=hparams.tacotron_data_random_state)\n\t\t#Make sure test_indices is a multiple of batch_size else round up\n\t\tlen_test_indices = self._round_down(len(test_indices), hparams.tacotron_batch_size)\n\t\textra_test = test_indices[len_test_indices:]\n\t\ttest_indices = test_indices[:len_test_indices]\n\t\ttrain_indices = np.concatenate([train_indices, extra_test])\n\t\tself._train_meta = list(np.array(self._metadata)[train_indices])\n\t\tself._test_meta = list(np.array(self._metadata)[test_indices])",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tlen_test_indices",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tlen_test_indices = self._round_down(len(test_indices), hparams.tacotron_batch_size)\n\t\textra_test = test_indices[len_test_indices:]\n\t\ttest_indices = test_indices[:len_test_indices]\n\t\ttrain_indices = np.concatenate([train_indices, extra_test])\n\t\tself._train_meta = list(np.array(self._metadata)[train_indices])\n\t\tself._test_meta = list(np.array(self._metadata)[test_indices])\n\t\tself.test_steps = len(self._test_meta) // hparams.tacotron_batch_size\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches == self.test_steps\n\t\t#pad input sequences with the <pad_token> 0 ( _ )",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\textra_test",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\textra_test = test_indices[len_test_indices:]\n\t\ttest_indices = test_indices[:len_test_indices]\n\t\ttrain_indices = np.concatenate([train_indices, extra_test])\n\t\tself._train_meta = list(np.array(self._metadata)[train_indices])\n\t\tself._test_meta = list(np.array(self._metadata)[test_indices])\n\t\tself.test_steps = len(self._test_meta) // hparams.tacotron_batch_size\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches == self.test_steps\n\t\t#pad input sequences with the <pad_token> 0 ( _ )\n\t\tself._pad = 0",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttest_indices",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttest_indices = test_indices[:len_test_indices]\n\t\ttrain_indices = np.concatenate([train_indices, extra_test])\n\t\tself._train_meta = list(np.array(self._metadata)[train_indices])\n\t\tself._test_meta = list(np.array(self._metadata)[test_indices])\n\t\tself.test_steps = len(self._test_meta) // hparams.tacotron_batch_size\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches == self.test_steps\n\t\t#pad input sequences with the <pad_token> 0 ( _ )\n\t\tself._pad = 0\n\t\t#explicitely setting the padding to a value that doesn\"t originally exist in the spectogram",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttrain_indices",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttrain_indices = np.concatenate([train_indices, extra_test])\n\t\tself._train_meta = list(np.array(self._metadata)[train_indices])\n\t\tself._test_meta = list(np.array(self._metadata)[test_indices])\n\t\tself.test_steps = len(self._test_meta) // hparams.tacotron_batch_size\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches == self.test_steps\n\t\t#pad input sequences with the <pad_token> 0 ( _ )\n\t\tself._pad = 0\n\t\t#explicitely setting the padding to a value that doesn\"t originally exist in the spectogram\n\t\t#to avoid any possible conflicts, without affecting the output range of the model too much",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._train_meta",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._train_meta = list(np.array(self._metadata)[train_indices])\n\t\tself._test_meta = list(np.array(self._metadata)[test_indices])\n\t\tself.test_steps = len(self._test_meta) // hparams.tacotron_batch_size\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches == self.test_steps\n\t\t#pad input sequences with the <pad_token> 0 ( _ )\n\t\tself._pad = 0\n\t\t#explicitely setting the padding to a value that doesn\"t originally exist in the spectogram\n\t\t#to avoid any possible conflicts, without affecting the output range of the model too much\n\t\tif hparams.symmetric_mels:",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._test_meta",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._test_meta = list(np.array(self._metadata)[test_indices])\n\t\tself.test_steps = len(self._test_meta) // hparams.tacotron_batch_size\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches == self.test_steps\n\t\t#pad input sequences with the <pad_token> 0 ( _ )\n\t\tself._pad = 0\n\t\t#explicitely setting the padding to a value that doesn\"t originally exist in the spectogram\n\t\t#to avoid any possible conflicts, without affecting the output range of the model too much\n\t\tif hparams.symmetric_mels:\n\t\t\tself._target_pad = -hparams.max_abs_value",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself.test_steps",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself.test_steps = len(self._test_meta) // hparams.tacotron_batch_size\n\t\tif hparams.tacotron_test_size is None:\n\t\t\tassert hparams.tacotron_test_batches == self.test_steps\n\t\t#pad input sequences with the <pad_token> 0 ( _ )\n\t\tself._pad = 0\n\t\t#explicitely setting the padding to a value that doesn\"t originally exist in the spectogram\n\t\t#to avoid any possible conflicts, without affecting the output range of the model too much\n\t\tif hparams.symmetric_mels:\n\t\t\tself._target_pad = -hparams.max_abs_value\n\t\telse:",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._pad",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._pad = 0\n\t\t#explicitely setting the padding to a value that doesn\"t originally exist in the spectogram\n\t\t#to avoid any possible conflicts, without affecting the output range of the model too much\n\t\tif hparams.symmetric_mels:\n\t\t\tself._target_pad = -hparams.max_abs_value\n\t\telse:\n\t\t\tself._target_pad = 0.\n\t\t#Mark finished sequences with 1s\n\t\tself._token_pad = 1.\n\t\twith tf.device(\"/cpu:0\"):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._target_pad",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tself._target_pad = -hparams.max_abs_value\n\t\telse:\n\t\t\tself._target_pad = 0.\n\t\t#Mark finished sequences with 1s\n\t\tself._token_pad = 1.\n\t\twith tf.device(\"/cpu:0\"):\n\t\t\t# Create placeholders for inputs and targets. Don\"t specify batch size because we want\n\t\t\t# to be able to feed different batch sizes at eval time.\n\t\t\tself._placeholders = [\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, None), name=\"inputs\"),",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._target_pad",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tself._target_pad = 0.\n\t\t#Mark finished sequences with 1s\n\t\tself._token_pad = 1.\n\t\twith tf.device(\"/cpu:0\"):\n\t\t\t# Create placeholders for inputs and targets. Don\"t specify batch size because we want\n\t\t\t# to be able to feed different batch sizes at eval time.\n\t\t\tself._placeholders = [\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, None), name=\"inputs\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, ), name=\"input_lengths\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.float32, shape=(None, None, hparams.num_mels), ",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._token_pad",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._token_pad = 1.\n\t\twith tf.device(\"/cpu:0\"):\n\t\t\t# Create placeholders for inputs and targets. Don\"t specify batch size because we want\n\t\t\t# to be able to feed different batch sizes at eval time.\n\t\t\tself._placeholders = [\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, None), name=\"inputs\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, ), name=\"input_lengths\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.float32, shape=(None, None, hparams.num_mels), \n\t\t\t\t\t\t\t   name=\"mel_targets\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.float32, shape=(None, None), name=\"token_targets\"),",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._placeholders",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tself._placeholders = [\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, None), name=\"inputs\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, ), name=\"input_lengths\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.float32, shape=(None, None, hparams.num_mels), \n\t\t\t\t\t\t\t   name=\"mel_targets\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.float32, shape=(None, None), name=\"token_targets\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(None, ), name=\"targets_lengths\"),\n\t\t\t\ttf.compat.v1.placeholder(tf.int32, shape=(hparams.tacotron_num_gpus, None), \n\t\t\t\t\t\t\t   name=\"split_infos\"),\n\t\t\t\t# SV2TTS",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueue",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tqueue = tf.queue.FIFOQueue(8, [tf.int32, tf.int32, tf.float32, tf.float32, \n\t\t\t\t\t\t\t\t\t tf.int32, tf.int32, tf.float32], name=\"input_queue\")\n\t\t\tself._enqueue_op = queue.enqueue(self._placeholders)\n\t\t\tself.inputs, self.input_lengths, self.mel_targets, self.token_targets, \\\n\t\t\t\tself.targets_lengths, self.split_infos, self.speaker_embeddings = queue.dequeue()\n\t\t\tself.inputs.set_shape(self._placeholders[0].shape)\n\t\t\tself.input_lengths.set_shape(self._placeholders[1].shape)\n\t\t\tself.mel_targets.set_shape(self._placeholders[2].shape)\n\t\t\tself.token_targets.set_shape(self._placeholders[3].shape)\n\t\t\tself.targets_lengths.set_shape(self._placeholders[4].shape)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._enqueue_op",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tself._enqueue_op = queue.enqueue(self._placeholders)\n\t\t\tself.inputs, self.input_lengths, self.mel_targets, self.token_targets, \\\n\t\t\t\tself.targets_lengths, self.split_infos, self.speaker_embeddings = queue.dequeue()\n\t\t\tself.inputs.set_shape(self._placeholders[0].shape)\n\t\t\tself.input_lengths.set_shape(self._placeholders[1].shape)\n\t\t\tself.mel_targets.set_shape(self._placeholders[2].shape)\n\t\t\tself.token_targets.set_shape(self._placeholders[3].shape)\n\t\t\tself.targets_lengths.set_shape(self._placeholders[4].shape)\n\t\t\tself.split_infos.set_shape(self._placeholders[5].shape)\n\t\t\tself.speaker_embeddings.set_shape(self._placeholders[6].shape)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\teval_queue",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\teval_queue = tf.queue.FIFOQueue(1, [tf.int32, tf.int32, tf.float32, tf.float32,  \n\t\t\t\t\t\t\t\t\t\t  tf.int32, tf.int32, tf.float32], name=\"eval_queue\")\n\t\t\tself._eval_enqueue_op = eval_queue.enqueue(self._placeholders)\n\t\t\tself.eval_inputs, self.eval_input_lengths, self.eval_mel_targets, \\\n\t\t\t\tself.eval_token_targets, self.eval_targets_lengths, \\\n\t\t\t\tself.eval_split_infos, self.eval_speaker_embeddings = eval_queue.dequeue()\n\t\t\tself.eval_inputs.set_shape(self._placeholders[0].shape)\n\t\t\tself.eval_input_lengths.set_shape(self._placeholders[1].shape)\n\t\t\tself.eval_mel_targets.set_shape(self._placeholders[2].shape)\n\t\t\tself.eval_token_targets.set_shape(self._placeholders[3].shape)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._eval_enqueue_op",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tself._eval_enqueue_op = eval_queue.enqueue(self._placeholders)\n\t\t\tself.eval_inputs, self.eval_input_lengths, self.eval_mel_targets, \\\n\t\t\t\tself.eval_token_targets, self.eval_targets_lengths, \\\n\t\t\t\tself.eval_split_infos, self.eval_speaker_embeddings = eval_queue.dequeue()\n\t\t\tself.eval_inputs.set_shape(self._placeholders[0].shape)\n\t\t\tself.eval_input_lengths.set_shape(self._placeholders[1].shape)\n\t\t\tself.eval_mel_targets.set_shape(self._placeholders[2].shape)\n\t\t\tself.eval_token_targets.set_shape(self._placeholders[3].shape)\n\t\t\tself.eval_targets_lengths.set_shape(self._placeholders[4].shape)\n\t\t\tself.eval_split_infos.set_shape(self._placeholders[5].shape)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tself._session",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tself._session = session\n\t\tthread = threading.Thread(name=\"background\", target=self._enqueue_next_train_group)\n\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\t\tthread = threading.Thread(name=\"background\", target=self._enqueue_next_test_group)\n\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\tdef _get_test_groups(self):\n\t\tmeta = self._test_meta[self._test_offset]\n\t\tself._test_offset += 1",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tthread",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tthread = threading.Thread(name=\"background\", target=self._enqueue_next_train_group)\n\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\t\tthread = threading.Thread(name=\"background\", target=self._enqueue_next_test_group)\n\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\tdef _get_test_groups(self):\n\t\tmeta = self._test_meta[self._test_offset]\n\t\tself._test_offset += 1\n\t\ttext = meta[5]",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tthread.daemon",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\t\tthread = threading.Thread(name=\"background\", target=self._enqueue_next_test_group)\n\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\tdef _get_test_groups(self):\n\t\tmeta = self._test_meta[self._test_offset]\n\t\tself._test_offset += 1\n\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tthread",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tthread = threading.Thread(name=\"background\", target=self._enqueue_next_test_group)\n\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\tdef _get_test_groups(self):\n\t\tmeta = self._test_meta[self._test_offset]\n\t\tself._test_offset += 1\n\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tthread.daemon",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tthread.daemon = True #Thread will close when parent quits\n\t\tthread.start()\n\tdef _get_test_groups(self):\n\t\tmeta = self._test_meta[self._test_offset]\n\t\tself._test_offset += 1\n\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmeta",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmeta = self._test_meta[self._test_offset]\n\t\tself._test_offset += 1\n\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef make_test_batches(self):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttext",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef make_test_batches(self):\n\t\tstart = time.time()\n\t\t# Read a group of examples",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tinput_data",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef make_test_batches(self):\n\t\tstart = time.time()\n\t\t# Read a group of examples\n\t\tn = self._hparams.tacotron_batch_size",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmel_target",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef make_test_batches(self):\n\t\tstart = time.time()\n\t\t# Read a group of examples\n\t\tn = self._hparams.tacotron_batch_size\n\t\tr = self._hparams.outputs_per_step",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttoken_target",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef make_test_batches(self):\n\t\tstart = time.time()\n\t\t# Read a group of examples\n\t\tn = self._hparams.tacotron_batch_size\n\t\tr = self._hparams.outputs_per_step\n\t\t#Test on entire test set\n\t\texamples = [self._get_test_groups() for i in range(len(self._test_meta))]",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tembed_target",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef make_test_batches(self):\n\t\tstart = time.time()\n\t\t# Read a group of examples\n\t\tn = self._hparams.tacotron_batch_size\n\t\tr = self._hparams.outputs_per_step\n\t\t#Test on entire test set\n\t\texamples = [self._get_test_groups() for i in range(len(self._test_meta))]\n\t\t# Bucket examples based on similar output sequence length for efficiency",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tstart",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tstart = time.time()\n\t\t# Read a group of examples\n\t\tn = self._hparams.tacotron_batch_size\n\t\tr = self._hparams.outputs_per_step\n\t\t#Test on entire test set\n\t\texamples = [self._get_test_groups() for i in range(len(self._test_meta))]\n\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\texamples.sort(key=lambda x: x[-1])\n\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\tnp.random.shuffle(batches)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tn",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tn = self._hparams.tacotron_batch_size\n\t\tr = self._hparams.outputs_per_step\n\t\t#Test on entire test set\n\t\texamples = [self._get_test_groups() for i in range(len(self._test_meta))]\n\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\texamples.sort(key=lambda x: x[-1])\n\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\tnp.random.shuffle(batches)\n\t\tlog(\"\\nGenerated %d test batches of size %d in %.3f sec\" % (len(batches), n, time.time() - start))\n\t\treturn batches, r",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tr = self._hparams.outputs_per_step\n\t\t#Test on entire test set\n\t\texamples = [self._get_test_groups() for i in range(len(self._test_meta))]\n\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\texamples.sort(key=lambda x: x[-1])\n\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\tnp.random.shuffle(batches)\n\t\tlog(\"\\nGenerated %d test batches of size %d in %.3f sec\" % (len(batches), n, time.time() - start))\n\t\treturn batches, r\n\tdef _enqueue_next_train_group(self):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\texamples",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\texamples = [self._get_test_groups() for i in range(len(self._test_meta))]\n\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\texamples.sort(key=lambda x: x[-1])\n\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\tnp.random.shuffle(batches)\n\t\tlog(\"\\nGenerated %d test batches of size %d in %.3f sec\" % (len(batches), n, time.time() - start))\n\t\treturn batches, r\n\tdef _enqueue_next_train_group(self):\n\t\twhile not self._coord.should_stop():\n\t\t\tstart = time.time()",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tbatches",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\tnp.random.shuffle(batches)\n\t\tlog(\"\\nGenerated %d test batches of size %d in %.3f sec\" % (len(batches), n, time.time() - start))\n\t\treturn batches, r\n\tdef _enqueue_next_train_group(self):\n\t\twhile not self._coord.should_stop():\n\t\t\tstart = time.time()\n\t\t\t# Read a group of examples\n\t\t\tn = self._hparams.tacotron_batch_size\n\t\t\tr = self._hparams.outputs_per_step",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tstart",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tstart = time.time()\n\t\t\t# Read a group of examples\n\t\t\tn = self._hparams.tacotron_batch_size\n\t\t\tr = self._hparams.outputs_per_step\n\t\t\texamples = [self._get_next_example() for i in range(n * _batches_per_group)]\n\t\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\t\texamples.sort(key=lambda x: x[-1])\n\t\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\t\tnp.random.shuffle(batches)\n\t\t\tlog(\"\\nGenerated {} train batches of size {} in {:.3f} sec\".format(len(batches), n, time.time() - start))",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tn",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tn = self._hparams.tacotron_batch_size\n\t\t\tr = self._hparams.outputs_per_step\n\t\t\texamples = [self._get_next_example() for i in range(n * _batches_per_group)]\n\t\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\t\texamples.sort(key=lambda x: x[-1])\n\t\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\t\tnp.random.shuffle(batches)\n\t\t\tlog(\"\\nGenerated {} train batches of size {} in {:.3f} sec\".format(len(batches), n, time.time() - start))\n\t\t\tfor batch in batches:\n\t\t\t\tfeed_dict = dict(zip(self._placeholders, self._prepare_batch(batch, r)))",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tr",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tr = self._hparams.outputs_per_step\n\t\t\texamples = [self._get_next_example() for i in range(n * _batches_per_group)]\n\t\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\t\texamples.sort(key=lambda x: x[-1])\n\t\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\t\tnp.random.shuffle(batches)\n\t\t\tlog(\"\\nGenerated {} train batches of size {} in {:.3f} sec\".format(len(batches), n, time.time() - start))\n\t\t\tfor batch in batches:\n\t\t\t\tfeed_dict = dict(zip(self._placeholders, self._prepare_batch(batch, r)))\n\t\t\t\tself._session.run(self._enqueue_op, feed_dict=feed_dict)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\texamples",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\texamples = [self._get_next_example() for i in range(n * _batches_per_group)]\n\t\t\t# Bucket examples based on similar output sequence length for efficiency\n\t\t\texamples.sort(key=lambda x: x[-1])\n\t\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\t\tnp.random.shuffle(batches)\n\t\t\tlog(\"\\nGenerated {} train batches of size {} in {:.3f} sec\".format(len(batches), n, time.time() - start))\n\t\t\tfor batch in batches:\n\t\t\t\tfeed_dict = dict(zip(self._placeholders, self._prepare_batch(batch, r)))\n\t\t\t\tself._session.run(self._enqueue_op, feed_dict=feed_dict)\n\tdef _enqueue_next_test_group(self):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tbatches",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tbatches = [examples[i: i+n] for i in range(0, len(examples), n)]\n\t\t\tnp.random.shuffle(batches)\n\t\t\tlog(\"\\nGenerated {} train batches of size {} in {:.3f} sec\".format(len(batches), n, time.time() - start))\n\t\t\tfor batch in batches:\n\t\t\t\tfeed_dict = dict(zip(self._placeholders, self._prepare_batch(batch, r)))\n\t\t\t\tself._session.run(self._enqueue_op, feed_dict=feed_dict)\n\tdef _enqueue_next_test_group(self):\n\t\t#Create test batches once and evaluate on them for all test steps\n\t\ttest_batches, r = self.make_test_batches()\n\t\twhile not self._coord.should_stop():",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfeed_dict",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\t\tfeed_dict = dict(zip(self._placeholders, self._prepare_batch(batch, r)))\n\t\t\t\tself._session.run(self._enqueue_op, feed_dict=feed_dict)\n\tdef _enqueue_next_test_group(self):\n\t\t#Create test batches once and evaluate on them for all test steps\n\t\ttest_batches, r = self.make_test_batches()\n\t\twhile not self._coord.should_stop():\n\t\t\tfor batch in test_batches:\n\t\t\t\tfeed_dict = dict(zip(self._placeholders, self._prepare_batch(batch, r)))\n\t\t\t\tself._session.run(self._eval_enqueue_op, feed_dict=feed_dict)\n\tdef _get_next_example(self):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfeed_dict",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\t\tfeed_dict = dict(zip(self._placeholders, self._prepare_batch(batch, r)))\n\t\t\t\tself._session.run(self._eval_enqueue_op, feed_dict=feed_dict)\n\tdef _get_next_example(self):\n\t\t\"\"\"Gets a single example (input, mel_target, token_target, linear_target, mel_length) from_ disk\n\t\t\"\"\"\n\t\tif self._train_offset >= len(self._train_meta):\n\t\t\tself._train_offset = 0\n\t\t\tnp.random.shuffle(self._train_meta)\n\t\tmeta = self._train_meta[self._train_offset]\n\t\tself._train_offset += 1",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._train_offset",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tself._train_offset = 0\n\t\t\tnp.random.shuffle(self._train_meta)\n\t\tmeta = self._train_meta[self._train_offset]\n\t\tself._train_offset += 1\n\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmeta",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmeta = self._train_meta[self._train_offset]\n\t\tself._train_offset += 1\n\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef _prepare_batch(self, batches, outputs_per_step):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttext",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttext = meta[5]\n\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef _prepare_batch(self, batches, outputs_per_step):\n\t\tassert 0 == len(batches) % self._hparams.tacotron_num_gpus\n\t\tsize_per_device = int(len(batches) / self._hparams.tacotron_num_gpus)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tinput_data",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tinput_data = np.asarray(text_to_sequence(text, self._cleaner_names), dtype=np.int32)\n\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef _prepare_batch(self, batches, outputs_per_step):\n\t\tassert 0 == len(batches) % self._hparams.tacotron_num_gpus\n\t\tsize_per_device = int(len(batches) / self._hparams.tacotron_num_gpus)\n\t\tnp.random.shuffle(batches)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmel_target",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmel_target = np.load(os.path.join(self._mel_dir, meta[1]))\n\t\t#Create parallel sequences containing zeros to represent a non finished sequence\n\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef _prepare_batch(self, batches, outputs_per_step):\n\t\tassert 0 == len(batches) % self._hparams.tacotron_num_gpus\n\t\tsize_per_device = int(len(batches) / self._hparams.tacotron_num_gpus)\n\t\tnp.random.shuffle(batches)\n\t\tinputs = None",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttoken_target",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttoken_target = np.asarray([0.] * (len(mel_target) - 1))\n\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef _prepare_batch(self, batches, outputs_per_step):\n\t\tassert 0 == len(batches) % self._hparams.tacotron_num_gpus\n\t\tsize_per_device = int(len(batches) / self._hparams.tacotron_num_gpus)\n\t\tnp.random.shuffle(batches)\n\t\tinputs = None\n\t\tmel_targets = None\n\t\ttoken_targets = None",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tembed_target",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tembed_target = np.load(os.path.join(self._embed_dir, meta[2]))\n\t\treturn input_data, mel_target, token_target, embed_target, len(mel_target)\n\tdef _prepare_batch(self, batches, outputs_per_step):\n\t\tassert 0 == len(batches) % self._hparams.tacotron_num_gpus\n\t\tsize_per_device = int(len(batches) / self._hparams.tacotron_num_gpus)\n\t\tnp.random.shuffle(batches)\n\t\tinputs = None\n\t\tmel_targets = None\n\t\ttoken_targets = None\n\t\ttargets_lengths = None",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tsize_per_device",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tsize_per_device = int(len(batches) / self._hparams.tacotron_num_gpus)\n\t\tnp.random.shuffle(batches)\n\t\tinputs = None\n\t\tmel_targets = None\n\t\ttoken_targets = None\n\t\ttargets_lengths = None\n\t\tsplit_infos = []\n\t\ttargets_lengths = np.asarray([x[-1] for x in batches], dtype=np.int32) #Used to mask loss\n\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tinputs",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tinputs = None\n\t\tmel_targets = None\n\t\ttoken_targets = None\n\t\ttargets_lengths = None\n\t\tsplit_infos = []\n\t\ttargets_lengths = np.asarray([x[-1] for x in batches], dtype=np.int32) #Used to mask loss\n\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):\n\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmel_targets",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmel_targets = None\n\t\ttoken_targets = None\n\t\ttargets_lengths = None\n\t\tsplit_infos = []\n\t\ttargets_lengths = np.asarray([x[-1] for x in batches], dtype=np.int32) #Used to mask loss\n\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):\n\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])\n\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttoken_targets",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttoken_targets = None\n\t\ttargets_lengths = None\n\t\tsplit_infos = []\n\t\ttargets_lengths = np.asarray([x[-1] for x in batches], dtype=np.int32) #Used to mask loss\n\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):\n\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])\n\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device\n\t\t\tmel_target_cur_device, mel_target_max_len = self._prepare_targets([x[1] for x in batch], outputs_per_step)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttargets_lengths",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttargets_lengths = None\n\t\tsplit_infos = []\n\t\ttargets_lengths = np.asarray([x[-1] for x in batches], dtype=np.int32) #Used to mask loss\n\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):\n\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])\n\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device\n\t\t\tmel_target_cur_device, mel_target_max_len = self._prepare_targets([x[1] for x in batch], outputs_per_step)\n\t\t\tmel_targets = np.concatenate(( mel_targets, mel_target_cur_device), axis=1) if mel_targets is not None else mel_target_cur_device",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tsplit_infos",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tsplit_infos = []\n\t\ttargets_lengths = np.asarray([x[-1] for x in batches], dtype=np.int32) #Used to mask loss\n\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):\n\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])\n\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device\n\t\t\tmel_target_cur_device, mel_target_max_len = self._prepare_targets([x[1] for x in batch], outputs_per_step)\n\t\t\tmel_targets = np.concatenate(( mel_targets, mel_target_cur_device), axis=1) if mel_targets is not None else mel_target_cur_device\n\t\t\t#Pad sequences with 1 to infer that the sequence is done",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\ttargets_lengths",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\ttargets_lengths = np.asarray([x[-1] for x in batches], dtype=np.int32) #Used to mask loss\n\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):\n\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])\n\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device\n\t\t\tmel_target_cur_device, mel_target_max_len = self._prepare_targets([x[1] for x in batch], outputs_per_step)\n\t\t\tmel_targets = np.concatenate(( mel_targets, mel_target_cur_device), axis=1) if mel_targets is not None else mel_target_cur_device\n\t\t\t#Pad sequences with 1 to infer that the sequence is done\n\t\t\ttoken_target_cur_device, token_target_max_len = self._prepare_token_targets([x[2] for x in batch], outputs_per_step)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tinput_lengths",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tinput_lengths = np.asarray([len(x[0]) for x in batches], dtype=np.int32)\n\t\tfor i in range(self._hparams.tacotron_num_gpus):\n\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])\n\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device\n\t\t\tmel_target_cur_device, mel_target_max_len = self._prepare_targets([x[1] for x in batch], outputs_per_step)\n\t\t\tmel_targets = np.concatenate(( mel_targets, mel_target_cur_device), axis=1) if mel_targets is not None else mel_target_cur_device\n\t\t\t#Pad sequences with 1 to infer that the sequence is done\n\t\t\ttoken_target_cur_device, token_target_max_len = self._prepare_token_targets([x[2] for x in batch], outputs_per_step)\n\t\t\ttoken_targets = np.concatenate((token_targets, token_target_cur_device),axis=1) if token_targets is not None else token_target_cur_device",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tbatch",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tbatch = batches[size_per_device*i:size_per_device*(i+1)]\n\t\t\tinput_cur_device, input_max_len = self._prepare_inputs([x[0] for x in batch])\n\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device\n\t\t\tmel_target_cur_device, mel_target_max_len = self._prepare_targets([x[1] for x in batch], outputs_per_step)\n\t\t\tmel_targets = np.concatenate(( mel_targets, mel_target_cur_device), axis=1) if mel_targets is not None else mel_target_cur_device\n\t\t\t#Pad sequences with 1 to infer that the sequence is done\n\t\t\ttoken_target_cur_device, token_target_max_len = self._prepare_token_targets([x[2] for x in batch], outputs_per_step)\n\t\t\ttoken_targets = np.concatenate((token_targets, token_target_cur_device),axis=1) if token_targets is not None else token_target_cur_device\n\t\t\tsplit_infos.append([input_max_len, mel_target_max_len, token_target_max_len])\n\t\tsplit_infos = np.asarray(split_infos, dtype=np.int32)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tinputs",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tinputs = np.concatenate((inputs, input_cur_device), axis=1) if inputs is not None else input_cur_device\n\t\t\tmel_target_cur_device, mel_target_max_len = self._prepare_targets([x[1] for x in batch], outputs_per_step)\n\t\t\tmel_targets = np.concatenate(( mel_targets, mel_target_cur_device), axis=1) if mel_targets is not None else mel_target_cur_device\n\t\t\t#Pad sequences with 1 to infer that the sequence is done\n\t\t\ttoken_target_cur_device, token_target_max_len = self._prepare_token_targets([x[2] for x in batch], outputs_per_step)\n\t\t\ttoken_targets = np.concatenate((token_targets, token_target_cur_device),axis=1) if token_targets is not None else token_target_cur_device\n\t\t\tsplit_infos.append([input_max_len, mel_target_max_len, token_target_max_len])\n\t\tsplit_infos = np.asarray(split_infos, dtype=np.int32)\n\t\t### SV2TTS ###\n\t\tembed_targets = np.asarray([x[3] for x in batches])",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\tmel_targets",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\tmel_targets = np.concatenate(( mel_targets, mel_target_cur_device), axis=1) if mel_targets is not None else mel_target_cur_device\n\t\t\t#Pad sequences with 1 to infer that the sequence is done\n\t\t\ttoken_target_cur_device, token_target_max_len = self._prepare_token_targets([x[2] for x in batch], outputs_per_step)\n\t\t\ttoken_targets = np.concatenate((token_targets, token_target_cur_device),axis=1) if token_targets is not None else token_target_cur_device\n\t\t\tsplit_infos.append([input_max_len, mel_target_max_len, token_target_max_len])\n\t\tsplit_infos = np.asarray(split_infos, dtype=np.int32)\n\t\t### SV2TTS ###\n\t\tembed_targets = np.asarray([x[3] for x in batches])\n\t\t##############\n\t\treturn inputs, input_lengths, mel_targets, token_targets, targets_lengths, \\",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\t\ttoken_targets",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\t\ttoken_targets = np.concatenate((token_targets, token_target_cur_device),axis=1) if token_targets is not None else token_target_cur_device\n\t\t\tsplit_infos.append([input_max_len, mel_target_max_len, token_target_max_len])\n\t\tsplit_infos = np.asarray(split_infos, dtype=np.int32)\n\t\t### SV2TTS ###\n\t\tembed_targets = np.asarray([x[3] for x in batches])\n\t\t##############\n\t\treturn inputs, input_lengths, mel_targets, token_targets, targets_lengths, \\\n\t\t\t   split_infos, embed_targets\n\tdef _prepare_inputs(self, inputs):\n\t\tmax_len = max([len(x) for x in inputs])",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tsplit_infos",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tsplit_infos = np.asarray(split_infos, dtype=np.int32)\n\t\t### SV2TTS ###\n\t\tembed_targets = np.asarray([x[3] for x in batches])\n\t\t##############\n\t\treturn inputs, input_lengths, mel_targets, token_targets, targets_lengths, \\\n\t\t\t   split_infos, embed_targets\n\tdef _prepare_inputs(self, inputs):\n\t\tmax_len = max([len(x) for x in inputs])\n\t\treturn np.stack([self._pad_input(x, max_len) for x in inputs]), max_len\n\tdef _prepare_targets(self, targets, alignment):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tembed_targets",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tembed_targets = np.asarray([x[3] for x in batches])\n\t\t##############\n\t\treturn inputs, input_lengths, mel_targets, token_targets, targets_lengths, \\\n\t\t\t   split_infos, embed_targets\n\tdef _prepare_inputs(self, inputs):\n\t\tmax_len = max([len(x) for x in inputs])\n\t\treturn np.stack([self._pad_input(x, max_len) for x in inputs]), max_len\n\tdef _prepare_targets(self, targets, alignment):\n\t\tmax_len = max([len(t) for t in targets])\n\t\tdata_len = self._round_up(max_len, alignment)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmax_len",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmax_len = max([len(x) for x in inputs])\n\t\treturn np.stack([self._pad_input(x, max_len) for x in inputs]), max_len\n\tdef _prepare_targets(self, targets, alignment):\n\t\tmax_len = max([len(t) for t in targets])\n\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_target(t, data_len) for t in targets]), data_len\n\tdef _prepare_token_targets(self, targets, alignment):\n\t\tmax_len = max([len(t) for t in targets]) + 1\n\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_token_target(t, data_len) for t in targets]), data_len",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmax_len",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmax_len = max([len(t) for t in targets])\n\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_target(t, data_len) for t in targets]), data_len\n\tdef _prepare_token_targets(self, targets, alignment):\n\t\tmax_len = max([len(t) for t in targets]) + 1\n\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_token_target(t, data_len) for t in targets]), data_len\n\tdef _pad_input(self, x, length):\n\t\treturn np.pad(x, (0, length - x.shape[0]), mode=\"constant\", constant_values=self._pad)\n\tdef _pad_target(self, t, length):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tdata_len",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_target(t, data_len) for t in targets]), data_len\n\tdef _prepare_token_targets(self, targets, alignment):\n\t\tmax_len = max([len(t) for t in targets]) + 1\n\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_token_target(t, data_len) for t in targets]), data_len\n\tdef _pad_input(self, x, length):\n\t\treturn np.pad(x, (0, length - x.shape[0]), mode=\"constant\", constant_values=self._pad)\n\tdef _pad_target(self, t, length):\n\t\treturn np.pad(t, [(0, length - t.shape[0]), (0, 0)], mode=\"constant\", constant_values=self._target_pad)",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tmax_len",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tmax_len = max([len(t) for t in targets]) + 1\n\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_token_target(t, data_len) for t in targets]), data_len\n\tdef _pad_input(self, x, length):\n\t\treturn np.pad(x, (0, length - x.shape[0]), mode=\"constant\", constant_values=self._pad)\n\tdef _pad_target(self, t, length):\n\t\treturn np.pad(t, [(0, length - t.shape[0]), (0, 0)], mode=\"constant\", constant_values=self._target_pad)\n\tdef _pad_token_target(self, t, length):\n\t\treturn np.pad(t, (0, length - t.shape[0]), mode=\"constant\", constant_values=self._token_pad)\n\tdef _round_up(self, x, multiple):",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tdata_len",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tdata_len = self._round_up(max_len, alignment)\n\t\treturn np.stack([self._pad_token_target(t, data_len) for t in targets]), data_len\n\tdef _pad_input(self, x, length):\n\t\treturn np.pad(x, (0, length - x.shape[0]), mode=\"constant\", constant_values=self._pad)\n\tdef _pad_target(self, t, length):\n\t\treturn np.pad(t, [(0, length - t.shape[0]), (0, 0)], mode=\"constant\", constant_values=self._target_pad)\n\tdef _pad_token_target(self, t, length):\n\t\treturn np.pad(t, (0, length - t.shape[0]), mode=\"constant\", constant_values=self._token_pad)\n\tdef _round_up(self, x, multiple):\n\t\tremainder = x % multiple",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tremainder",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tremainder = x % multiple\n\t\treturn x if remainder == 0 else x + multiple - remainder\n\tdef _round_down(self, x, multiple):\n\t\tremainder = x % multiple\n\t\treturn x if remainder == 0 else x - remainder",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "\t\tremainder",
        "kind": 5,
        "importPath": "synthesizer.feeder",
        "description": "synthesizer.feeder",
        "peekOfCode": "\t\tremainder = x % multiple\n\t\treturn x if remainder == 0 else x - remainder",
        "detail": "synthesizer.feeder",
        "documentation": {}
    },
    {
        "label": "hparams_debug_string",
        "kind": 2,
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "peekOfCode": "def hparams_debug_string():\n    values = hparams.values()\n    hp = [\"  %s: %s\" % (name, values[name]) for name in sorted(values) if name != \"sentences\"]\n    return \"Hyperparameters:\\n\" + \"\\n\".join(hp)",
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "hparams",
        "kind": 5,
        "importPath": "synthesizer.hparams",
        "description": "synthesizer.hparams",
        "peekOfCode": "hparams = HParams(\n    # Comma-separated list of cleaners to run on text prior to training and eval. For non-English\n    # text, you may want to use \"basic_cleaners\" or \"transliteration_cleaners\".\n    cleaners=\"english_cleaners\",\n    # If you only have 1 GPU or want to use only one GPU, please set num_gpus=0 and specify the \n    # GPU idx on run. example:\n    # expample 1 GPU of index 2 (train on \"/gpu2\" only): CUDA_VISIBLE_DEVICES=2 python train.py \n    # --model=\"Tacotron\" --hparams=\"tacotron_gpu_start_idx=2\"\n    # If you want to train on multiple GPUs, simply specify the number of GPUs available, \n    # and the idx of the first GPU to use. example:",
        "detail": "synthesizer.hparams",
        "documentation": {}
    },
    {
        "label": "Synthesizer",
        "kind": 6,
        "importPath": "synthesizer.inference",
        "description": "synthesizer.inference",
        "peekOfCode": "class Synthesizer:\n    sample_rate = hparams.sample_rate\n    hparams = hparams\n    def __init__(self, checkpoints_dir: Path, verbose=True, low_mem=False):\n        \"\"\"\n        Creates a synthesizer ready for inference. The actual model isn't loaded in memory until\n        needed or until load() is called.\n        :param checkpoints_dir: path to the directory containing the checkpoint file as well as the\n        weight files (.data, .index and .meta files)\n        :param verbose: if False, only tensorflow's output will be printed TODO: suppress them too",
        "detail": "synthesizer.inference",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "def init(filename, run_name, slack_url=None):\n\tglobal _file, _run_name, _slack_url\n\t_close_logfile()\n\t_file = open(filename, \"a\")\n\t_file = open(filename, \"a\")\n\t_file.write(\"\\n-----------------------------------------------------------------\\n\")\n\t_file.write(\"Starting new {} training run\\n\".format(run_name))\n\t_file.write(\"-----------------------------------------------------------------\\n\")\n\t_run_name = run_name\n\t_slack_url = slack_url",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "def log(msg, end=\"\\n\", slack=False):\n\tprint(msg, end=end)\n\tif _file is not None:\n\t\t_file.write(\"[%s]  %s\\n\" % (datetime.now().strftime(_format)[:-3], msg))\n\tif slack and _slack_url is not None:\n\t\tThread(target=_send_slack, args=(msg,)).start()\ndef _close_logfile():\n\tglobal _file\n\tif _file is not None:\n\t\t_file.close()",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "_format",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "_format = \"%Y-%m-%d %H:%M:%S.%f\"\n_file = None\n_run_name = None\n_slack_url = None\ndef init(filename, run_name, slack_url=None):\n\tglobal _file, _run_name, _slack_url\n\t_close_logfile()\n\t_file = open(filename, \"a\")\n\t_file = open(filename, \"a\")\n\t_file.write(\"\\n-----------------------------------------------------------------\\n\")",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "_file",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "_file = None\n_run_name = None\n_slack_url = None\ndef init(filename, run_name, slack_url=None):\n\tglobal _file, _run_name, _slack_url\n\t_close_logfile()\n\t_file = open(filename, \"a\")\n\t_file = open(filename, \"a\")\n\t_file.write(\"\\n-----------------------------------------------------------------\\n\")\n\t_file.write(\"Starting new {} training run\\n\".format(run_name))",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "_run_name",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "_run_name = None\n_slack_url = None\ndef init(filename, run_name, slack_url=None):\n\tglobal _file, _run_name, _slack_url\n\t_close_logfile()\n\t_file = open(filename, \"a\")\n\t_file = open(filename, \"a\")\n\t_file.write(\"\\n-----------------------------------------------------------------\\n\")\n\t_file.write(\"Starting new {} training run\\n\".format(run_name))\n\t_file.write(\"-----------------------------------------------------------------\\n\")",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "_slack_url",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "_slack_url = None\ndef init(filename, run_name, slack_url=None):\n\tglobal _file, _run_name, _slack_url\n\t_close_logfile()\n\t_file = open(filename, \"a\")\n\t_file = open(filename, \"a\")\n\t_file.write(\"\\n-----------------------------------------------------------------\\n\")\n\t_file.write(\"Starting new {} training run\\n\".format(run_name))\n\t_file.write(\"-----------------------------------------------------------------\\n\")\n\t_run_name = run_name",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "\t_file",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "\t_file = open(filename, \"a\")\n\t_file = open(filename, \"a\")\n\t_file.write(\"\\n-----------------------------------------------------------------\\n\")\n\t_file.write(\"Starting new {} training run\\n\".format(run_name))\n\t_file.write(\"-----------------------------------------------------------------\\n\")\n\t_run_name = run_name\n\t_slack_url = slack_url\ndef log(msg, end=\"\\n\", slack=False):\n\tprint(msg, end=end)\n\tif _file is not None:",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "\t_file",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "\t_file = open(filename, \"a\")\n\t_file.write(\"\\n-----------------------------------------------------------------\\n\")\n\t_file.write(\"Starting new {} training run\\n\".format(run_name))\n\t_file.write(\"-----------------------------------------------------------------\\n\")\n\t_run_name = run_name\n\t_slack_url = slack_url\ndef log(msg, end=\"\\n\", slack=False):\n\tprint(msg, end=end)\n\tif _file is not None:\n\t\t_file.write(\"[%s]  %s\\n\" % (datetime.now().strftime(_format)[:-3], msg))",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "\t_run_name",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "\t_run_name = run_name\n\t_slack_url = slack_url\ndef log(msg, end=\"\\n\", slack=False):\n\tprint(msg, end=end)\n\tif _file is not None:\n\t\t_file.write(\"[%s]  %s\\n\" % (datetime.now().strftime(_format)[:-3], msg))\n\tif slack and _slack_url is not None:\n\t\tThread(target=_send_slack, args=(msg,)).start()\ndef _close_logfile():\n\tglobal _file",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "\t_slack_url",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "\t_slack_url = slack_url\ndef log(msg, end=\"\\n\", slack=False):\n\tprint(msg, end=end)\n\tif _file is not None:\n\t\t_file.write(\"[%s]  %s\\n\" % (datetime.now().strftime(_format)[:-3], msg))\n\tif slack and _slack_url is not None:\n\t\tThread(target=_send_slack, args=(msg,)).start()\ndef _close_logfile():\n\tglobal _file\n\tif _file is not None:",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "\t\t_file",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "\t\t_file = None\ndef _send_slack(msg):\n\treq = Request(_slack_url)\n\treq.add_header(\"Content-Type\", \"application/json\")\n\turlopen(req, json.dumps({\n\t\t\"username\": \"tacotron\",\n\t\t\"icon_emoji\": \":taco:\",\n\t\t\"text\": \"*%s*: %s\" % (_run_name, msg)\n\t}).encode())\natexit.register(_close_logfile)",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "\treq",
        "kind": 5,
        "importPath": "synthesizer.infolog",
        "description": "synthesizer.infolog",
        "peekOfCode": "\treq = Request(_slack_url)\n\treq.add_header(\"Content-Type\", \"application/json\")\n\turlopen(req, json.dumps({\n\t\t\"username\": \"tacotron\",\n\t\t\"icon_emoji\": \":taco:\",\n\t\t\"text\": \"*%s*: %s\" % (_run_name, msg)\n\t}).encode())\natexit.register(_close_logfile)",
        "detail": "synthesizer.infolog",
        "documentation": {}
    },
    {
        "label": "preprocess_librispeech",
        "kind": 2,
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "peekOfCode": "def preprocess_librispeech(datasets_root: Path, out_dir: Path, n_processes: int, \n                           skip_existing: bool, hparams):\n    # Gather the input directories\n    dataset_root = datasets_root.joinpath(\"LibriSpeech\")\n    input_dirs = [dataset_root.joinpath(\"train-clean-100\"), \n                  dataset_root.joinpath(\"train-clean-360\")]\n    print(\"\\n    \".join(map(str, [\"Using data from:\"] + input_dirs)))\n    assert all(input_dir.exists() for input_dir in input_dirs)\n    # Create the output directories for each output file type\n    out_dir.joinpath(\"mels\").mkdir(exist_ok=True)",
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "preprocess_speaker",
        "kind": 2,
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "peekOfCode": "def preprocess_speaker(speaker_dir, out_dir: Path, skip_existing: bool, hparams):\n    metadata = []\n    for book_dir in speaker_dir.glob(\"*\"):\n        # Gather the utterance audios and texts\n        try:\n            alignments_fpath = next(book_dir.glob(\"*.alignment.txt\"))\n            with alignments_fpath.open(\"r\") as alignments_file:\n                alignments = [line.rstrip().split(\" \") for line in alignments_file]\n        except StopIteration:\n            # A few alignment files will be missing",
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "split_on_silences",
        "kind": 2,
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "peekOfCode": "def split_on_silences(wav_fpath, words, end_times, hparams):\n    # Load the audio waveform\n    wav, _ = librosa.load(str(wav_fpath), hparams.sample_rate)\n    if hparams.rescale:\n        wav = wav / np.abs(wav).max() * hparams.rescaling_max\n    words = np.array(words)\n    start_times = np.array([0.0] + end_times[:-1])\n    end_times = np.array(end_times)\n    assert len(words) == len(end_times) == len(start_times)\n    assert words[0] == \"\" and words[-1] == \"\"",
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "process_utterance",
        "kind": 2,
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "peekOfCode": "def process_utterance(wav: np.ndarray, text: str, out_dir: Path, basename: str, \n                      skip_existing: bool, hparams):\n    ## FOR REFERENCE:\n    # For you not to lose your head if you ever wish to change things here or implement your own\n    # synthesizer.\n    # - Both the audios and the mel spectrograms are saved as numpy arrays\n    # - There is no processing done to the audios that will be saved to disk beyond volume  \n    #   normalization (in split_on_silences)\n    # - However, pre-emphasis is applied to the audios before computing the mel spectrogram. This\n    #   is why we re-apply it on the audio on the side of the vocoder.",
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "embed_utterance",
        "kind": 2,
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "peekOfCode": "def embed_utterance(fpaths, encoder_model_fpath):\n    if not encoder.is_loaded():\n        encoder.load_model(encoder_model_fpath)\n    # Compute the speaker embedding of the utterance\n    wav_fpath, embed_fpath = fpaths\n    wav = np.load(wav_fpath)\n    wav = encoder.preprocess_wav(wav)\n    embed = encoder.embed_utterance(wav)\n    np.save(embed_fpath, embed, allow_pickle=False)\ndef create_embeddings(synthesizer_root: Path, encoder_model_fpath: Path, n_processes: int):",
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "create_embeddings",
        "kind": 2,
        "importPath": "synthesizer.preprocess",
        "description": "synthesizer.preprocess",
        "peekOfCode": "def create_embeddings(synthesizer_root: Path, encoder_model_fpath: Path, n_processes: int):\n    wav_dir = synthesizer_root.joinpath(\"audio\")\n    metadata_fpath = synthesizer_root.joinpath(\"train.txt\")\n    assert wav_dir.exists() and metadata_fpath.exists()\n    embed_dir = synthesizer_root.joinpath(\"embeds\")\n    embed_dir.mkdir(exist_ok=True)\n    # Gather the input wave filepath and the target output embed filepath\n    with metadata_fpath.open(\"r\") as metadata_file:\n        metadata = [line.split(\"|\") for line in metadata_file]\n        fpaths = [(wav_dir.joinpath(m[0]), embed_dir.joinpath(m[2])) for m in metadata]",
        "detail": "synthesizer.preprocess",
        "documentation": {}
    },
    {
        "label": "run_eval",
        "kind": 2,
        "importPath": "synthesizer.synthesize",
        "description": "synthesizer.synthesize",
        "peekOfCode": "def run_eval(args, checkpoint_path, output_dir, hparams, sentences):\n    eval_dir = os.path.join(output_dir, \"eval\")\n    log_dir = os.path.join(output_dir, \"logs-eval\")\n    #Create output path if it doesn\"t exist\n    os.makedirs(eval_dir, exist_ok=True)\n    os.makedirs(log_dir, exist_ok=True)\n    os.makedirs(os.path.join(log_dir, \"wavs\"), exist_ok=True)\n    os.makedirs(os.path.join(log_dir, \"plots\"), exist_ok=True)\n    log(hparams_debug_string())\n    synth = Tacotron2(checkpoint_path, hparams)",
        "detail": "synthesizer.synthesize",
        "documentation": {}
    },
    {
        "label": "run_synthesis",
        "kind": 2,
        "importPath": "synthesizer.synthesize",
        "description": "synthesizer.synthesize",
        "peekOfCode": "def run_synthesis(in_dir, out_dir, model_dir, hparams):\n    synth_dir = os.path.join(out_dir, \"mels_gta\")\n    os.makedirs(synth_dir, exist_ok=True)\n    metadata_filename = os.path.join(in_dir, \"train.txt\")\n    print(hparams_debug_string())\n    # Load the model in memory\n    weights_dir = os.path.join(model_dir, \"taco_pretrained\")\n    checkpoint_fpath = tf.train.get_checkpoint_state(weights_dir).model_checkpoint_path\n    synth = Tacotron2(checkpoint_fpath, hparams, gta=True)\n    # Load the metadata",
        "detail": "synthesizer.synthesize",
        "documentation": {}
    },
    {
        "label": "Tacotron2",
        "kind": 6,
        "importPath": "synthesizer.tacotron2",
        "description": "synthesizer.tacotron2",
        "peekOfCode": "class Tacotron2:\n    def __init__(self, checkpoint_path, hparams, gta=False, model_name=\"Tacotron\"):\n        log(\"Constructing model: %s\" % model_name)\n        #Force the batch size to be known in order to use attention masking in batch synthesis\n        inputs = tf.compat.v1.placeholder(tf.int32, (None, None), name=\"inputs\")\n        input_lengths = tf.compat.v1.placeholder(tf.int32, (None,), name=\"input_lengths\")\n        speaker_embeddings = tf.compat.v1.placeholder(tf.float32, (None, hparams.speaker_embedding_size),\n                                            name=\"speaker_embeddings\")\n        targets = tf.compat.v1.placeholder(tf.float32, (None, None, hparams.num_mels), name=\"mel_targets\")\n        split_infos = tf.compat.v1.placeholder(tf.int32, shape=(hparams.tacotron_num_gpus, None), name=\"split_infos\")",
        "detail": "synthesizer.tacotron2",
        "documentation": {}
    },
    {
        "label": "add_embedding_stats",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def add_embedding_stats(summary_writer, embedding_names, paths_to_meta, checkpoint_path):\n    # Create tensorboard projector\n    config = tf.contrib.tensorboard.plugins.projector.ProjectorConfig()\n    config.model_checkpoint_path = checkpoint_path\n    for embedding_name, path_to_meta in zip(embedding_names, paths_to_meta):\n        # Initialize config\n        embedding = config.embeddings.add()\n        # Specifiy the embedding variable and the metadata\n        embedding.tensor_name = embedding_name\n        embedding.metadata_path = path_to_meta",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "add_train_stats",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def add_train_stats(model, hparams):\n    with tf.compat.v1.variable_scope(\"stats\") as scope:\n        for i in range(hparams.tacotron_num_gpus):\n            tf.compat.v1.summary.histogram(\"mel_outputs %d\" % i, model.tower_mel_outputs[i])\n            tf.compat.v1.summary.histogram(\"mel_targets %d\" % i, model.tower_mel_targets[i])\n        tf.compat.v1.summary.scalar(\"before_loss\", model.before_loss)\n        tf.compat.v1.summary.scalar(\"after_loss\", model.after_loss)\n        if hparams.predict_linear:\n            tf.compat.v1.summary.scalar(\"linear_loss\", model.linear_loss)\n            for i in range(hparams.tacotron_num_gpus):",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "add_eval_stats",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def add_eval_stats(summary_writer, step, linear_loss, before_loss, after_loss, stop_token_loss,\n                   loss):\n    values = [\n        tf.compat.v1.Summary.Value(tag=\"Tacotron_eval_model/eval_stats/eval_before_loss\",\n                                   simple_value=before_loss),\n        tf.compat.v1.Summary.Value(tag=\"Tacotron_eval_model/eval_stats/eval_after_loss\",\n                                   simple_value=after_loss),\n        tf.compat.v1.Summary.Value(tag=\"Tacotron_eval_model/eval_stats/stop_token_loss\",\n                                   simple_value=stop_token_loss),\n        tf.compat.v1.Summary.Value(tag=\"Tacotron_eval_model/eval_stats/eval_loss\", simple_value=loss),",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "time_string",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def time_string():\n    return datetime.now().strftime(\"%Y-%m-%d %H:%M\")\ndef model_train_mode(args, feeder, hparams, global_step):\n    with tf.compat.v1.variable_scope(\"Tacotron_model\", reuse=tf.compat.v1.AUTO_REUSE) as scope:\n        model = create_model(\"Tacotron\", hparams)\n        model.initialize(feeder.inputs, feeder.input_lengths, feeder.speaker_embeddings, \n                         feeder.mel_targets, feeder.token_targets,\n                         targets_lengths=feeder.targets_lengths, global_step=global_step,\n                         is_training=True, split_infos=feeder.split_infos)\n        model.add_loss()",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "model_train_mode",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def model_train_mode(args, feeder, hparams, global_step):\n    with tf.compat.v1.variable_scope(\"Tacotron_model\", reuse=tf.compat.v1.AUTO_REUSE) as scope:\n        model = create_model(\"Tacotron\", hparams)\n        model.initialize(feeder.inputs, feeder.input_lengths, feeder.speaker_embeddings, \n                         feeder.mel_targets, feeder.token_targets,\n                         targets_lengths=feeder.targets_lengths, global_step=global_step,\n                         is_training=True, split_infos=feeder.split_infos)\n        model.add_loss()\n        model.add_optimizer(global_step)\n        stats = add_train_stats(model, hparams)",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "model_test_mode",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def model_test_mode(args, feeder, hparams, global_step):\n    with tf.compat.v1.variable_scope(\"Tacotron_model\", reuse=tf.compat.v1.AUTO_REUSE) as scope:\n        model = create_model(\"Tacotron\", hparams)\n        model.initialize(feeder.eval_inputs, feeder.eval_input_lengths, \n                         feeder.eval_speaker_embeddings, feeder.eval_mel_targets,\n                         feeder.eval_token_targets, targets_lengths=feeder.eval_targets_lengths, \n                         global_step=global_step, is_training=False, is_evaluating=True,\n                         split_infos=feeder.eval_split_infos)\n        model.add_loss()\n        return model",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def train(log_dir, args, hparams):\n    save_dir = os.path.join(log_dir, \"taco_pretrained\")\n    plot_dir = os.path.join(log_dir, \"plots\")\n    wav_dir = os.path.join(log_dir, \"wavs\")\n    mel_dir = os.path.join(log_dir, \"mel-spectrograms\")\n    eval_dir = os.path.join(log_dir, \"eval-dir\")\n    eval_plot_dir = os.path.join(eval_dir, \"plots\")\n    eval_wav_dir = os.path.join(eval_dir, \"wavs\")\n    tensorboard_dir = os.path.join(log_dir, \"tacotron_events\")\n    meta_folder = os.path.join(log_dir, \"metas\")",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "tacotron_train",
        "kind": 2,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "def tacotron_train(args, log_dir, hparams):\n    return train(log_dir, args, hparams)",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "log = infolog.log\ndef add_embedding_stats(summary_writer, embedding_names, paths_to_meta, checkpoint_path):\n    # Create tensorboard projector\n    config = tf.contrib.tensorboard.plugins.projector.ProjectorConfig()\n    config.model_checkpoint_path = checkpoint_path\n    for embedding_name, path_to_meta in zip(embedding_names, paths_to_meta):\n        # Initialize config\n        embedding = config.embeddings.add()\n        # Specifiy the embedding variable and the metadata\n        embedding.tensor_name = embedding_name",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\talign",
        "kind": 5,
        "importPath": "synthesizer.train",
        "description": "synthesizer.train",
        "peekOfCode": "\t\t\t\t\t\t\talign = sess.run(\n                                [\n                                    eval_model.tower_loss[0], eval_model.tower_before_loss[0],\n                                    eval_model.tower_after_loss[0],\n                                    eval_model.tower_stop_token_loss[0],\n                                    eval_model.tower_mel_outputs[0][0],\n                                    eval_model.tower_mel_targets[0][0],\n                                    eval_model.tower_targets_lengths[0][0],\n                                    eval_model.tower_alignments[0][0]\n                                ])",
        "detail": "synthesizer.train",
        "documentation": {}
    },
    {
        "label": "UI",
        "kind": 6,
        "importPath": "toolbox.ui",
        "description": "toolbox.ui",
        "peekOfCode": "class UI(QDialog):\n    min_umap_points = 4\n    max_log_lines = 5\n    max_saved_utterances = 20\n    def draw_utterance(self, utterance: Utterance, which):\n        self.draw_spec(utterance.spec, which)\n        self.draw_embed(utterance.embed, utterance.name, which)\n    def draw_embed(self, embed, name, which):\n        embed_ax, _ = self.current_ax if which == \"current\" else self.gen_ax\n        embed_ax.figure.suptitle(\"\" if embed is None else name)",
        "detail": "toolbox.ui",
        "documentation": {}
    },
    {
        "label": "colormap",
        "kind": 5,
        "importPath": "toolbox.ui",
        "description": "toolbox.ui",
        "peekOfCode": "colormap = np.array([\n    [0, 127, 70],\n    [255, 0, 0],\n    [255, 217, 38],\n    [0, 135, 255],\n    [165, 0, 165],\n    [255, 167, 255],\n    [97, 142, 151],\n    [0, 255, 255],\n    [255, 96, 38],",
        "detail": "toolbox.ui",
        "documentation": {}
    },
    {
        "label": "default_text",
        "kind": 5,
        "importPath": "toolbox.ui",
        "description": "toolbox.ui",
        "peekOfCode": "default_text = \\\n    \"Welcome to the toolbox! To begin, load an utterance from your datasets or record one \" \\\n    \"yourself.\\nOnce its embedding has been created, you can synthesize any text written here.\\n\" \\\n    \"With the current synthesizer model, punctuation and special characters will be ignored.\\n\" \\\n    \"The synthesizer expects to generate \" \\\n    \"outputs that are somewhere between 5 and 12 seconds.\\nTo mark breaks, write a new line. \" \\\n    \"Each line will be treated separately.\\nThen, they are joined together to make the final \" \\\n    \"spectrogram. Use the vocoder to generate audio.\\nThe vocoder generates almost in constant \" \\\n    \"time, so it will be more time efficient for longer inputs like this one.\\nOn the left you \" \\\n    \"have the embedding projections. Load or record more utterances to see them.\\nIf you have \" \\",
        "detail": "toolbox.ui",
        "documentation": {}
    },
    {
        "label": "Utterance",
        "kind": 5,
        "importPath": "toolbox.utterance",
        "description": "toolbox.utterance",
        "peekOfCode": "Utterance = namedtuple(\"Utterance\", \"name speaker_name wav spec embed partial_embeds synth\")\nUtterance.__eq__ = lambda x, y: x.name == y.name\nUtterance.__hash__ = lambda x: hash(x.name)",
        "detail": "toolbox.utterance",
        "documentation": {}
    },
    {
        "label": "Utterance.__eq__",
        "kind": 5,
        "importPath": "toolbox.utterance",
        "description": "toolbox.utterance",
        "peekOfCode": "Utterance.__eq__ = lambda x, y: x.name == y.name\nUtterance.__hash__ = lambda x: hash(x.name)",
        "detail": "toolbox.utterance",
        "documentation": {}
    },
    {
        "label": "Utterance.__hash__",
        "kind": 5,
        "importPath": "toolbox.utterance",
        "description": "toolbox.utterance",
        "peekOfCode": "Utterance.__hash__ = lambda x: hash(x.name)",
        "detail": "toolbox.utterance",
        "documentation": {}
    },
    {
        "label": "print_args",
        "kind": 2,
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "peekOfCode": "def print_args(args: argparse.Namespace, parser=None):\n    args = vars(args)\n    if parser is None:\n        priorities = list(map(_priority, args.values()))\n    else:\n        all_params = [a.dest for g in parser._action_groups for a in g._group_actions ]\n        priority = lambda p: all_params.index(p) if p in all_params else len(all_params)\n        priorities = list(map(priority, args.keys()))\n    pad = max(map(len, args.keys())) + 3\n    indices = np.lexsort((list(args.keys()), priorities))",
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "_type_priorities",
        "kind": 5,
        "importPath": "utils.argutils",
        "description": "utils.argutils",
        "peekOfCode": "_type_priorities = [    # In decreasing order\n    Path,\n    str,\n    int,\n    float,\n    bool,\n]\ndef _priority(o):\n    p = next((i for i, t in enumerate(_type_priorities) if type(o) is t), None) \n    if p is not None:",
        "detail": "utils.argutils",
        "documentation": {}
    },
    {
        "label": "profile_noise",
        "kind": 2,
        "importPath": "utils.logmmse",
        "description": "utils.logmmse",
        "peekOfCode": "def profile_noise(noise, sampling_rate, window_size=0):\n    \"\"\"\n    Creates a profile of the noise in a given waveform.\n    :param noise: a waveform containing noise ONLY, as a numpy array of floats or ints. \n    :param sampling_rate: the sampling rate of the audio\n    :param window_size: the size of the window the logmmse algorithm operates on. A default value \n    will be picked if left as 0.\n    :return: a NoiseProfile object\n    \"\"\"\n    noise, dtype = to_float(noise)",
        "detail": "utils.logmmse",
        "documentation": {}
    },
    {
        "label": "denoise",
        "kind": 2,
        "importPath": "utils.logmmse",
        "description": "utils.logmmse",
        "peekOfCode": "def denoise(wav, noise_profile: NoiseProfile, eta=0.15):\n    \"\"\"\n    Cleans the noise from a speech waveform given a noise profile. The waveform must have the \n    same sampling rate as the one used to create the noise profile. \n    :param wav: a speech waveform as a numpy array of floats or ints.\n    :param noise_profile: a NoiseProfile object that was created from a similar (or a segment of \n    the same) waveform.\n    :param eta: voice threshold for noise update. While the voice activation detection value is \n    below this threshold, the noise profile will be continuously updated throughout the audio. \n    Set to 0 to disable updating the noise profile.",
        "detail": "utils.logmmse",
        "documentation": {}
    },
    {
        "label": "to_float",
        "kind": 2,
        "importPath": "utils.logmmse",
        "description": "utils.logmmse",
        "peekOfCode": "def to_float(_input):\n    if _input.dtype == np.float64:\n        return _input, _input.dtype\n    elif _input.dtype == np.float32:\n        return _input.astype(np.float64), _input.dtype\n    elif _input.dtype == np.uint8:\n        return (_input - 128) / 128., _input.dtype\n    elif _input.dtype == np.int16:\n        return _input / 32768., _input.dtype\n    elif _input.dtype == np.int32:",
        "detail": "utils.logmmse",
        "documentation": {}
    },
    {
        "label": "from_float",
        "kind": 2,
        "importPath": "utils.logmmse",
        "description": "utils.logmmse",
        "peekOfCode": "def from_float(_input, dtype):\n    if dtype == np.float64:\n        return _input, np.float64\n    elif dtype == np.float32:\n        return _input.astype(np.float32)\n    elif dtype == np.uint8:\n        return ((_input * 128) + 128).astype(np.uint8)\n    elif dtype == np.int16:\n        return (_input * 32768).astype(np.int16)\n    elif dtype == np.int32:",
        "detail": "utils.logmmse",
        "documentation": {}
    },
    {
        "label": "NoiseProfile",
        "kind": 5,
        "importPath": "utils.logmmse",
        "description": "utils.logmmse",
        "peekOfCode": "NoiseProfile = namedtuple(\"NoiseProfile\", \"sampling_rate window_size len1 len2 win n_fft noise_mu2\")\ndef profile_noise(noise, sampling_rate, window_size=0):\n    \"\"\"\n    Creates a profile of the noise in a given waveform.\n    :param noise: a waveform containing noise ONLY, as a numpy array of floats or ints. \n    :param sampling_rate: the sampling rate of the audio\n    :param window_size: the size of the window the logmmse algorithm operates on. A default value \n    will be picked if left as 0.\n    :return: a NoiseProfile object\n    \"\"\"",
        "detail": "utils.logmmse",
        "documentation": {}
    },
    {
        "label": "Profiler",
        "kind": 6,
        "importPath": "utils.profiler",
        "description": "utils.profiler",
        "peekOfCode": "class Profiler:\n    def __init__(self, summarize_every=5, disabled=False):\n        self.last_tick = timer()\n        self.logs = OrderedDict()\n        self.summarize_every = summarize_every\n        self.disabled = disabled\n    def tick(self, name):\n        if self.disabled:\n            return\n        # Log the time needed to execute that function",
        "detail": "utils.profiler",
        "documentation": {}
    },
    {
        "label": "WaveRNN",
        "kind": 6,
        "importPath": "vocoder.models.deepmind_version",
        "description": "vocoder.models.deepmind_version",
        "peekOfCode": "class WaveRNN(nn.Module) :\n    def __init__(self, hidden_size=896, quantisation=256) :\n        super(WaveRNN, self).__init__()\n        self.hidden_size = hidden_size\n        self.split_size = hidden_size // 2\n        # The main matmul\n        self.R = nn.Linear(self.hidden_size, 3 * self.hidden_size, bias=False)\n        # Output fc layers\n        self.O1 = nn.Linear(self.split_size, self.split_size)\n        self.O2 = nn.Linear(self.split_size, quantisation)",
        "detail": "vocoder.models.deepmind_version",
        "documentation": {}
    },
    {
        "label": "ResBlock",
        "kind": 6,
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "peekOfCode": "class ResBlock(nn.Module):\n    def __init__(self, dims):\n        super().__init__()\n        self.conv1 = nn.Conv1d(dims, dims, kernel_size=1, bias=False)\n        self.conv2 = nn.Conv1d(dims, dims, kernel_size=1, bias=False)\n        self.batch_norm1 = nn.BatchNorm1d(dims)\n        self.batch_norm2 = nn.BatchNorm1d(dims)\n    def forward(self, x):\n        residual = x\n        x = self.conv1(x)",
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "MelResNet",
        "kind": 6,
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "peekOfCode": "class MelResNet(nn.Module):\n    def __init__(self, res_blocks, in_dims, compute_dims, res_out_dims, pad):\n        super().__init__()\n        k_size = pad * 2 + 1\n        self.conv_in = nn.Conv1d(in_dims, compute_dims, kernel_size=k_size, bias=False)\n        self.batch_norm = nn.BatchNorm1d(compute_dims)\n        self.layers = nn.ModuleList()\n        for i in range(res_blocks):\n            self.layers.append(ResBlock(compute_dims))\n        self.conv_out = nn.Conv1d(compute_dims, res_out_dims, kernel_size=1)",
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "Stretch2d",
        "kind": 6,
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "peekOfCode": "class Stretch2d(nn.Module):\n    def __init__(self, x_scale, y_scale):\n        super().__init__()\n        self.x_scale = x_scale\n        self.y_scale = y_scale\n    def forward(self, x):\n        b, c, h, w = x.size()\n        x = x.unsqueeze(-1).unsqueeze(3)\n        x = x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)\n        return x.view(b, c, h * self.y_scale, w * self.x_scale)",
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "UpsampleNetwork",
        "kind": 6,
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "peekOfCode": "class UpsampleNetwork(nn.Module):\n    def __init__(self, feat_dims, upsample_scales, compute_dims,\n                 res_blocks, res_out_dims, pad):\n        super().__init__()\n        total_scale = np.cumproduct(upsample_scales)[-1]\n        self.indent = pad * total_scale\n        self.resnet = MelResNet(res_blocks, feat_dims, compute_dims, res_out_dims, pad)\n        self.resnet_stretch = Stretch2d(total_scale, 1)\n        self.up_layers = nn.ModuleList()\n        for scale in upsample_scales:",
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "WaveRNN",
        "kind": 6,
        "importPath": "vocoder.models.fatchord_version",
        "description": "vocoder.models.fatchord_version",
        "peekOfCode": "class WaveRNN(nn.Module):\n    def __init__(self, rnn_dims, fc_dims, bits, pad, upsample_factors,\n                 feat_dims, compute_dims, res_out_dims, res_blocks,\n                 hop_length, sample_rate, mode='RAW'):\n        super().__init__()\n        self.mode = mode\n        self.pad = pad\n        if self.mode == 'RAW' :\n            self.n_classes = 2 ** bits\n        elif self.mode == 'MOL' :",
        "detail": "vocoder.models.fatchord_version",
        "documentation": {}
    },
    {
        "label": "label_2_float",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def label_2_float(x, bits) :\n    return 2 * x / (2**bits - 1.) - 1.\ndef float_2_label(x, bits) :\n    assert abs(x).max() <= 1.0\n    x = (x + 1.) * (2**bits - 1) / 2\n    return x.clip(0, 2**bits - 1)\ndef load_wav(path) :\n    return librosa.load(str(path), sr=hp.sample_rate)[0]\ndef save_wav(x, path) :\n    librosa.output.write_wav(path, x.astype(np.float32), sr=hp.sample_rate)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "float_2_label",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def float_2_label(x, bits) :\n    assert abs(x).max() <= 1.0\n    x = (x + 1.) * (2**bits - 1) / 2\n    return x.clip(0, 2**bits - 1)\ndef load_wav(path) :\n    return librosa.load(str(path), sr=hp.sample_rate)[0]\ndef save_wav(x, path) :\n    librosa.output.write_wav(path, x.astype(np.float32), sr=hp.sample_rate)\ndef split_signal(x) :\n    unsigned = x + 2**15",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "load_wav",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def load_wav(path) :\n    return librosa.load(str(path), sr=hp.sample_rate)[0]\ndef save_wav(x, path) :\n    librosa.output.write_wav(path, x.astype(np.float32), sr=hp.sample_rate)\ndef split_signal(x) :\n    unsigned = x + 2**15\n    coarse = unsigned // 256\n    fine = unsigned % 256\n    return coarse, fine\ndef combine_signal(coarse, fine) :",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "save_wav",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def save_wav(x, path) :\n    librosa.output.write_wav(path, x.astype(np.float32), sr=hp.sample_rate)\ndef split_signal(x) :\n    unsigned = x + 2**15\n    coarse = unsigned // 256\n    fine = unsigned % 256\n    return coarse, fine\ndef combine_signal(coarse, fine) :\n    return coarse * 256 + fine - 2**15\ndef encode_16bits(x) :",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "split_signal",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def split_signal(x) :\n    unsigned = x + 2**15\n    coarse = unsigned // 256\n    fine = unsigned % 256\n    return coarse, fine\ndef combine_signal(coarse, fine) :\n    return coarse * 256 + fine - 2**15\ndef encode_16bits(x) :\n    return np.clip(x * 2**15, -2**15, 2**15 - 1).astype(np.int16)\nmel_basis = None",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "combine_signal",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def combine_signal(coarse, fine) :\n    return coarse * 256 + fine - 2**15\ndef encode_16bits(x) :\n    return np.clip(x * 2**15, -2**15, 2**15 - 1).astype(np.int16)\nmel_basis = None\ndef linear_to_mel(spectrogram):\n    global mel_basis\n    if mel_basis is None:\n        mel_basis = build_mel_basis()\n    return np.dot(mel_basis, spectrogram)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "encode_16bits",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def encode_16bits(x) :\n    return np.clip(x * 2**15, -2**15, 2**15 - 1).astype(np.int16)\nmel_basis = None\ndef linear_to_mel(spectrogram):\n    global mel_basis\n    if mel_basis is None:\n        mel_basis = build_mel_basis()\n    return np.dot(mel_basis, spectrogram)\ndef build_mel_basis():\n    return librosa.filters.mel(sr=hp.sample_rate, n_fft= hp.n_fft, n_mels=hp.num_mels, fmin=hp.fmin)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "linear_to_mel",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def linear_to_mel(spectrogram):\n    global mel_basis\n    if mel_basis is None:\n        mel_basis = build_mel_basis()\n    return np.dot(mel_basis, spectrogram)\ndef build_mel_basis():\n    return librosa.filters.mel(sr=hp.sample_rate, n_fft= hp.n_fft, n_mels=hp.num_mels, fmin=hp.fmin)\ndef normalize(S):\n    return np.clip((S - hp.min_level_db) / -hp.min_level_db, 0, 1)\ndef denormalize(S):",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "build_mel_basis",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def build_mel_basis():\n    return librosa.filters.mel(sr=hp.sample_rate, n_fft= hp.n_fft, n_mels=hp.num_mels, fmin=hp.fmin)\ndef normalize(S):\n    return np.clip((S - hp.min_level_db) / -hp.min_level_db, 0, 1)\ndef denormalize(S):\n    return (np.clip(S, 0, 1) * -hp.min_level_db) + hp.min_level_db\ndef amp_to_db(x):\n    return 20 * np.log10(np.maximum(1e-5, x))\ndef db_to_amp(x):\n    return np.power(10.0, x * 0.05)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def normalize(S):\n    return np.clip((S - hp.min_level_db) / -hp.min_level_db, 0, 1)\ndef denormalize(S):\n    return (np.clip(S, 0, 1) * -hp.min_level_db) + hp.min_level_db\ndef amp_to_db(x):\n    return 20 * np.log10(np.maximum(1e-5, x))\ndef db_to_amp(x):\n    return np.power(10.0, x * 0.05)\ndef spectrogram(y):\n    D = stft(y)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "denormalize",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def denormalize(S):\n    return (np.clip(S, 0, 1) * -hp.min_level_db) + hp.min_level_db\ndef amp_to_db(x):\n    return 20 * np.log10(np.maximum(1e-5, x))\ndef db_to_amp(x):\n    return np.power(10.0, x * 0.05)\ndef spectrogram(y):\n    D = stft(y)\n    S = amp_to_db(np.abs(D)) - hp.ref_level_db\n    return normalize(S)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "amp_to_db",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def amp_to_db(x):\n    return 20 * np.log10(np.maximum(1e-5, x))\ndef db_to_amp(x):\n    return np.power(10.0, x * 0.05)\ndef spectrogram(y):\n    D = stft(y)\n    S = amp_to_db(np.abs(D)) - hp.ref_level_db\n    return normalize(S)\ndef melspectrogram(y):\n    D = stft(y)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "db_to_amp",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def db_to_amp(x):\n    return np.power(10.0, x * 0.05)\ndef spectrogram(y):\n    D = stft(y)\n    S = amp_to_db(np.abs(D)) - hp.ref_level_db\n    return normalize(S)\ndef melspectrogram(y):\n    D = stft(y)\n    S = amp_to_db(linear_to_mel(np.abs(D)))\n    return normalize(S)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "spectrogram",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def spectrogram(y):\n    D = stft(y)\n    S = amp_to_db(np.abs(D)) - hp.ref_level_db\n    return normalize(S)\ndef melspectrogram(y):\n    D = stft(y)\n    S = amp_to_db(linear_to_mel(np.abs(D)))\n    return normalize(S)\ndef stft(y):\n    return librosa.stft(y=y, n_fft=hp.n_fft, hop_length=hp.hop_length, win_length=hp.win_length)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "melspectrogram",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def melspectrogram(y):\n    D = stft(y)\n    S = amp_to_db(linear_to_mel(np.abs(D)))\n    return normalize(S)\ndef stft(y):\n    return librosa.stft(y=y, n_fft=hp.n_fft, hop_length=hp.hop_length, win_length=hp.win_length)\ndef pre_emphasis(x):\n    return lfilter([1, -hp.preemphasis], [1], x)\ndef de_emphasis(x):\n    return lfilter([1], [1, -hp.preemphasis], x)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "stft",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def stft(y):\n    return librosa.stft(y=y, n_fft=hp.n_fft, hop_length=hp.hop_length, win_length=hp.win_length)\ndef pre_emphasis(x):\n    return lfilter([1, -hp.preemphasis], [1], x)\ndef de_emphasis(x):\n    return lfilter([1], [1, -hp.preemphasis], x)\ndef encode_mu_law(x, mu) :\n    mu = mu - 1\n    fx = np.sign(x) * np.log(1 + mu * np.abs(x)) / np.log(1 + mu)\n    return np.floor((fx + 1) / 2 * mu + 0.5)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "pre_emphasis",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def pre_emphasis(x):\n    return lfilter([1, -hp.preemphasis], [1], x)\ndef de_emphasis(x):\n    return lfilter([1], [1, -hp.preemphasis], x)\ndef encode_mu_law(x, mu) :\n    mu = mu - 1\n    fx = np.sign(x) * np.log(1 + mu * np.abs(x)) / np.log(1 + mu)\n    return np.floor((fx + 1) / 2 * mu + 0.5)\ndef decode_mu_law(y, mu, from_labels=True) :\n    if from_labels: ",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "de_emphasis",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def de_emphasis(x):\n    return lfilter([1], [1, -hp.preemphasis], x)\ndef encode_mu_law(x, mu) :\n    mu = mu - 1\n    fx = np.sign(x) * np.log(1 + mu * np.abs(x)) / np.log(1 + mu)\n    return np.floor((fx + 1) / 2 * mu + 0.5)\ndef decode_mu_law(y, mu, from_labels=True) :\n    if from_labels: \n        y = label_2_float(y, math.log2(mu))\n    mu = mu - 1",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "encode_mu_law",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def encode_mu_law(x, mu) :\n    mu = mu - 1\n    fx = np.sign(x) * np.log(1 + mu * np.abs(x)) / np.log(1 + mu)\n    return np.floor((fx + 1) / 2 * mu + 0.5)\ndef decode_mu_law(y, mu, from_labels=True) :\n    if from_labels: \n        y = label_2_float(y, math.log2(mu))\n    mu = mu - 1\n    x = np.sign(y) / mu * ((1 + mu) ** np.abs(y) - 1)\n    return x",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "decode_mu_law",
        "kind": 2,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "def decode_mu_law(y, mu, from_labels=True) :\n    if from_labels: \n        y = label_2_float(y, math.log2(mu))\n    mu = mu - 1\n    x = np.sign(y) / mu * ((1 + mu) ** np.abs(y) - 1)\n    return x",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "mel_basis",
        "kind": 5,
        "importPath": "vocoder.audio",
        "description": "vocoder.audio",
        "peekOfCode": "mel_basis = None\ndef linear_to_mel(spectrogram):\n    global mel_basis\n    if mel_basis is None:\n        mel_basis = build_mel_basis()\n    return np.dot(mel_basis, spectrogram)\ndef build_mel_basis():\n    return librosa.filters.mel(sr=hp.sample_rate, n_fft= hp.n_fft, n_mels=hp.num_mels, fmin=hp.fmin)\ndef normalize(S):\n    return np.clip((S - hp.min_level_db) / -hp.min_level_db, 0, 1)",
        "detail": "vocoder.audio",
        "documentation": {}
    },
    {
        "label": "progbar",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def progbar(i, n, size=16):\n    done = (i * size) // n\n    bar = ''\n    for i in range(size):\n        bar += '█' if i <= done else '░'\n    return bar\ndef stream(message) :\n    try:\n        sys.stdout.write(\"\\r{%s}\" % message)\n    except:",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "stream",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def stream(message) :\n    try:\n        sys.stdout.write(\"\\r{%s}\" % message)\n    except:\n        #Remove non-ASCII characters from message\n        message = ''.join(i for i in message if ord(i)<128)\n        sys.stdout.write(\"\\r{%s}\" % message)\ndef simple_table(item_tuples) :\n    border_pattern = '+---------------------------------------'\n    whitespace = '                                            '",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "simple_table",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def simple_table(item_tuples) :\n    border_pattern = '+---------------------------------------'\n    whitespace = '                                            '\n    headings, cells, = [], []\n    for item in item_tuples :\n        heading, cell = str(item[0]), str(item[1])\n        pad_head = True if len(heading) < len(cell) else False\n        pad = abs(len(heading) - len(cell))\n        pad = whitespace[:pad]\n        pad_left = pad[:len(pad)//2]",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "time_since",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def time_since(started) :\n    elapsed = time.time() - started\n    m = int(elapsed // 60)\n    s = int(elapsed % 60)\n    if m >= 60 :\n        h = int(m // 60)\n        m = m % 60\n        return f'{h}h {m}m {s}s'\n    else :\n        return f'{m}m {s}s'",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "save_attention",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def save_attention(attn, path) :\n    fig = plt.figure(figsize=(12, 6))\n    plt.imshow(attn.T, interpolation='nearest', aspect='auto')\n    fig.savefig(f'{path}.png', bbox_inches='tight')\n    plt.close(fig)\ndef save_spectrogram(M, path, length=None) :\n    M = np.flip(M, axis=0)\n    if length : M = M[:, :length]\n    fig = plt.figure(figsize=(12, 6))\n    plt.imshow(M, interpolation='nearest', aspect='auto')",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "save_spectrogram",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def save_spectrogram(M, path, length=None) :\n    M = np.flip(M, axis=0)\n    if length : M = M[:, :length]\n    fig = plt.figure(figsize=(12, 6))\n    plt.imshow(M, interpolation='nearest', aspect='auto')\n    fig.savefig(f'{path}.png', bbox_inches='tight')\n    plt.close(fig)\ndef plot(array) : \n    fig = plt.figure(figsize=(30, 5))\n    ax = fig.add_subplot(111)",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "plot",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def plot(array) : \n    fig = plt.figure(figsize=(30, 5))\n    ax = fig.add_subplot(111)\n    ax.xaxis.label.set_color('grey')\n    ax.yaxis.label.set_color('grey')\n    ax.xaxis.label.set_fontsize(23)\n    ax.yaxis.label.set_fontsize(23)\n    ax.tick_params(axis='x', colors='grey', labelsize=23)\n    ax.tick_params(axis='y', colors='grey', labelsize=23)\n    plt.plot(array)",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "plot_spec",
        "kind": 2,
        "importPath": "vocoder.display",
        "description": "vocoder.display",
        "peekOfCode": "def plot_spec(M) :\n    M = np.flip(M, axis=0)\n    plt.figure(figsize=(18,4))\n    plt.imshow(M, interpolation='nearest', aspect='auto')\n    plt.show()",
        "detail": "vocoder.display",
        "documentation": {}
    },
    {
        "label": "log_sum_exp",
        "kind": 2,
        "importPath": "vocoder.distribution",
        "description": "vocoder.distribution",
        "peekOfCode": "def log_sum_exp(x):\n    \"\"\" numerically stable log_sum_exp implementation that prevents overflow \"\"\"\n    # TF ordering\n    axis = len(x.size()) - 1\n    m, _ = torch.max(x, dim=axis)\n    m2, _ = torch.max(x, dim=axis, keepdim=True)\n    return m + torch.log(torch.sum(torch.exp(x - m2), dim=axis))\n# It is adapted from https://github.com/r9y9/wavenet_vocoder/blob/master/wavenet_vocoder/mixture.py\ndef discretized_mix_logistic_loss(y_hat, y, num_classes=65536,\n                                  log_scale_min=None, reduce=True):",
        "detail": "vocoder.distribution",
        "documentation": {}
    },
    {
        "label": "discretized_mix_logistic_loss",
        "kind": 2,
        "importPath": "vocoder.distribution",
        "description": "vocoder.distribution",
        "peekOfCode": "def discretized_mix_logistic_loss(y_hat, y, num_classes=65536,\n                                  log_scale_min=None, reduce=True):\n    if log_scale_min is None:\n        log_scale_min = float(np.log(1e-14))\n    y_hat = y_hat.permute(0,2,1)\n    assert y_hat.dim() == 3\n    assert y_hat.size(1) % 3 == 0\n    nr_mix = y_hat.size(1) // 3\n    # (B x T x C)\n    y_hat = y_hat.transpose(1, 2)",
        "detail": "vocoder.distribution",
        "documentation": {}
    },
    {
        "label": "sample_from_discretized_mix_logistic",
        "kind": 2,
        "importPath": "vocoder.distribution",
        "description": "vocoder.distribution",
        "peekOfCode": "def sample_from_discretized_mix_logistic(y, log_scale_min=None):\n    \"\"\"\n    Sample from discretized mixture of logistic distributions\n    Args:\n        y (Tensor): B x C x T\n        log_scale_min (float): Log scale minimum value\n    Returns:\n        Tensor: sample in range of [-1, 1].\n    \"\"\"\n    if log_scale_min is None:",
        "detail": "vocoder.distribution",
        "documentation": {}
    },
    {
        "label": "to_one_hot",
        "kind": 2,
        "importPath": "vocoder.distribution",
        "description": "vocoder.distribution",
        "peekOfCode": "def to_one_hot(tensor, n, fill_with=1.):\n    # we perform one hot encore with respect to the last axis\n    one_hot = torch.FloatTensor(tensor.size() + (n,)).zero_()\n    if tensor.is_cuda:\n        one_hot = one_hot.cuda()\n    one_hot.scatter_(len(tensor.size()), tensor.unsqueeze(-1), fill_with)\n    return one_hot",
        "detail": "vocoder.distribution",
        "documentation": {}
    },
    {
        "label": "gen_testset",
        "kind": 2,
        "importPath": "vocoder.gen_wavernn",
        "description": "vocoder.gen_wavernn",
        "peekOfCode": "def gen_testset(model: WaveRNN, test_set, samples, batched, target, overlap, save_path):\n    k = model.get_step() // 1000\n    for i, (m, x) in enumerate(test_set, 1):\n        if i > samples: \n            break\n        print('\\n| Generating: %i/%i' % (i, samples))\n        x = x[0].numpy()\n        bits = 16 if hp.voc_mode == 'MOL' else hp.bits\n        if hp.mu_law and hp.voc_mode != 'MOL' :\n            x = decode_mu_law(x, 2**bits, from_labels=True)",
        "detail": "vocoder.gen_wavernn",
        "documentation": {}
    },
    {
        "label": "sample_rate",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "sample_rate = _syn_hp.sample_rate\nn_fft = _syn_hp.n_fft\nnum_mels = _syn_hp.num_mels\nhop_length = _syn_hp.hop_size\nwin_length = _syn_hp.win_size\nfmin = _syn_hp.fmin\nmin_level_db = _syn_hp.min_level_db\nref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "n_fft",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "n_fft = _syn_hp.n_fft\nnum_mels = _syn_hp.num_mels\nhop_length = _syn_hp.hop_size\nwin_length = _syn_hp.win_size\nfmin = _syn_hp.fmin\nmin_level_db = _syn_hp.min_level_db\nref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "num_mels",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "num_mels = _syn_hp.num_mels\nhop_length = _syn_hp.hop_size\nwin_length = _syn_hp.win_size\nfmin = _syn_hp.fmin\nmin_level_db = _syn_hp.min_level_db\nref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "hop_length",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "hop_length = _syn_hp.hop_size\nwin_length = _syn_hp.win_size\nfmin = _syn_hp.fmin\nmin_level_db = _syn_hp.min_level_db\nref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "win_length",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "win_length = _syn_hp.win_size\nfmin = _syn_hp.fmin\nmin_level_db = _syn_hp.min_level_db\nref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "fmin",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "fmin = _syn_hp.fmin\nmin_level_db = _syn_hp.min_level_db\nref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "min_level_db",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "min_level_db = _syn_hp.min_level_db\nref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------\nvoc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from ",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "ref_level_db",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "ref_level_db = _syn_hp.ref_level_db\nmel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------\nvoc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from \n# mixture of logistics)",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "mel_max_abs_value",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "mel_max_abs_value = _syn_hp.max_abs_value\npreemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------\nvoc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from \n# mixture of logistics)\nvoc_upsample_factors = (5, 5, 8)    # NB - this needs to correctly factorise hop_length",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "preemphasis",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "preemphasis = _syn_hp.preemphasis\napply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------\nvoc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from \n# mixture of logistics)\nvoc_upsample_factors = (5, 5, 8)    # NB - this needs to correctly factorise hop_length\nvoc_rnn_dims = 512",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "apply_preemphasis",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "apply_preemphasis = _syn_hp.preemphasize\nbits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------\nvoc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from \n# mixture of logistics)\nvoc_upsample_factors = (5, 5, 8)    # NB - this needs to correctly factorise hop_length\nvoc_rnn_dims = 512\nvoc_fc_dims = 512",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "bits",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "bits = 9                            # bit depth of signal\nmu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------\nvoc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from \n# mixture of logistics)\nvoc_upsample_factors = (5, 5, 8)    # NB - this needs to correctly factorise hop_length\nvoc_rnn_dims = 512\nvoc_fc_dims = 512\nvoc_compute_dims = 128",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "mu_law",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "mu_law = True                       # Recommended to suppress noise if using raw bits in hp.voc_mode\n                                    # below\n# WAVERNN / VOCODER --------------------------------------------------------------------------------\nvoc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from \n# mixture of logistics)\nvoc_upsample_factors = (5, 5, 8)    # NB - this needs to correctly factorise hop_length\nvoc_rnn_dims = 512\nvoc_fc_dims = 512\nvoc_compute_dims = 128\nvoc_res_out_dims = 128",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_mode",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_mode = 'RAW'                    # either 'RAW' (softmax on raw bits) or 'MOL' (sample from \n# mixture of logistics)\nvoc_upsample_factors = (5, 5, 8)    # NB - this needs to correctly factorise hop_length\nvoc_rnn_dims = 512\nvoc_fc_dims = 512\nvoc_compute_dims = 128\nvoc_res_out_dims = 128\nvoc_res_blocks = 10\n# Training\nvoc_batch_size = 100",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_upsample_factors",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_upsample_factors = (5, 5, 8)    # NB - this needs to correctly factorise hop_length\nvoc_rnn_dims = 512\nvoc_fc_dims = 512\nvoc_compute_dims = 128\nvoc_res_out_dims = 128\nvoc_res_blocks = 10\n# Training\nvoc_batch_size = 100\nvoc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_rnn_dims",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_rnn_dims = 512\nvoc_fc_dims = 512\nvoc_compute_dims = 128\nvoc_res_out_dims = 128\nvoc_res_blocks = 10\n# Training\nvoc_batch_size = 100\nvoc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider ",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_fc_dims",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_fc_dims = 512\nvoc_compute_dims = 128\nvoc_res_out_dims = 128\nvoc_res_blocks = 10\n# Training\nvoc_batch_size = 100\nvoc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_compute_dims",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_compute_dims = 128\nvoc_res_out_dims = 128\nvoc_res_blocks = 10\n# Training\nvoc_batch_size = 100\nvoc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length\nvoc_seq_len = hop_length * 5        # must be a multiple of hop_length",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_res_out_dims",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_res_out_dims = 128\nvoc_res_blocks = 10\n# Training\nvoc_batch_size = 100\nvoc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length\nvoc_seq_len = hop_length * 5        # must be a multiple of hop_length\n# Generating / Synthesizing",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_res_blocks",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_res_blocks = 10\n# Training\nvoc_batch_size = 100\nvoc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length\nvoc_seq_len = hop_length * 5        # must be a multiple of hop_length\n# Generating / Synthesizing\nvoc_gen_batched = True              # very fast (realtime+) single utterance batched generation",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_batch_size",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_batch_size = 100\nvoc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length\nvoc_seq_len = hop_length * 5        # must be a multiple of hop_length\n# Generating / Synthesizing\nvoc_gen_batched = True              # very fast (realtime+) single utterance batched generation\nvoc_target = 8000                   # target number of samples to be generated in each batch entry\nvoc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_lr",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_lr = 1e-4\nvoc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length\nvoc_seq_len = hop_length * 5        # must be a multiple of hop_length\n# Generating / Synthesizing\nvoc_gen_batched = True              # very fast (realtime+) single utterance batched generation\nvoc_target = 8000                   # target number of samples to be generated in each batch entry\nvoc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_gen_at_checkpoint",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_gen_at_checkpoint = 5           # number of samples to generate at each checkpoint\nvoc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length\nvoc_seq_len = hop_length * 5        # must be a multiple of hop_length\n# Generating / Synthesizing\nvoc_gen_batched = True              # very fast (realtime+) single utterance batched generation\nvoc_target = 8000                   # target number of samples to be generated in each batch entry\nvoc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_pad",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_pad = 2                         # this will pad the input so that the resnet can 'see' wider \n                                    # than input length\nvoc_seq_len = hop_length * 5        # must be a multiple of hop_length\n# Generating / Synthesizing\nvoc_gen_batched = True              # very fast (realtime+) single utterance batched generation\nvoc_target = 8000                   # target number of samples to be generated in each batch entry\nvoc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_seq_len",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_seq_len = hop_length * 5        # must be a multiple of hop_length\n# Generating / Synthesizing\nvoc_gen_batched = True              # very fast (realtime+) single utterance batched generation\nvoc_target = 8000                   # target number of samples to be generated in each batch entry\nvoc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_gen_batched",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_gen_batched = True              # very fast (realtime+) single utterance batched generation\nvoc_target = 8000                   # target number of samples to be generated in each batch entry\nvoc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_target",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_target = 8000                   # target number of samples to be generated in each batch entry\nvoc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "voc_overlap",
        "kind": 5,
        "importPath": "vocoder.hparams",
        "description": "vocoder.hparams",
        "peekOfCode": "voc_overlap = 400                   # number of samples for crossfading between batches",
        "detail": "vocoder.hparams",
        "documentation": {}
    },
    {
        "label": "load_model",
        "kind": 2,
        "importPath": "vocoder.inference",
        "description": "vocoder.inference",
        "peekOfCode": "def load_model(weights_fpath, verbose=True):\n    global _model, _device\n    if verbose:\n        print(\"Building Wave-RNN\")\n    _model = WaveRNN(\n        rnn_dims=hp.voc_rnn_dims,\n        fc_dims=hp.voc_fc_dims,\n        bits=hp.bits,\n        pad=hp.voc_pad,\n        upsample_factors=hp.voc_upsample_factors,",
        "detail": "vocoder.inference",
        "documentation": {}
    },
    {
        "label": "is_loaded",
        "kind": 2,
        "importPath": "vocoder.inference",
        "description": "vocoder.inference",
        "peekOfCode": "def is_loaded():\n    return _model is not None\ndef infer_waveform(mel, normalize=True,  batched=True, target=8000, overlap=800, \n                   progress_callback=None):\n    \"\"\"\n    Infers the waveform of a mel spectrogram output by the synthesizer (the format must match \n    that of the synthesizer!)\n    :param normalize:  \n    :param batched: \n    :param target: ",
        "detail": "vocoder.inference",
        "documentation": {}
    },
    {
        "label": "infer_waveform",
        "kind": 2,
        "importPath": "vocoder.inference",
        "description": "vocoder.inference",
        "peekOfCode": "def infer_waveform(mel, normalize=True,  batched=True, target=8000, overlap=800, \n                   progress_callback=None):\n    \"\"\"\n    Infers the waveform of a mel spectrogram output by the synthesizer (the format must match \n    that of the synthesizer!)\n    :param normalize:  \n    :param batched: \n    :param target: \n    :param overlap: \n    :return: ",
        "detail": "vocoder.inference",
        "documentation": {}
    },
    {
        "label": "_model",
        "kind": 5,
        "importPath": "vocoder.inference",
        "description": "vocoder.inference",
        "peekOfCode": "_model = None   # type: WaveRNN\ndef load_model(weights_fpath, verbose=True):\n    global _model, _device\n    if verbose:\n        print(\"Building Wave-RNN\")\n    _model = WaveRNN(\n        rnn_dims=hp.voc_rnn_dims,\n        fc_dims=hp.voc_fc_dims,\n        bits=hp.bits,\n        pad=hp.voc_pad,",
        "detail": "vocoder.inference",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "vocoder.train",
        "description": "vocoder.train",
        "peekOfCode": "def train(run_id: str, syn_dir: Path, voc_dir: Path, models_dir: Path, ground_truth: bool,\n          save_every: int, backup_every: int, force_restart: bool):\n    # Check to make sure the hop length is correctly factorised\n    assert np.cumprod(hp.voc_upsample_factors)[-1] == hp.hop_length\n    # Instantiate the model\n    print(\"Initializing the model...\")\n    model = WaveRNN(\n        rnn_dims=hp.voc_rnn_dims,\n        fc_dims=hp.voc_fc_dims,\n        bits=hp.bits,",
        "detail": "vocoder.train",
        "documentation": {}
    },
    {
        "label": "VocoderDataset",
        "kind": 6,
        "importPath": "vocoder.vocoder_dataset",
        "description": "vocoder.vocoder_dataset",
        "peekOfCode": "class VocoderDataset(Dataset):\n    def __init__(self, metadata_fpath: Path, mel_dir: Path, wav_dir: Path):\n        print(\"Using inputs from:\\n\\t%s\\n\\t%s\\n\\t%s\" % (metadata_fpath, mel_dir, wav_dir))\n        with metadata_fpath.open(\"r\") as metadata_file:\n            metadata = [line.split(\"|\") for line in metadata_file]\n        gta_fnames = [x[1] for x in metadata if int(x[4])]\n        gta_fpaths = [mel_dir.joinpath(fname) for fname in gta_fnames]\n        wav_fnames = [x[0] for x in metadata if int(x[4])]\n        wav_fpaths = [wav_dir.joinpath(fname) for fname in wav_fnames]\n        self.samples_fpaths = list(zip(gta_fpaths, wav_fpaths))",
        "detail": "vocoder.vocoder_dataset",
        "documentation": {}
    },
    {
        "label": "collate_vocoder",
        "kind": 2,
        "importPath": "vocoder.vocoder_dataset",
        "description": "vocoder.vocoder_dataset",
        "peekOfCode": "def collate_vocoder(batch):\n    mel_win = hp.voc_seq_len // hp.hop_length + 2 * hp.voc_pad\n    max_offsets = [x[0].shape[-1] -2 - (mel_win + 2 * hp.voc_pad) for x in batch]\n    mel_offsets = [np.random.randint(0, offset) for offset in max_offsets]\n    sig_offsets = [(offset + hp.voc_pad) * hp.hop_length for offset in mel_offsets]\n    mels = [x[0][:, mel_offsets[i]:mel_offsets[i] + mel_win] for i, x in enumerate(batch)]\n    labels = [x[1][sig_offsets[i]:sig_offsets[i] + hp.voc_seq_len + 1] for i, x in enumerate(batch)]\n    mels = np.stack(mels).astype(np.float32)\n    labels = np.stack(labels).astype(np.int64)\n    mels = torch.tensor(mels)",
        "detail": "vocoder.vocoder_dataset",
        "documentation": {}
    },
    {
        "label": "homePage",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def homePage():\n    return render_template(\"index.html\",output=\"\",languages=LANGUAGES,)\n@app.after_request\ndef add_header(response):\n    # response.cache_control.no_store = True\n    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0, max-age=0'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '-1'\n    return response\ndef htmloader(text,inputaudio,outputaudio):",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "add_header",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def add_header(response):\n    # response.cache_control.no_store = True\n    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0, max-age=0'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '-1'\n    return response\ndef htmloader(text,inputaudio,outputaudio):\n    x = \"\"\n    x+=\"Utterance: <p>\"+text+\"</p><br>\"\n    x+=\"Original:<br>\"",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "htmloader",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def htmloader(text,inputaudio,outputaudio):\n    x = \"\"\n    x+=\"Utterance: <p>\"+text+\"</p><br>\"\n    x+=\"Original:<br>\"\n    x+=\"<audio controls>\"\n    x+=\"  <source src='\"+inputaudio+\"' type='audio/\"+inputaudio.rsplit('.', 1)[1].lower()+\"'>\"\n    x+=\"</audio><br>\"\n    x+=\"Cloned Utterance:<br>\"\n    x+=\"<audio controls>\"\n    x+=\"  <source src='\"+str(outputaudio)+\"' type='audio/wav'>\"",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\ndef upload_file():\n    fil = []\n    if request.method == 'POST':\n        f = request.files['file']\n        if allowed_file(f.filename):\n            f.save(UPLOAD_FOLDER+secure_filename(f.filename))\n            fil.append(\"File uploaded successfully\")",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def upload_file():\n    fil = []\n    if request.method == 'POST':\n        f = request.files['file']\n        if allowed_file(f.filename):\n            f.save(UPLOAD_FOLDER+secure_filename(f.filename))\n            fil.append(\"File uploaded successfully\")\n            fil.append(UPLOAD_FOLDER+secure_filename(f.filename))\n            return fil\n        else:",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "Voice_clone",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def Voice_clone():\n    legoutput = upload_file()\n    lig = \"This is a demo utterance. This will work when you do not add any utterance.\"\n    if request.method == 'POST':\n        lig = request.form[\"textarea\"]\n    print(str(lig))\n    #return mainpage()\n    if str(legoutput)==\"None\":\n        return render_template(\"index.html\",output=\"\")\n    else:",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def translate():\n    translation = \"\"\n    if request.method == \"POST\":\n        source_lang = request.form.get(\"source_lang\")\n        target_lang = request.form.get(\"target_lang\")\n        text = request.form.get(\"text\")\n        data = {\n            \"q\": text,\n            \"source\": source_lang,\n            \"target\": target_lang",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "allowed_filet",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def allowed_filet(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONST\n@app.route('/transcribe', methods=['POST'])\ndef recognize_speech():\n    if 'file' not in request.files:\n        return jsonify({\"error\": \"No file part\"}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({\"error\": \"No selected file\"}), 400\n    if not allowed_filet(file.filename):",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "recognize_speech",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def recognize_speech():\n    if 'file' not in request.files:\n        return jsonify({\"error\": \"No file part\"}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({\"error\": \"No selected file\"}), 400\n    if not allowed_filet(file.filename):\n        return jsonify({\"error\": \"Unsupported file format\"}), 400\n    if file and allowed_filet(file.filename):\n        # Convert audio file to WAV format using ffmpeg",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "#TEMPLATE_DIR",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "#TEMPLATE_DIR = os.path.abspath('../templates')\n#STATIC_DIR = os.path.abspath('../static')\n# app = Flask(__name__) # to make the app run without any\n#app = Flask(__name__, template_folder=TEMPLATE_DIR, static_folder=STATIC_DIR)\nUPLOAD_FOLDER = 'static/'\nALLOWED_EXTENSIONS = {\"wav\",\"mp3\"}\nLIBRE_TRANSLATE_URL = \"http://localhost:5001/translate\"\nLANGUAGES = [\"en\", \"es\", \"fr\", \"de\", \"zh\", \"ja\", \"ru\", \"it\"]  # Add more languages as needed\napp = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "#STATIC_DIR",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "#STATIC_DIR = os.path.abspath('../static')\n# app = Flask(__name__) # to make the app run without any\n#app = Flask(__name__, template_folder=TEMPLATE_DIR, static_folder=STATIC_DIR)\nUPLOAD_FOLDER = 'static/'\nALLOWED_EXTENSIONS = {\"wav\",\"mp3\"}\nLIBRE_TRANSLATE_URL = \"http://localhost:5001/translate\"\nLANGUAGES = [\"en\", \"es\", \"fr\", \"de\", \"zh\", \"ja\", \"ru\", \"it\"]  # Add more languages as needed\napp = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "#app",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "#app = Flask(__name__, template_folder=TEMPLATE_DIR, static_folder=STATIC_DIR)\nUPLOAD_FOLDER = 'static/'\nALLOWED_EXTENSIONS = {\"wav\",\"mp3\"}\nLIBRE_TRANSLATE_URL = \"http://localhost:5001/translate\"\nLANGUAGES = [\"en\", \"es\", \"fr\", \"de\", \"zh\", \"ja\", \"ru\", \"it\"]  # Add more languages as needed\napp = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "UPLOAD_FOLDER = 'static/'\nALLOWED_EXTENSIONS = {\"wav\",\"mp3\"}\nLIBRE_TRANSLATE_URL = \"http://localhost:5001/translate\"\nLANGUAGES = [\"en\", \"es\", \"fr\", \"de\", \"zh\", \"ja\", \"ru\", \"it\"]  # Add more languages as needed\napp = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):\n#    return send_from_directory('output', filepath)",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "ALLOWED_EXTENSIONS = {\"wav\",\"mp3\"}\nLIBRE_TRANSLATE_URL = \"http://localhost:5001/translate\"\nLANGUAGES = [\"en\", \"es\", \"fr\", \"de\", \"zh\", \"ja\", \"ru\", \"it\"]  # Add more languages as needed\napp = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):\n#    return send_from_directory('output', filepath)\n@app.route('/',methods=['GET', 'POST'])",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "LIBRE_TRANSLATE_URL",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "LIBRE_TRANSLATE_URL = \"http://localhost:5001/translate\"\nLANGUAGES = [\"en\", \"es\", \"fr\", \"de\", \"zh\", \"ja\", \"ru\", \"it\"]  # Add more languages as needed\napp = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):\n#    return send_from_directory('output', filepath)\n@app.route('/',methods=['GET', 'POST'])\ndef homePage():",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "LANGUAGES = [\"en\", \"es\", \"fr\", \"de\", \"zh\", \"ja\", \"ru\", \"it\"]  # Add more languages as needed\napp = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):\n#    return send_from_directory('output', filepath)\n@app.route('/',methods=['GET', 'POST'])\ndef homePage():\n    return render_template(\"index.html\",output=\"\",languages=LANGUAGES,)",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app = Flask(__name__,template_folder=\"template/\",static_folder=\"static/\")\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):\n#    return send_from_directory('output', filepath)\n@app.route('/',methods=['GET', 'POST'])\ndef homePage():\n    return render_template(\"index.html\",output=\"\",languages=LANGUAGES,)\n@app.after_request",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):\n#    return send_from_directory('output', filepath)\n@app.route('/',methods=['GET', 'POST'])\ndef homePage():\n    return render_template(\"index.html\",output=\"\",languages=LANGUAGES,)\n@app.after_request\ndef add_header(response):",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app.config['SEND_FILE_MAX_AGE_DEFAULT']",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n#@app.route('/output/<path:filepath>')\n#def stater(filepath):\n#    return send_from_directory('output', filepath)\n@app.route('/',methods=['GET', 'POST'])\ndef homePage():\n    return render_template(\"index.html\",output=\"\",languages=LANGUAGES,)\n@app.after_request\ndef add_header(response):\n    # response.cache_control.no_store = True",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "model = Model(lang=\"en-us\")\nSetLogLevel(0)\nMAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB\nALLOWED_EXTENSIONST = {'mp3', 'wav', 'flac', 'ogg', 'm4a'}\ndef allowed_filet(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONST\n@app.route('/transcribe', methods=['POST'])\ndef recognize_speech():\n    if 'file' not in request.files:\n        return jsonify({\"error\": \"No file part\"}), 400",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB\nALLOWED_EXTENSIONST = {'mp3', 'wav', 'flac', 'ogg', 'm4a'}\ndef allowed_filet(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONST\n@app.route('/transcribe', methods=['POST'])\ndef recognize_speech():\n    if 'file' not in request.files:\n        return jsonify({\"error\": \"No file part\"}), 400\n    file = request.files['file']\n    if file.filename == '':",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONST",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "ALLOWED_EXTENSIONST = {'mp3', 'wav', 'flac', 'ogg', 'm4a'}\ndef allowed_filet(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONST\n@app.route('/transcribe', methods=['POST'])\ndef recognize_speech():\n    if 'file' not in request.files:\n        return jsonify({\"error\": \"No file part\"}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({\"error\": \"No selected file\"}), 400",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "prepare_run",
        "kind": 2,
        "importPath": "synthesizer_train",
        "description": "synthesizer_train",
        "peekOfCode": "def prepare_run(args):\n    modified_hp = hparams.parse(args.hparams)\n    os.environ[\"TF_CPP_MIN_LOG_LEVEL\"] = str(args.tf_log_level)\n    run_name = args.name\n    log_dir = os.path.join(args.models_dir, \"logs-{}\".format(run_name))\n    os.makedirs(log_dir, exist_ok=True)\n    infolog.init(os.path.join(log_dir, \"Terminal_train_log\"), run_name, args.slack_url)\n    return log_dir, modified_hp\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()",
        "detail": "synthesizer_train",
        "documentation": {}
    }
]